<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="UI_AgreeCreateAccount" xml:space="preserve">
    <value>I agree with the</value>
    <comment>Text placed just before a link labeled 'Term of Service' into the 'create account' page.</comment>
  </data>
  <data name="UI_Cancel" xml:space="preserve">
    <value>Cancel</value>
    <comment>Label for any 'Cancel' button, link, etc. - (String as short as possible).</comment>
  </data>
  <data name="UI_CloudDriveName" xml:space="preserve">
    <value>Cloud Drive</value>
    <comment>Label for any 'Cloud Drive' button, link, text, title, etc. - (String as short as possible).</comment>
  </data>
  <data name="UI_ConfirmPasswordWatermark" xml:space="preserve">
    <value>Confirm your password</value>
    <comment>Watermark label for the confirmation password field into 'create account' page or when changing the password  - (String as short as possible).</comment>
  </data>
  <data name="UI_CreateAccount" xml:space="preserve">
    <value>Create account</value>
    <comment>Label for any 'Create account' button, link, text, title, etc. - (String as short as possible).</comment>
  </data>
  <data name="UI_EmailWatermark" xml:space="preserve">
    <value>Your e-mail address</value>
    <comment>Watermark label for the e-mail address field when create/confirm account and login - (String as short as possible).</comment>
  </data>
  <data name="UI_EmptyCloudDrive" xml:space="preserve">
    <value>No files in your cloud drive</value>
    <comment>Label for the background of an empty cloud drive page - (String as short as possible).</comment>
  </data>
  <data name="UI_EmptyFolder" xml:space="preserve">
    <value>Empty folder</value>
    <comment>Label for the background of an empty forder page - (String as short as possible).</comment>
  </data>
  <data name="UI_EmptyOffline" xml:space="preserve">
    <value>No items saved for offline</value>
    <comment>Label for the background of an empty transfers page - (String as short as possible).</comment>
  </data>
  <data name="UI_EmptyRubbishBin" xml:space="preserve">
    <value>Empty rubbish bin</value>
    <comment>Label for the background of an empty rubbish bin page - (String as short as possible).</comment>
  </data>
  <data name="UI_EmptySharedFolders" xml:space="preserve">
    <value>No shared folders</value>
    <comment>Label for the background of an empty shared folders page - (String as short as possible).</comment>
  </data>
  <data name="UI_FirstNameWatermark" xml:space="preserve">
    <value>Your first name</value>
    <comment>Watermark label for the user's first name field when create account - (String as short as possible).</comment>
  </data>
  <data name="UI_ImportLinkBorderText" xml:space="preserve">
    <value>Import to {0}</value>
    <comment>Label for the dialog shown when a user are trying to import a MEGA link - (String as short as possible).
Preserve the {0} code because is for include the name of the destination folder in runtime.</comment>
  </data>
  <data name="UI_LastNameWatermark" xml:space="preserve">
    <value>Your last name</value>
    <comment>Watermark label for the user's last name field when create account - (String as short as possible).</comment>
  </data>
  <data name="UI_Login" xml:space="preserve">
    <value>Login</value>
    <comment>Label for any 'Login' button, link, text, title, etc. - (String as short as possible).</comment>
  </data>
  <data name="UI_MultipleFiles" xml:space="preserve">
    <value>files</value>
    <comment>Label for any 'Files' (multiple files) button, link, text, title, etc. - (String as short as possible).</comment>
  </data>
  <data name="UI_MultipleFolders" xml:space="preserve">
    <value>folders</value>
    <comment>Label for any 'Folders' (multiple folders) button, link, text, title, etc. - (String as short as possible).</comment>
  </data>
  <data name="UI_No" xml:space="preserve">
    <value>No</value>
    <comment>Label for any 'No' button, link, text, title, etc. - (String as short as possible).</comment>
  </data>
  <data name="UI_NoInternetConnection" xml:space="preserve">
    <value>No internet connection</value>
    <comment>Label for the background of an empty state when no internet connection - (String as short as possible).</comment>
  </data>
  <data name="UI_Off" xml:space="preserve">
    <value>Off</value>
    <comment>Label for any 'Off' (On/Off) button, link, text, title, etc. - (String as short as possible).</comment>
  </data>
  <data name="UI_Ok" xml:space="preserve">
    <value>Ok</value>
    <comment>Label for any 'Ok' button, link, text, title, etc. - (String as short as possible).</comment>
  </data>
  <data name="UI_On" xml:space="preserve">
    <value>On</value>
    <comment>Label for any 'On' (On/Off) button, link, text, title, etc. - (String as short as possible).</comment>
  </data>
  <data name="UI_PasswordWatermark" xml:space="preserve">
    <value>Your password</value>
    <comment>Watermark label for the user's password field when create/confirm account and login - (String as short as possible).</comment>
  </data>
  <data name="UI_RubbishBinName" xml:space="preserve">
    <value>Rubbish bin</value>
    <comment>Label for any 'Rubbish bin' button, link, text, etc. - (String as short as possible).</comment>
  </data>
  <data name="UI_SingleFile" xml:space="preserve">
    <value>file</value>
    <comment>Label for any 'File' button, link, text, title, etc. - (String as short as possible).</comment>
  </data>
  <data name="UI_SingleFolder" xml:space="preserve">
    <value>folder</value>
    <comment>Label for any 'Folder' button, link, text, title, etc. - (String as short as possible).</comment>
  </data>
  <data name="UI_TermsOfService" xml:space="preserve">
    <value>Terms of service</value>
    <comment>Label for any 'Terms of Service' button, link, text, title, etc. - (String as short as possible).</comment>
  </data>
  <data name="UI_Yes" xml:space="preserve">
    <value>Yes</value>
    <comment>Label for any 'Yes' button, link, text, title, etc. - (String as short as possible).</comment>
  </data>
</root>