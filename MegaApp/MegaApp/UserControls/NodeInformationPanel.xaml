<userControls:BaseNodeInformationPanel
    x:Class="MegaApp.UserControls.NodeInformationPanel"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:behaviors="using:MegaApp.Behaviors"
    xmlns:core="using:Microsoft.Xaml.Interactions.Core"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:extensions="using:MegaApp.Extensions"
    xmlns:interactivity="using:Microsoft.Xaml.Interactivity"
    xmlns:local="using:MegaApp.UserControls"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:triggers="using:WindowsStateTriggers"
    xmlns:userControls="using:MegaApp.UserControls"
    xmlns:userControlsViewModels="using:MegaApp.ViewModels.UserControls"
    mc:Ignorable="d"
    d:DataContext="{d:DesignInstance userControlsViewModels:NodeInformationPanelViewModel}">

    <UserControl.Resources>
        <DataTemplate x:Name="NoPreviewHeader">
            <Grid
                Margin="24,32,24,44"
                HorizontalAlignment="Stretch"
                VerticalAlignment="Center">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="*" />
                </Grid.ColumnDefinitions>
                <Path
                    Grid.Column="0"
                    Height="60" Width="60"
                    Data="{Binding DefaultImagePathData, Mode=OneWay}"
                    Stretch="Uniform"
                    Visibility="{Binding ThumbnailImageUri, Converter={StaticResource InverseStringVisibilityConverter}}">
                    <Path.Fill>
                        <SolidColorBrush Color="{ThemeResource MegaAppForeground}" />
                    </Path.Fill>
                </Path>
                <Image
                    Grid.Column="0"
                    Height="60" Width="60"
                    Stretch="UniformToFill"
                    Visibility="{Binding ThumbnailImageUri, Converter={StaticResource StringVisibilityConverter}}">
                    <Image.Source>
                        <BitmapImage
                            DecodePixelHeight="60"
                            DecodePixelType="Logical"
                            UriSource="{Binding ThumbnailImageUri}" />
                    </Image.Source>
                </Image>
                <TextBlock
                    Grid.Column="1"
                    Margin="16,0,0,0"
                    FontSize="18"
                    Text="{Binding Name, Mode=OneWay}"
                    TextTrimming="CharacterEllipsis"
                    TextWrapping="WrapWholeWords"
                    VerticalAlignment="Center" />
            </Grid>
        </DataTemplate>

        <DataTemplate x:Name="PreviewHeader">
            <Grid>
                <Grid.RowDefinitions>
                    <RowDefinition Height="192" />
                    <RowDefinition Height="Auto" />
                </Grid.RowDefinitions>
                <Grid 
                    Grid.Row="0"
                    Background="{ThemeResource MegaAppBackgroundBrush}"
                    HorizontalAlignment="Stretch"
                    VerticalAlignment="Center">
                    <Image                        
                        HorizontalAlignment="Center"
                        Stretch="Uniform">
                        <Image.Source>
                            <BitmapImage UriSource="{Binding PreviewImageUri}" />
                        </Image.Source>
                    </Image>
                </Grid>
                <TextBlock
                    Grid.Row="1"
                    Margin="24,20"
                    FontSize="24"
                    FontWeight="SemiLight"
                    Text="{Binding Name, Mode=OneWay}"
                    TextTrimming="CharacterEllipsis"
                    TextWrapping="NoWrap" />
            </Grid>
        </DataTemplate>

        <DataTemplate x:Name="NodeInformationPanelHeader">
            <Grid>
                <ContentControl
                    ContentTemplate="{StaticResource NoPreviewHeader}"
                    Visibility="{Binding PreviewImageUri, Converter={StaticResource InverseStringVisibilityConverter}}"/>
                <ContentControl
                    ContentTemplate="{StaticResource PreviewHeader}"
                    Visibility="{Binding PreviewImageUri, Converter={StaticResource StringVisibilityConverter}}"/>
            </Grid>
        </DataTemplate>
    </UserControl.Resources>

    <SplitView
        x:Name="SplitView"
        DataContext="{x:Bind ViewModel}"
        DisplayMode="Overlay"
        IsPaneOpen="False"
        PanePlacement="Right">
        <SplitView.Pane>
            <Grid>
                <userControls:ShareToPanel
                    x:Name="ShareToPanelControl"
                    Background="{StaticResource MegaAppBackgroundBrush}"
                    Foreground="{StaticResource MegaAppForegroundBrush}"
                    Node="{x:Bind ViewModel.Node}"/>
            </Grid>
        </SplitView.Pane>

        <Grid DataContext="{x:Bind ViewModel}">
            <Grid.RowDefinitions>
                <RowDefinition Height="{StaticResource PageHeaderRowHeight}" />
                <RowDefinition Height="*" />
                <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>

            <Grid Grid.Row="0">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="Auto" />
                </Grid.ColumnDefinitions>

                <TextBlock
                    x:Name="SectionNameText"
                    Grid.Column="0"
                    Margin="24,14,0,0"
                    FontSize="12"
                    Foreground="{StaticResource MegaRedColorBrush}"
                    Text="{x:Bind ViewModel.InformationText, Mode=OneTime}" />

                <Grid x:Name="TopCommandBar" Grid.Column="1">
                    <CommandBar
                        x:Name="MainTopCommandBar"
                        Background="Transparent"
                        extensions:CommandBarExtensions.HideMoreButton="True"
                        IsEnabled="{x:Bind ViewModel.IsNetworkAvailable, Mode=OneWay}"
                        Style="{StaticResource MegaCommandBarStyle}">
                        <AppBarButton
                            Command="{Binding Node.PreviewCommand}"
                            Label="{x:Bind ViewModel.PreviewText, Mode=OneTime}"
                            Style="{StaticResource MegaAppBarButtonStyle}"
                            ToolTipService.ToolTip="{x:Bind ViewModel.PreviewText, Mode=OneTime}"
                            Visibility="{Binding Node, ConverterParameter='preview', Converter={StaticResource NodeViewStateToVisibilityConverter}}">
                            <AppBarButton.Icon>
                                <PathIcon
                                    HorizontalAlignment="Center"
                                    VerticalAlignment="Center"
                                    Data="{x:Bind ViewModel.PreviewImagePathData, Mode=OneTime}" />
                            </AppBarButton.Icon>
                        </AppBarButton>
                        <AppBarButton
                            Command="{Binding Node.DownloadCommand}"
                            Label="{x:Bind ViewModel.DownloadText, Mode=OneTime}"
                            Style="{StaticResource MegaAppBarButtonStyle}"
                            ToolTipService.ToolTip="{x:Bind ViewModel.DownloadText, Mode=OneTime}"
                            Visibility="{Binding Node, ConverterParameter='download', Converter={StaticResource NodeViewStateToVisibilityConverter}}">
                            <AppBarButton.Icon>
                                <PathIcon 
                                    Data="{x:Bind ViewModel.DownloadPathData, Mode=OneTime}"
                                    HorizontalAlignment="Center"
                                    VerticalAlignment="Center"/>
                            </AppBarButton.Icon>
                        </AppBarButton>
                        <AppBarButton
                            Command="{Binding Node.ImportCommand}"
                            Label="{x:Bind ViewModel.ImportText, Mode=OneTime}"
                            Style="{StaticResource MegaAppBarButtonStyle}"
                            ToolTipService.ToolTip="{x:Bind ViewModel.ImportText, Mode=OneTime}"
                            Visibility="{Binding Node, ConverterParameter='import', Converter={StaticResource NodeViewStateToVisibilityConverter}}">
                            <AppBarButton.Icon>
                                <PathIcon 
                                    Data="{x:Bind ViewModel.ImportPathData, Mode=OneTime}"
                                    HorizontalAlignment="Center"
                                    VerticalAlignment="Center"/>
                            </AppBarButton.Icon>
                        </AppBarButton>
                        <AppBarButton
                            Command="{Binding Node.CopyOrMoveCommand}"
                            Label="{x:Bind ViewModel.CopyOrMoveText, Mode=OneTime}"
                            Style="{StaticResource MegaAppBarButtonStyle}"
                            ToolTipService.ToolTip="{x:Bind ViewModel.CopyOrMoveText}"
                            Visibility="{Binding Node, ConverterParameter='copyormove', Converter={StaticResource NodeViewStateToVisibilityConverter}}">
                            <AppBarButton.Icon>
                                <PathIcon
                                    HorizontalAlignment="Center"
                                    VerticalAlignment="Center"
                                    Data="{x:Bind ViewModel.CopyOrMovePathData, Mode=OneTime}" />
                            </AppBarButton.Icon>
                        </AppBarButton>
                        <AppBarButton
                            Command="{Binding Node.RenameCommand}"
                            Label="{x:Bind ViewModel.RenameText, Mode=OneTime}"
                            Style="{StaticResource MegaAppBarButtonStyle}"
                            ToolTipService.ToolTip="{x:Bind ViewModel.RenameText}"
                            Visibility="{Binding Node, ConverterParameter='rename', Converter={StaticResource NodeViewStateToVisibilityConverter}}">
                            <AppBarButton.Icon>
                                <PathIcon
                                    HorizontalAlignment="Center"
                                    VerticalAlignment="Center"
                                    Data="{x:Bind ViewModel.RenamePathData, Mode=OneTime}" />
                            </AppBarButton.Icon>
                        </AppBarButton>
                        <AppBarButton
                            Command="{Binding Node.RemoveCommand}"
                            Label="{x:Bind ViewModel.RemoveText, Mode=OneTime}"
                            Style="{StaticResource MegaAppBarButtonStyle}"
                            ToolTipService.ToolTip="{x:Bind ViewModel.RemoveText}"
                            Visibility="{Binding Node, ConverterParameter='remove', Converter={StaticResource NodeViewStateToVisibilityConverter}}">
                            <AppBarButton.Icon>
                                <PathIcon
                                    HorizontalAlignment="Center"
                                    VerticalAlignment="Center"
                                    Data="{x:Bind ViewModel.RubbishBinPathData, Mode=OneTime}" />
                            </AppBarButton.Icon>
                        </AppBarButton>
                        <AppBarButton
                            Command="{Binding SharedFolderNode.LeaveShareCommand}"
                            Label="{x:Bind ViewModel.LeaveShareText, Mode=OneTime}"
                            Style="{StaticResource MegaAppBarButtonStyle}"
                            ToolTipService.ToolTip="{x:Bind ViewModel.LeaveShareText, Mode=OneTime}"
                            Visibility="{Binding Node, ConverterParameter='leaveshare', Converter={StaticResource NodeViewStateToVisibilityConverter}}">
                            <AppBarButton.Icon>
                                <PathIcon 
                                    Data="{x:Bind ViewModel.LeaveSharePathData, Mode=OneTime}"
                                    HorizontalAlignment="Center"
                                    VerticalAlignment="Center"/>
                            </AppBarButton.Icon>
                        </AppBarButton>
                    </CommandBar>

                    <CommandBar
                        x:Name="SharePivotTopCommandBar"
                        Background="Transparent"
                        extensions:CommandBarExtensions.HideMoreButton="True"
                        Style="{StaticResource MegaCommandBarStyle}">
                        <AppBarButton
                            Command="{x:Bind ViewModel.AddContactToFolderCommand}"
                            IsEnabled="{x:Bind ViewModel.IsNetworkAvailable, Mode=OneWay}"
                            Label="{x:Bind ViewModel.AddContactToFolderText, Mode=OneTime}"
                            Style="{StaticResource MegaAppBarButtonStyle}"
                            ToolTipService.ToolTip="{x:Bind ViewModel.AddContactToFolderText, Mode=OneTime}"
                            Visibility="{Binding FolderNode.ContactsList.ItemCollection.HasSelectedItems, Converter={StaticResource InverseBoolToVisibilityConverter}}">
                            <Viewbox MaxHeight="16" MaxWidth="16">
                                <FontIcon Glyph="&#xE8FA;" />
                            </Viewbox>
                        </AppBarButton>
                        <AppBarButton
                            Command="{Binding FolderNode.ContactsList.SetFolderPermissionCommand}"
                            IsEnabled="{x:Bind ViewModel.IsNetworkAvailable, Mode=OneWay}"
                            Label="{x:Bind ViewModel.SetFolderPermissionText, Mode=OneTime}"
                            Style="{StaticResource MegaAppBarButtonStyle}"
                            ToolTipService.ToolTip="{x:Bind ViewModel.SetFolderPermissionText, Mode=OneTime}"
                            Visibility="{Binding FolderNode.ContactsList.ItemCollection.HasSelectedItems, Converter={StaticResource BoolToVisibilityConverter}}">
                            <AppBarButton.Icon>
                                <PathIcon
                                    HorizontalAlignment="Center"
                                    VerticalAlignment="Center"
                                    Data="{x:Bind ViewModel.ShareIconPathData, Mode=OneTime}" />
                            </AppBarButton.Icon>
                        </AppBarButton>
                        <AppBarButton
                            Command="{Binding FolderNode.ContactsList.RemoveContactFromFolderCommand}"
                            IsEnabled="{x:Bind ViewModel.IsNetworkAvailable, Mode=OneWay}"
                            Label="{x:Bind ViewModel.RemoveFromFolderText, Mode=OneTime}"
                            Style="{StaticResource MegaAppBarButtonStyle}"
                            ToolTipService.ToolTip="{x:Bind ViewModel.RemoveFromFolderText, Mode=OneTime}"
                            Visibility="{Binding FolderNode.ContactsList.ItemCollection.HasSelectedItems, Converter={StaticResource BoolToVisibilityConverter}}">
                            <Viewbox MaxHeight="16" MaxWidth="16">
                                <FontIcon Glyph="&#xE8F8;" />
                            </Viewbox>
                        </AppBarButton>
                        <AppBarButton
                            Command="{Binding FolderNode.ContactsList.ItemCollection.MultiSelectCommand}"
                            Label="{x:Bind ViewModel.MultiSelectText, Mode=OneTime}"                        
                            Style="{StaticResource MegaAppBarButtonStyle}"
                            ToolTipService.ToolTip="{x:Bind ViewModel.MultiSelectText, Mode=OneTime}"
                            Visibility="{Binding FolderNode.ContactsList.ItemCollection.IsMultiSelectActive, Converter={StaticResource BoolToVisibilityConverter}}">
                            <AppBarButton.Icon>
                                <PathIcon
                                    HorizontalAlignment="Center"
                                    VerticalAlignment="Center"
                                    Data="{x:Bind ViewModel.MultiSelectPathData, Mode=OneTime}" />
                            </AppBarButton.Icon>
                        </AppBarButton>
                    </CommandBar>
                </Grid>
            </Grid>

            <Pivot
                x:Name="PivotControl"
                Grid.Row="1"
                HeaderTemplate="{StaticResource MegaPivoHeaderTemplate}"
                Margin="12,0"
                SelectionChanged="OnPivotSelectionChanged">
                <PivotItem x:Name="DetailsPivot" Header="{x:Bind ViewModel.DetailsText}">
                    <ScrollViewer Margin="-24,0" VerticalScrollBarVisibility="Auto">
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto" />
                                <RowDefinition Height="Auto" />
                                <RowDefinition Height="*" />
                            </Grid.RowDefinitions>
                            <ContentControl
                                x:Name="DetailsPivotHeader"
                                Grid.Row="0"
                                DataContext="{Binding Node}"
                                ContentTemplate="{StaticResource NodeInformationPanelHeader}"/>
                            <StackPanel
                                Grid.Row="1"
                                Margin="24,0"
                                Orientation="Vertical">
                                <TextBlock
                                    FontSize="16"
                                    Opacity="0.4"
                                    Text="{x:Bind ViewModel.SaveForOfflineText, Mode=OneTime}" />
                                <ToggleSwitch
                                    x:Name="SaveForOfflineSwitch"
                                    Margin="0,0,0,24"
                                    IsEnabled="{x:Bind ViewModel.IsNetworkAvailable, Mode=OneWay}"
                                    IsOn="{x:Bind ViewModel.Node.IsSavedForOffline, Mode=TwoWay}"
                                    Toggled="OnSaveForOfflineSwitchToggled"/>
                            </StackPanel>
                            <RelativePanel Grid.Row="2" Margin="24,0,24,12">
                                <TextBlock
                                    x:Name="SizeLabelText"
                                    Opacity="0.4"
                                    Text="{x:Bind ViewModel.SizeLabelText, Mode=OneTime}" />
                                <TextBlock x:Name="SizeText" Text="{x:Bind ViewModel.Node.SizeText, Mode=OneWay}" />
                                <TextBlock
                                    x:Name="ContentsOrTypeLabelText"
                                    Opacity="0.4"
                                    Text="{x:Bind ViewModel.ContentsOrTypeLabelText, Mode=OneWay}" />
                                <TextBlock x:Name="ContentsOrTypeText" Text="{x:Bind ViewModel.ContentsOrTypeText, Mode=OneWay}" />
                                <TextBlock
                                    x:Name="DateCreatedLabelText"
                                    Opacity="0.4"
                                    Text="{x:Bind ViewModel.DateCreatedLabelText, Mode=OneWay}" />
                                <TextBlock x:Name="DateCreated" Text="{x:Bind ViewModel.Node.CreationTime, Mode=OneWay}" />
                                <TextBlock
                                    x:Name="DateModifiedLabelText"
                                    Opacity="0.4"
                                    Text="{x:Bind ViewModel.DateModifiedLabelText, Mode=OneWay}" />
                                <TextBlock x:Name="DateModified" Text="{x:Bind ViewModel.Node.ModificationTime, Mode=OneWay}" />
                                <TextBlock
                                    x:Name="SharedToLabelText"
                                    Opacity="0.4"
                                    Text="{x:Bind ViewModel.SharedToLabelText, Mode=OneTime}"
                                    Visibility="{Binding IsOutShare, Converter={StaticResource BoolToVisibilityConverter}}"/>
                                <TextBlock
                                    x:Name="Contacts"
                                    Text="{x:Bind ViewModel.SharedFolderNode.ContactsText, Mode=OneWay}"
                                    Visibility="{Binding IsOutShare, Converter={StaticResource BoolToVisibilityConverter}}"/>
                                <TextBlock
                                    x:Name="FolderLocationLabelText"
                                    Opacity="0.4"
                                    Text="{x:Bind ViewModel.FolderLocationLabelText, Mode=OneTime}"
                                    Visibility="{Binding IsOutShare, Converter={StaticResource BoolToVisibilityConverter}}"/>
                                <TextBlock
                                    x:Name="FolderLocation"
                                    Text="{x:Bind ViewModel.SharedFolderNode.FolderLocation, Mode=OneWay}"
                                    TextTrimming="CharacterEllipsis"
                                    TextWrapping="NoWrap"
                                    Visibility="{Binding IsOutShare, Converter={StaticResource BoolToVisibilityConverter}}"/>
                                <TextBlock
                                    x:Name="OwnerLabelText"
                                    Opacity="0.4"
                                    Text="{x:Bind ViewModel.OwnerLabelText, Mode=OneTime}"
                                    Visibility="{Binding IsInShare, Converter={StaticResource BoolToVisibilityConverter}}"/>
                                <TextBlock
                                    x:Name="Owner"
                                    Text="{x:Bind ViewModel.SharedFolderNode.Owner, Mode=OneWay}"
                                    TextTrimming="CharacterEllipsis"
                                    TextWrapping="NoWrap"
                                    Visibility="{Binding IsInShare, Converter={StaticResource BoolToVisibilityConverter}}"/>
                                <TextBlock
                                    x:Name="PermissionsLabelText"
                                    Opacity="0.4"
                                    Text="{x:Bind ViewModel.PermissionsLabelText, Mode=OneTime}"
                                    Visibility="{Binding IsInShare, Converter={StaticResource BoolToVisibilityConverter}}"/>
                                <Grid 
                                    x:Name="Permissions"
                                    Visibility="{Binding IsInShare, Converter={StaticResource BoolToVisibilityConverter}}">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="Auto"/>
                                        <ColumnDefinition Width="*"/>
                                    </Grid.ColumnDefinitions>
                                    <Path
                                        Grid.Column="0"
                                        Height="12" Width="12"
                                        Margin="4,0,12,0"
                                        Data="{x:Bind ViewModel.Node.AccessLevel.AccessLevelPathData, Mode=OneWay}"
                                        HorizontalAlignment="Center"
                                        VerticalAlignment="Center"
                                        Stretch="Uniform" >
                                        <Path.Fill>
                                            <SolidColorBrush Color="{ThemeResource MegaAppForeground}" />
                                        </Path.Fill>
                                    </Path>
                                    <TextBlock 
                                        Grid.Column="1" 
                                        Text="{x:Bind ViewModel.Node.AccessLevel.AccessLevelText, Mode=OneWay}" />
                                </Grid>
                            </RelativePanel>
                        </Grid>
                    </ScrollViewer>
                </PivotItem>
                <PivotItem 
                    x:Name="LinkPivot" 
                    Header="{x:Bind ViewModel.LinkText}">
                    <ScrollViewer Margin="-24,0" VerticalScrollBarVisibility="Auto">
                        <Grid Margin="0,0,0,48">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto" />
                                <RowDefinition Height="Auto" />
                                <RowDefinition Height="*" />
                                <RowDefinition Height="Auto" />
                            </Grid.RowDefinitions>
                            <ContentControl
                                Grid.Row="0"
                                DataContext="{Binding Node}"
                                ContentTemplate="{StaticResource NoPreviewHeader}"/>
                            <StackPanel
                                Grid.Row="1"
                                Margin="24,0"
                                Orientation="Vertical">
                                <TextBlock
                                    FontSize="16"
                                    Opacity="0.4"
                                    Text="{x:Bind ViewModel.EnableLinkText, Mode=OneTime}" />
                                <ToggleSwitch
                                    x:Name="EnableLinkSwitch"
                                    Margin="0,12,0,0"
                                    IsEnabled="{x:Bind ViewModel.IsNetworkAvailable, Mode=OneWay}"
                                    IsOn="{x:Bind ViewModel.Node.IsExported, Mode=TwoWay}"
                                    Toggled="OnEnableLinkSwitchToggled"/>
                            </StackPanel>
                            <StackPanel
                                Grid.Row="2"
                                Margin="24,12,24,0"
                                Orientation="Vertical"
                                Visibility="{Binding Node.IsExported, Converter={StaticResource BoolToVisibilityConverter}}">
                                <RadioButton
                                    x:Name="LinkWithoutKeyRadioButton"
                                    Command="{x:Bind ViewModel.LinkWithoutKeyCommand}"
                                    Content="{x:Bind ViewModel.LinkWithoutKeyLabelText, Mode=OneTime}"
                                    VerticalAlignment="Center"/>
                                <RadioButton
                                    x:Name="DecryptionKeyRadioButton"
                                    Command="{x:Bind ViewModel.DecryptionKeyCommand}"
                                    Content="{x:Bind ViewModel.DecryptionKeyLabelText, Mode=OneTime}"
                                    VerticalAlignment="Center"/>
                                <RadioButton
                                    x:Name="LinkWithKeyRadioButton"
                                    Command="{x:Bind ViewModel.LinkWithKeyCommand}"
                                    Content="{x:Bind ViewModel.LinkWithKeyLabelText, Mode=OneTime}"
                                    IsChecked="True"
                                    VerticalAlignment="Center"/>
                                <TextBlock
                                    Margin="0,20,0,0"
                                    FontSize="16"
                                    Opacity="0.4"
                                    Text="{x:Bind ViewModel.SetLinkExpirationDateText, Mode=OneTime}" />
                                <StackPanel Margin="0,18" Orientation="Horizontal">
                                    <ToggleSwitch
                                        x:Name="EnableLinkExpirationDateSwitch"
                                        IsEnabled="{x:Bind ViewModel.AccountDetails.IsProAccount}"
                                        IsOn="{Binding IsLinkWithExpirationTime, Mode=OneWay}"
                                        Toggled="OnSetExpirationDateSwitchToggled"/>
                                    <CalendarDatePicker
                                        x:Name="ExpirationDateCalendarDatePicker"
                                        DateChanged="OnExpirationDateCalendarDataPickerDateChanged"
                                        DateFormat="{}{day.integer(2)}‎/‎{month.integer(2)}‎/‎{year.full}"
                                        IsEnabled="False"
                                        Opened="OnExpirationDateCalendarDataPickerOpened"/>
                                </StackPanel>
                            </StackPanel>
                            <Grid
                                Grid.Row="3"
                                Margin="24,20,24,0"
                                Visibility="{Binding Node.ExportLink, Converter={StaticResource StringVisibilityConverter}}">
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto" />
                                    <RowDefinition Height="Auto" />
                                </Grid.RowDefinitions>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="*" />
                                    <ColumnDefinition Width="*" />
                                </Grid.ColumnDefinitions>
                                <Border
                                    Grid.Row="0"
                                    Grid.Column="0"
                                    Grid.ColumnSpan="2"
                                    Margin="0,0,0,12"
                                    Background="{ThemeResource MegaAppBackgroundBrush}"
                                    BorderThickness="1">
                                    <Border.BorderBrush>
                                        <SolidColorBrush Opacity="0.4" Color="{ThemeResource MegaAppForeground}" />
                                    </Border.BorderBrush>
                                    <StackPanel Margin="12">
                                        <TextBlock 
                                            Foreground="{ThemeResource MegaRedColorBrush}" 
                                            Text="{x:Bind ViewModel.ExportLinkBorderTitle, Mode=OneWay}" />
                                        <TextBlock 
                                            Text="{x:Bind ViewModel.Node.ExportLink, Mode=OneWay}" 
                                            TextWrapping="Wrap" />
                                    </StackPanel>
                                </Border>
                                <Button
                                    x:Name="CopyLinkButton"
                                    Grid.Row="1"
                                    Grid.Column="0"
                                    Margin="0,0,6,0"
                                    Command="{x:Bind ViewModel.CopyLinkCommand}"
                                    HorizontalAlignment="Stretch"
                                    HorizontalContentAlignment="Center">
                                    <TextBlock Text="{x:Bind ViewModel.CopyText, Mode=OneTime}" />
                                </Button>
                                <Button
                                    x:Name="ShareLinkButton"
                                    Grid.Row="1"
                                    Grid.Column="1"
                                    Margin="6,0,0,0"
                                    Command="{x:Bind ViewModel.ShareLinkCommand}"
                                    HorizontalAlignment="Stretch"
                                    HorizontalContentAlignment="Center">
                                    <TextBlock Text="{x:Bind ViewModel.ShareText, Mode=OneTime}" />
                                </Button>
                            </Grid>
                        </Grid>
                    </ScrollViewer>
                </PivotItem>
                <PivotItem
                    x:Name="SharePivot" 
                    Header="{x:Bind ViewModel.ShareText}">
                    <ScrollViewer Margin="-24,0" VerticalScrollBarVisibility="Auto">
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto" />
                                <RowDefinition Height="Auto" />
                                <RowDefinition Height="*" />
                            </Grid.RowDefinitions>
                            <ContentControl
                                Grid.Row="0"
                                DataContext="{Binding Node}"
                                ContentTemplate="{StaticResource NoPreviewHeader}"/>
                            <StackPanel
                                Grid.Row="1"
                                Margin="24,0"
                                Orientation="Vertical">
                                <TextBlock
                                    FontSize="16"
                                    Opacity="0.4"
                                    Text="{x:Bind ViewModel.EnableSharedFolderText, Mode=OneTime}" />
                                <ToggleSwitch
                                    x:Name="EnableSharedFolderSwitch"
                                    Margin="0,12,0,0"
                                    IsEnabled="{x:Bind ViewModel.IsNetworkAvailable, Mode=OneWay}"
                                    IsOn="{x:Bind ViewModel.FolderNode.IsOutShare, Mode=OneWay}"
                                    Toggled="OnEnableSharedFolderSwitchToggled"/>
                            </StackPanel>
                            <StackPanel
                                Grid.Row="2"
                                Margin="24,32,24,0"
                                Orientation="Vertical"
                                Visibility="{Binding FolderNode.IsOutShare, Converter={StaticResource BoolToVisibilityConverter}}">
                                <TextBlock
                                    FontSize="16"
                                    Opacity="0.4"
                                    Text="{x:Bind ViewModel.SharedToText, Mode=OneTime}" />
                                <ListView
                                    x:Name="ListViewContacts"
                                    Margin="-12,20,-12,0"
                                    DataContext="{Binding FolderNode.ContactsList}"
                                    Background="Transparent"
                                    IsMultiSelectCheckBoxEnabled="{Binding ItemCollection.IsMultiSelectActive}"
                                    ItemContainerStyle="{StaticResource StretchedListviewItemStyle}"
                                    ItemTemplate="{StaticResource OutgoingSharedFolderContactItem}"
                                    ItemsSource="{Binding ItemCollection.Items}"
                                    RightTapped="OnRightItemTapped">
                                    <interactivity:Interaction.Behaviors>
                                        <behaviors:MultiSelect SelectedItems="{Binding ItemCollection.SelectedItems, Mode=TwoWay}" />
                                        <core:EventTriggerBehavior EventName="SelectionChanged">
                                            <core:EventTriggerBehavior.Actions>
                                                <core:InvokeCommandAction Command="{Binding ItemCollection.SelectionChangedCommand}" />
                                            </core:EventTriggerBehavior.Actions>
                                        </core:EventTriggerBehavior>
                                    </interactivity:Interaction.Behaviors>
                                </ListView>
                            </StackPanel>
                        </Grid>
                    </ScrollViewer>
                </PivotItem>
            </Pivot>

            <Grid x:Name="BottomCommandBar" Grid.Row="2">
                <CommandBar
                    x:Name="MainBottomCommandBar"
                    IsEnabled="{x:Bind ViewModel.IsNetworkAvailable, Mode=OneWay}"
                    Style="{StaticResource MegaCommandBarStyle}">
                    <AppBarButton
                        Command="{Binding Node.PreviewCommand}"
                        Label="{x:Bind ViewModel.PreviewText, Mode=OneTime}"
                        Style="{StaticResource MegaAppBarButtonStyle}"
                        ToolTipService.ToolTip="{x:Bind ViewModel.PreviewText, Mode=OneTime}"
                        Visibility="{Binding Node, ConverterParameter='preview', Converter={StaticResource NodeViewStateToVisibilityConverter}}">
                        <AppBarButton.Icon>
                            <PathIcon
                                HorizontalAlignment="Center"
                                VerticalAlignment="Center"
                                Data="{x:Bind ViewModel.PreviewImagePathData, Mode=OneTime}" />
                        </AppBarButton.Icon>
                    </AppBarButton>
                    <AppBarButton
                        Command="{Binding Node.DownloadCommand}"
                        Label="{x:Bind ViewModel.DownloadText, Mode=OneTime}"
                        Style="{StaticResource MegaAppBarButtonStyle}"
                        ToolTipService.ToolTip="{x:Bind ViewModel.DownloadText, Mode=OneTime}"
                        Visibility="{Binding Node, ConverterParameter='download', Converter={StaticResource NodeViewStateToVisibilityConverter}}">
                        <AppBarButton.Icon>
                            <PathIcon 
                                Data="{x:Bind ViewModel.DownloadPathData, Mode=OneTime}"
                                HorizontalAlignment="Center"
                                VerticalAlignment="Center"/>
                        </AppBarButton.Icon>
                    </AppBarButton>
                    <AppBarButton
                        Command="{Binding Node.ImportCommand}"
                        Label="{x:Bind ViewModel.ImportText, Mode=OneTime}"
                        Style="{StaticResource MegaAppBarButtonStyle}"
                        ToolTipService.ToolTip="{x:Bind ViewModel.ImportText, Mode=OneTime}"
                        Visibility="{Binding Node, ConverterParameter='import', Converter={StaticResource NodeViewStateToVisibilityConverter}}">
                        <AppBarButton.Icon>
                            <PathIcon 
                                Data="{x:Bind ViewModel.ImportPathData, Mode=OneTime}"
                                HorizontalAlignment="Center"
                                VerticalAlignment="Center"/>
                        </AppBarButton.Icon>
                    </AppBarButton>
                    <AppBarButton
                        Command="{Binding Node.CopyOrMoveCommand}"
                        Label="{x:Bind ViewModel.CopyOrMoveText, Mode=OneTime}"
                        Style="{StaticResource MegaAppBarButtonStyle}"
                        ToolTipService.ToolTip="{x:Bind ViewModel.CopyOrMoveText}"
                        Visibility="{Binding Node, ConverterParameter='copyormove', Converter={StaticResource NodeViewStateToVisibilityConverter}}">
                        <AppBarButton.Icon>
                            <PathIcon
                                HorizontalAlignment="Center"
                                VerticalAlignment="Center"
                                Data="{x:Bind ViewModel.CopyOrMovePathData, Mode=OneTime}" />
                        </AppBarButton.Icon>
                    </AppBarButton>
                    <AppBarButton
                        Command="{Binding Node.RemoveCommand}"
                        Label="{x:Bind ViewModel.RemoveText, Mode=OneTime}"
                        Style="{StaticResource MegaAppBarButtonStyle}"
                        ToolTipService.ToolTip="{x:Bind ViewModel.RemoveText}"
                        Visibility="{Binding Node, ConverterParameter='remove', Converter={StaticResource NodeViewStateToVisibilityConverter}}">
                        <AppBarButton.Icon>
                            <PathIcon
                                HorizontalAlignment="Center"
                                VerticalAlignment="Center"
                                Data="{x:Bind ViewModel.RubbishBinPathData, Mode=OneTime}" />
                        </AppBarButton.Icon>
                    </AppBarButton>
                    <AppBarButton
                        Command="{Binding SharedFolderNode.LeaveShareCommand}"
                        Label="{x:Bind ViewModel.LeaveShareText, Mode=OneTime}"
                        Style="{StaticResource MegaAppBarButtonStyle}"
                        ToolTipService.ToolTip="{x:Bind ViewModel.LeaveShareText, Mode=OneTime}"
                        Visibility="{Binding Node, ConverterParameter='leaveshare', Converter={StaticResource NodeViewStateToVisibilityConverter}}">
                        <AppBarButton.Icon>
                            <PathIcon 
                                Data="{x:Bind ViewModel.LeaveSharePathData, Mode=OneTime}"
                                HorizontalAlignment="Center"
                                VerticalAlignment="Center"/>
                        </AppBarButton.Icon>
                    </AppBarButton>
                    <CommandBar.SecondaryCommands>
                        <AppBarButton
                            Command="{Binding Node.RenameCommand}"
                            Label="{x:Bind ViewModel.RenameText, Mode=OneTime}"
                            ToolTipService.ToolTip="{x:Bind ViewModel.RenameText}"
                            Visibility="{Binding Node, ConverterParameter='rename', Converter={StaticResource NodeViewStateToVisibilityConverter}}">
                            <AppBarButton.Icon>
                                <PathIcon
                                    HorizontalAlignment="Center"
                                    VerticalAlignment="Center"
                                    Data="{x:Bind ViewModel.RenamePathData, Mode=OneTime}" />
                            </AppBarButton.Icon>
                        </AppBarButton>
                    </CommandBar.SecondaryCommands>
                </CommandBar>

                <CommandBar
                    x:Name="SharePivotBottomCommandBar"
                    Style="{StaticResource MegaCommandBarStyle}">
                    <AppBarButton
                        Command="{x:Bind ViewModel.AddContactToFolderCommand}"
                        IsEnabled="{x:Bind ViewModel.IsNetworkAvailable, Mode=OneWay}"
                        Label="{x:Bind ViewModel.AddContactToFolderText, Mode=OneTime}"
                        Style="{StaticResource MegaAppBarButtonStyle}"
                        ToolTipService.ToolTip="{x:Bind ViewModel.AddContactToFolderText, Mode=OneTime}"
                        Visibility="{Binding FolderNode.ContactsList.ItemCollection.HasSelectedItems, Converter={StaticResource InverseBoolToVisibilityConverter}}">
                        <Viewbox MaxHeight="16" MaxWidth="16">
                            <FontIcon Glyph="&#xE8FA;" />
                        </Viewbox>
                    </AppBarButton>
                    <AppBarButton
                        Command="{Binding FolderNode.ContactsList.SetFolderPermissionCommand}"
                        IsEnabled="{x:Bind ViewModel.IsNetworkAvailable, Mode=OneWay}"
                        Label="{x:Bind ViewModel.SetFolderPermissionText, Mode=OneTime}"
                        Style="{StaticResource MegaAppBarButtonStyle}"
                        ToolTipService.ToolTip="{x:Bind ViewModel.SetFolderPermissionText, Mode=OneTime}"
                        Visibility="{Binding FolderNode.ContactsList.ItemCollection.HasSelectedItems, Converter={StaticResource BoolToVisibilityConverter}}">
                        <AppBarButton.Icon>
                            <PathIcon
                                HorizontalAlignment="Center"
                                VerticalAlignment="Center"
                                Data="{x:Bind ViewModel.ShareIconPathData, Mode=OneTime}" />
                        </AppBarButton.Icon>
                    </AppBarButton>
                    <AppBarButton
                        Command="{Binding FolderNode.ContactsList.RemoveContactFromFolderCommand}"
                        IsEnabled="{x:Bind ViewModel.IsNetworkAvailable, Mode=OneWay}"
                        Label="{x:Bind ViewModel.RemoveFromFolderText, Mode=OneTime}"
                        Style="{StaticResource MegaAppBarButtonStyle}"
                        ToolTipService.ToolTip="{x:Bind ViewModel.RemoveFromFolderText, Mode=OneTime}"
                        Visibility="{Binding FolderNode.ContactsList.ItemCollection.HasSelectedItems, Converter={StaticResource BoolToVisibilityConverter}}">
                        <Viewbox MaxHeight="16" MaxWidth="16">
                            <FontIcon Glyph="&#xE8F8;" />
                        </Viewbox>
                    </AppBarButton>
                    <AppBarButton
                        Command="{Binding FolderNode.ContactsList.ItemCollection.MultiSelectCommand}"
                        Label="{x:Bind ViewModel.MultiSelectText, Mode=OneTime}"                        
                        Style="{StaticResource MegaAppBarButtonStyle}"
                        ToolTipService.ToolTip="{x:Bind ViewModel.MultiSelectText, Mode=OneTime}">
                        <AppBarButton.Icon>
                            <PathIcon
                                HorizontalAlignment="Center"
                                VerticalAlignment="Center"
                                Data="{x:Bind ViewModel.MultiSelectPathData, Mode=OneTime}" />
                        </AppBarButton.Icon>
                    </AppBarButton>
                </CommandBar>
            </Grid>
        </Grid>
        <VisualStateManager.VisualStateGroups>
            <VisualStateGroup>
                <VisualState x:Name="Desktop">
                    <VisualState.StateTriggers>
                        <triggers:DeviceFamilyStateTrigger DeviceFamily="Desktop" />
                    </VisualState.StateTriggers>
                    <VisualState.Setters>
                        <Setter Target="TopCommandBar.Visibility" Value="Visible" />
                        <Setter Target="BottomCommandBar.Visibility" Value="Collapsed" />
                        <Setter Target="ListViewContacts.SelectionMode" Value="Extended" />
                        <Setter Target="DetailsPivotHeader.ContentTemplate" Value="{StaticResource NodeInformationPanelHeader}" />
                    </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Mobile">
                    <VisualState.StateTriggers>
                        <triggers:DeviceFamilyStateTrigger DeviceFamily="Mobile" />
                    </VisualState.StateTriggers>
                    <VisualState.Setters>
                        <Setter Target="PivotControl.Background" Value="{ThemeResource MegaAppBackgroundBrush}" />
                        <Setter Target="TopCommandBar.Visibility" Value="Collapsed" />
                        <Setter Target="BottomCommandBar.Visibility" Value="Visible" />
                        <Setter Target="ListViewContacts.SelectionMode" Value="Single" />
                        <Setter Target="DetailsPivotHeader.ContentTemplate" Value="{StaticResource NoPreviewHeader}" />
                    </VisualState.Setters>
                </VisualState>
            </VisualStateGroup>

            <VisualStateGroup>
                <VisualState x:Name="Small">
                    <VisualState.StateTriggers>
                        <AdaptiveTrigger MinWindowWidth="0" />
                    </VisualState.StateTriggers>
                    <VisualState.Setters>
                        <Setter Target="SectionNameText.Margin" Value="64,14,0,0" />
                        <Setter Target="PivotControl.Margin" Value="0,0" />                        
                        <Setter Target="ContentsOrTypeLabelText.(RelativePanel.Below)" Value="SizeLabelText" />
                        <Setter Target="DateCreatedLabelText.(RelativePanel.Below)" Value="ContentsOrTypeLabelText" />
                        <Setter Target="DateModifiedLabelText.(RelativePanel.Below)" Value="DateCreatedLabelText" />
                        <Setter Target="SharedToLabelText.(RelativePanel.Below)" Value="DateModifiedLabelText" />
                        <Setter Target="FolderLocationLabelText.(RelativePanel.Below)" Value="SharedToLabelText" />
                        <Setter Target="OwnerLabelText.(RelativePanel.Below)" Value="DateModifiedLabelText" />
                        <Setter Target="PermissionsLabelText.(RelativePanel.Below)" Value="OwnerLabelText" />
                        <Setter Target="SizeText.(RelativePanel.AlignRightWithPanel)" Value="True" />
                        <Setter Target="ContentsOrTypeText.(RelativePanel.Below)" Value="SizeText" />
                        <Setter Target="ContentsOrTypeText.(RelativePanel.AlignRightWithPanel)" Value="True" />
                        <Setter Target="DateCreated.(RelativePanel.Below)" Value="ContentsOrTypeText" />
                        <Setter Target="DateCreated.(RelativePanel.AlignRightWithPanel)" Value="True" />
                        <Setter Target="DateModified.(RelativePanel.Below)" Value="DateCreated" />
                        <Setter Target="DateModified.(RelativePanel.AlignRightWithPanel)" Value="True" />
                        <Setter Target="Contacts.(RelativePanel.Below)" Value="DateModified" />
                        <Setter Target="Contacts.(RelativePanel.AlignRightWithPanel)" Value="True" />
                        <Setter Target="FolderLocation.(RelativePanel.Below)" Value="Contacts" />
                        <Setter Target="FolderLocation.(RelativePanel.AlignRightWithPanel)" Value="True" />
                        <Setter Target="Owner.(RelativePanel.Below)" Value="FolderLocation" />
                        <Setter Target="Owner.(RelativePanel.AlignRightWithPanel)" Value="True" />
                        <Setter Target="Permissions.(RelativePanel.Below)" Value="Owner" />
                        <Setter Target="Permissions.(RelativePanel.AlignRightWithPanel)" Value="True" />
                    </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Medium">
                    <VisualState.StateTriggers>
                        <AdaptiveTrigger MinWindowWidth="360" />
                    </VisualState.StateTriggers>
                    <VisualState.Setters>
                        <Setter Target="SectionNameText.Margin" Value="64,14,0,0" />
                        <Setter Target="PivotControl.Margin" Value="0,0" />
                        <Setter Target="SizeText.(RelativePanel.Below)" Value="SizeLabelText" />
                        <Setter Target="ContentsOrTypeLabelText.(RelativePanel.AlignHorizontalCenterWithPanel)" Value="True" />
                        <Setter Target="ContentsOrTypeText.(RelativePanel.Below)" Value="ContentsOrTypeLabelText" />
                        <Setter Target="ContentsOrTypeText.(RelativePanel.AlignLeftWith)" Value="ContentsOrTypeLabelText" />
                        <Setter Target="DateCreatedLabelText.(RelativePanel.Below)" Value="SizeText" />
                        <Setter Target="DateCreatedLabelText.Margin" Value="0,36,0,0" />
                        <Setter Target="DateCreated.(RelativePanel.Below)" Value="DateCreatedLabelText" />
                        <Setter Target="DateModifiedLabelText.(RelativePanel.AlignBottomWith)" Value="DateCreatedLabelText" />
                        <Setter Target="DateModifiedLabelText.(RelativePanel.AlignLeftWith)" Value="ContentsOrTypeLabelText" />
                        <Setter Target="DateModified.(RelativePanel.Below)" Value="DateModifiedLabelText" />
                        <Setter Target="DateModified.(RelativePanel.AlignLeftWith)" Value="ContentsOrTypeLabelText" />
                        <Setter Target="SharedToLabelText.(RelativePanel.Below)" Value="DateModified" />
                        <Setter Target="SharedToLabelText.Margin" Value="0,36,0,0" />
                        <Setter Target="Contacts.(RelativePanel.Below)" Value="SharedToLabelText" />
                        <Setter Target="FolderLocationLabelText.(RelativePanel.AlignBottomWith)" Value="SharedToLabelText" />
                        <Setter Target="FolderLocationLabelText.(RelativePanel.AlignLeftWith)" Value="ContentsOrTypeLabelText" />
                        <Setter Target="FolderLocation.(RelativePanel.Below)" Value="FolderLocationLabelText" />
                        <Setter Target="FolderLocation.(RelativePanel.AlignLeftWith)" Value="ContentsOrTypeLabelText" />
                        <Setter Target="OwnerLabelText.(RelativePanel.Below)" Value="DateModified" />
                        <Setter Target="OwnerLabelText.Margin" Value="0,36,0,0" />
                        <Setter Target="Owner.(RelativePanel.Below)" Value="OwnerLabelText" />
                        <Setter Target="Owner.(RelativePanel.AlignLeftWithPanel)" Value="True" />
                        <Setter Target="Owner.(RelativePanel.LeftOf)" Value="Permissions" />
                        <Setter Target="PermissionsLabelText.(RelativePanel.AlignBottomWith)" Value="OwnerLabelText" />
                        <Setter Target="PermissionsLabelText.(RelativePanel.AlignLeftWith)" Value="ContentsOrTypeLabelText" />
                        <Setter Target="Permissions.(RelativePanel.Below)" Value="PermissionsLabelText" />
                        <Setter Target="Permissions.(RelativePanel.AlignLeftWith)" Value="ContentsOrTypeLabelText" />
                    </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Wide">
                    <VisualState.StateTriggers>
                        <AdaptiveTrigger MinWindowWidth="600" />
                    </VisualState.StateTriggers>
                    <VisualState.Setters>
                        <Setter Target="SectionNameText.Margin" Value="24,14,0,0" />
                        <Setter Target="PivotControl.Margin" Value="12,0" />
                        <Setter Target="SizeText.(RelativePanel.Below)" Value="SizeLabelText" />
                        <Setter Target="ContentsOrTypeLabelText.(RelativePanel.AlignHorizontalCenterWithPanel)" Value="True" />
                        <Setter Target="ContentsOrTypeText.(RelativePanel.Below)" Value="ContentsOrTypeLabelText" />
                        <Setter Target="ContentsOrTypeText.(RelativePanel.AlignLeftWith)" Value="ContentsOrTypeLabelText" />
                        <Setter Target="DateCreatedLabelText.(RelativePanel.Below)" Value="SizeText" />
                        <Setter Target="DateCreatedLabelText.Margin" Value="0,36,0,0" />
                        <Setter Target="DateCreated.(RelativePanel.Below)" Value="DateCreatedLabelText" />
                        <Setter Target="DateModifiedLabelText.(RelativePanel.AlignBottomWith)" Value="DateCreatedLabelText" />
                        <Setter Target="DateModifiedLabelText.(RelativePanel.AlignLeftWith)" Value="ContentsOrTypeLabelText" />
                        <Setter Target="DateModified.(RelativePanel.Below)" Value="DateModifiedLabelText" />
                        <Setter Target="DateModified.(RelativePanel.AlignLeftWith)" Value="ContentsOrTypeLabelText" />
                        <Setter Target="SharedToLabelText.(RelativePanel.Below)" Value="DateModified" />
                        <Setter Target="SharedToLabelText.Margin" Value="0,36,0,0" />
                        <Setter Target="Contacts.(RelativePanel.Below)" Value="SharedToLabelText" />
                        <Setter Target="FolderLocationLabelText.(RelativePanel.AlignBottomWith)" Value="SharedToLabelText" />
                        <Setter Target="FolderLocationLabelText.(RelativePanel.AlignLeftWith)" Value="ContentsOrTypeLabelText" />
                        <Setter Target="FolderLocation.(RelativePanel.Below)" Value="FolderLocationLabelText" />
                        <Setter Target="FolderLocation.(RelativePanel.AlignLeftWith)" Value="ContentsOrTypeLabelText" />
                        <Setter Target="OwnerLabelText.(RelativePanel.Below)" Value="DateModified" />
                        <Setter Target="OwnerLabelText.Margin" Value="0,36,0,0" />
                        <Setter Target="Owner.(RelativePanel.Below)" Value="OwnerLabelText" />
                        <Setter Target="Owner.(RelativePanel.AlignLeftWithPanel)" Value="True" />
                        <Setter Target="Owner.(RelativePanel.LeftOf)" Value="Permissions" />
                        <Setter Target="PermissionsLabelText.(RelativePanel.AlignBottomWith)" Value="OwnerLabelText" />
                        <Setter Target="PermissionsLabelText.(RelativePanel.AlignLeftWith)" Value="ContentsOrTypeLabelText" />
                        <Setter Target="Permissions.(RelativePanel.Below)" Value="PermissionsLabelText" />
                        <Setter Target="Permissions.(RelativePanel.AlignLeftWith)" Value="ContentsOrTypeLabelText" />
                    </VisualState.Setters>
                </VisualState>
            </VisualStateGroup>
        </VisualStateManager.VisualStateGroups>
    </SplitView>
</userControls:BaseNodeInformationPanel>
