<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" 
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:converters="using:MegaApp.Converters"
    xmlns:selectors="using:MegaApp.Classes"
    xmlns:interactivity="using:Microsoft.Xaml.Interactivity"
    xmlns:core="using:Microsoft.Xaml.Interactions.Core"
    xmlns:behaviors="using:MegaApp.Behaviors"
    xmlns:extensions="using:MegaApp.Extensions"
    xmlns:userControls="using:MegaApp.UserControls"
    xmlns:toolkit="using:Microsoft.Toolkit.Uwp.UI.Converters"
    xmlns:triggers="using:WindowsStateTriggers">

    <!-- Resource dictionary entries should be defined here. -->

    <!-- APP THEME OVERRIDES -->

    <!--Measurements-->
    <GridLength x:Key="MegaPageHeaderLogoRowHeight">44</GridLength>
    <x:Double x:Key="InputHeight">40</x:Double>
    <GridLength x:Key="PageHeaderRowHeight">48</GridLength>

    <!--Margins-->
    <Thickness x:Key="StackedInputMargin">0,0,0,8</Thickness>
    <Thickness x:Key="MegaPageHeaderLogoMargin">10,0,0,0</Thickness>

    <!--Vector Data-->
    <x:String x:Key="MegaIconVector">F1 M 18.092,16.246 C 18.092,16.450 17.927,16.615 17.725,16.615 L 16.168,16.615 C 15.966,16.615 15.802,16.450 15.802,16.246 L 15.802,11.419 C 15.802,11.378 15.752,11.357 15.723,11.387 L 12.427,14.709 C 12.140,14.997 11.676,14.997 11.390,14.709 L 8.094,11.387 C 8.065,11.357 8.015,11.378 8.015,11.419 L 8.015,16.246 C 8.015,16.450 7.851,16.615 7.649,16.615 L 6.092,16.615 C 5.889,16.615 5.725,16.450 5.725,16.246 L 5.725,7.754 C 5.725,7.550 5.889,7.385 6.092,7.385 L 7.162,7.385 C 7.356,7.385 7.543,7.462 7.680,7.601 L 11.779,11.731 C 11.850,11.803 11.966,11.803 12.038,11.731 L 16.136,7.601 C 16.274,7.462 16.460,7.385 16.655,7.385 L 17.725,7.385 C 17.927,7.385 18.092,7.550 18.092,7.754 L 18.092,16.246 Z M 12.000,0.000 C 5.373,0.000 0.000,5.373 0.000,12.000 C 0.000,18.627 5.373,24.000 12.000,24.000 C 18.627,24.000 24.000,18.627 24.000,12.000 C 24.000,5.373 18.627,0.000 12.000,0.000 Z</x:String>

    <!-- CONVERTERS -->
    <converters:FolderContentViewStateToVisibilityConverter x:Key="FolderContentViewStateToVisibilityConverter"/>
    <converters:NodeDisplayModeToColorBrushConverter x:Key="NodeDisplayModeToColorBrushConverter"/>
    <converters:TextToLowerCaseConverter x:Key="TextToLowerCaseConverter"/>
    <converters:TransferStateToReadableTextConverter x:Key="TransferStateToReadableTextConverter"/>
    <converters:TransferStateToVisibilityConverter x:Key="TransferStateToVisibilityConverter"/>
    <converters:TransferTypeToSymbolConverter x:Key="TransferTypeToSymbolConverter"/>
    <converters:ViewStateToVisibilityConverter x:Key="ViewStateToVisibilityConverter"/>
    <toolkit:BoolToVisibilityConverter x:Key="BoolToVisibilityConverter"/>
    <toolkit:BoolToObjectConverter x:Key="InverseBoolToVisibilityConverter" TrueValue="Collapsed" FalseValue="Visible"/>
    <toolkit:StringVisibilityConverter x:Key="StringVisibilityConverter"/>
    <toolkit:EmptyStringToObjectConverter x:Key="InverseStringVisibilityConverter" EmptyValue="Visible" NotEmptyValue="Collapsed"/>

    <!--SELECTORS -->
    <selectors:NodeTemplateSelector 
        x:Key="NodeTemplateSelector" 
        FileItemTemplate="{StaticResource MegaNodeListViewFileItemContent}" 
        FolderItemTemplate="{StaticResource MegaNodeListViewFolderItemContent}"/>

    <!-- TEMPLATES -->
    <ControlTemplate x:Name="EmptyStateTemplate">
        <userControls:EmptyState
            x:Name="EmptyState"
            Background="{StaticResource MegaAppBackgroundBrush}"
            Foreground="{StaticResource MegaAppForegroundBrush}"
            VerticalContentAlignment="Center"
            HeaderText="{Binding EmptyStateHeaderText}"
            SubHeaderText="{Binding EmptyStateSubHeaderText}"
            SubHeaderMargin="0,14,0,0"
            IsVisible="{Binding IsEmpty}">
            <userControls:EmptyState.SubHeaderForeground>
                <SolidColorBrush 
                    Color="{ThemeResource MegaAppForeground}" 
                    Opacity="0.6"/>
            </userControls:EmptyState.SubHeaderForeground>
            <VisualStateManager.VisualStateGroups>
                <VisualStateGroup>
                    <VisualState x:Name="Small">
                        <VisualState.StateTriggers>
                            <AdaptiveTrigger MinWindowWidth="0" />
                        </VisualState.StateTriggers>
                        <VisualState.Setters>
                            <Setter Target="EmptyState.Padding" Value="16,0,0,16" />
                            <Setter Target="EmptyState.HeaderFontSize" Value="24" />
                            <Setter Target="EmptyState.SubHeaderFontSize" Value="16" />
                        </VisualState.Setters>
                    </VisualState>
                    <VisualState x:Name="Normal">
                        <VisualState.StateTriggers>
                            <AdaptiveTrigger MinWindowWidth="600" />
                        </VisualState.StateTriggers>
                        <VisualState.Setters>
                            <Setter Target="EmptyState.Padding" Value="97,0,0,16" />
                            <Setter Target="EmptyState.HeaderFontSize" Value="24" />
                            <Setter Target="EmptyState.SubHeaderFontSize" Value="16" />
                        </VisualState.Setters>
                    </VisualState>
                    <VisualState x:Name="Wide">
                        <VisualState.StateTriggers>
                            <AdaptiveTrigger MinWindowWidth="1200" />
                        </VisualState.StateTriggers>
                        <VisualState.Setters>
                            <Setter Target="EmptyState.Padding" Value="178,0,0,16" />
                            <Setter Target="EmptyState.HeaderFontSize" Value="44" />
                            <Setter Target="EmptyState.SubHeaderFontSize" Value="18" />
                        </VisualState.Setters>
                    </VisualState>
                </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
        </userControls:EmptyState>
    </ControlTemplate>

    <DataTemplate x:Key="MegaPageHeaderLogo">
        <Border 
            Background="{StaticResource MegaAppBackgroundBrush}" 
            Height="44" 
            Width="44">
            <Path 
                Data="{StaticResource MegaIconVector}" 
                Height="24" 
                Width="24" 
                StrokeThickness="0"
                Stretch="UniformToFill" 
                Fill="{StaticResource MegaHeaderIconColorBrush}" 
                FlowDirection="LeftToRight"/>
        </Border>
    </DataTemplate>

    <DataTemplate x:Key="MegaPivoHeaderTemplate">
        <Grid>
            <TextBlock 
                Text="{Binding}" 
                FontFamily="Segoe UI" 
                FontSize="24" 
                FontWeight="Normal"/>
        </Grid>
    </DataTemplate>

    <DataTemplate x:Key="BreadcrumbHomeMegaTemplate">
        <Grid>
            <Path 
                x:Name="BreadcrumbHomeMegaIcon" 
                Height="14" 
                Width="14" 
                Data="{Binding BreadcrumbHomeMegaIcon}" 
                Stretch="UniformToFill">
                <Path.Fill>
                    <SolidColorBrush Color="{ThemeResource MegaAppForeground}"/>
                </Path.Fill>
            </Path>
        </Grid>
    </DataTemplate>

    <DataTemplate x:Key="BreadcrumbHomeRubbishBinTemplate">
        <Grid>
            <Path 
                x:Name="BreadcrumbHomeRubbishBinIcon" 
                Height="14" 
                Width="14" 
                Data="{Binding BreadcrumbHomeRubbishBinIcon}" 
                Stretch="UniformToFill">
                <Path.Fill>
                    <SolidColorBrush Color="{ThemeResource MegaAppForeground}"/>
                </Path.Fill>
            </Path>
        </Grid>
    </DataTemplate>

    <DataTemplate x:Key="BreadcrumbItemTemplate">
        <Grid>
            <TextBlock 
                Text="{Binding Name}" 
                Style="{ThemeResource CaptionTextBlockStyle}"/>
        </Grid>
    </DataTemplate>

    <DataTemplate x:Key="MegaNodeListViewFileItemContent">
        <Border 
            Margin="-12,1" 
            BorderThickness="2,2,2,2" 
            Background="{Binding DisplayMode, ConverterParameter=0\,4, Converter={StaticResource NodeDisplayModeToColorBrushConverter}}" 
            BorderBrush="{Binding DisplayMode, ConverterParameter=1\,0, Converter={StaticResource NodeDisplayModeToColorBrushConverter}}">
            <Grid 
                Margin="12,4"
                Background="Transparent">
                <FlyoutBase.AttachedFlyout>
                    <MenuFlyout>
                        <MenuFlyout.Items>
                            <MenuFlyoutItem 
                                Text="{Binding ViewDetailsText}"
                                Command="{Binding ViewDetailsCommand}"
                                Visibility="{Binding NodeBinding, ConverterParameter='viewdetails', Converter={StaticResource ViewStateToVisibilityConverter}}"/>
                            <MenuFlyoutItem 
                                Text="{Binding PreviewText}"
                                Command="{Binding PreviewCommand}"
                                Visibility="{Binding NodeBinding, ConverterParameter='preview', Converter={StaticResource ViewStateToVisibilityConverter}}"/>
                            <MenuFlyoutItem 
                                Text="{Binding DownloadText}"
                                Command="{Binding DownloadCommand}"
                                Visibility="{Binding NodeBinding, ConverterParameter='download', Converter={StaticResource ViewStateToVisibilityConverter}}"/>
                            <MenuFlyoutItem 
                                Text="{Binding GetLinkText}"
                                Command="{Binding GetLinkCommand}"
                                Visibility="{Binding NodeBinding, ConverterParameter='getlink', Converter={StaticResource ViewStateToVisibilityConverter}}">
                                <MenuFlyoutItem.CommandParameter>
                                    <x:Boolean>True</x:Boolean>
                                </MenuFlyoutItem.CommandParameter>
                            </MenuFlyoutItem>
                            <MenuFlyoutItem 
                                Text="{Binding RenameText}" 
                                Command="{Binding RenameCommand}"
                                Visibility="{Binding NodeBinding, ConverterParameter='rename', Converter={StaticResource ViewStateToVisibilityConverter}}"/>
                            <MenuFlyoutItem 
                                Text="{Binding CopyOrMoveText}" 
                                Command="{Binding CopyOrMoveCommand}"
                                Visibility="{Binding NodeBinding, ConverterParameter='copyormove', Converter={StaticResource ViewStateToVisibilityConverter}}"/>
                            <MenuFlyoutItem 
                                Text="{Binding RemoveText}" 
                                Command="{Binding RemoveCommand}"
                                Visibility="{Binding NodeBinding, ConverterParameter='remove', Converter={StaticResource ViewStateToVisibilityConverter}}"/>
                        </MenuFlyout.Items>
                    </MenuFlyout>
                </FlyoutBase.AttachedFlyout>
                <interactivity:Interaction.Behaviors>
                    <core:EventTriggerBehavior EventName="RightTapped">
                        <behaviors:OpenFlyoutAction IsEnabled="{Binding Parent.IsFlyoutActionAvailable}"/>
                    </core:EventTriggerBehavior>
                </interactivity:Interaction.Behaviors>
                <Grid.RowDefinitions>
                    <RowDefinition/>
                    <RowDefinition/>
                </Grid.RowDefinitions>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition/>
                </Grid.ColumnDefinitions>

                <Grid
                    Grid.Row="0" 
                    Grid.RowSpan="2" 
                    Grid.Column="0">
                    <Path 
                        Data="{Binding DefaultImagePathData}" 
                        HorizontalAlignment="Center" 
                        VerticalAlignment="Center" 
                        Width="36" 
                        Height="36" 
                        Stretch="Uniform" 
                        Margin="0,0,12,0" 
                        Visibility="{Binding ThumbnailImageUri, Converter={StaticResource InverseStringVisibilityConverter}}">
                        <Path.Fill>
                            <SolidColorBrush Color="{ThemeResource MegaAppForeground}"/>
                        </Path.Fill>
                    </Path>
                    <Image 
                        HorizontalAlignment="Center" 
                        VerticalAlignment="Center"
                        Width="36" 
                        Height="36" 
                        Stretch="UniformToFill" 
                        Margin="0,0,12,0" 
                        Visibility="{Binding ThumbnailImageUri, Converter={StaticResource StringVisibilityConverter}}">
                        <Image.Source>
                            <BitmapImage
                                UriSource="{Binding ThumbnailImageUri}"
                                DecodePixelHeight="36"
                                DecodePixelType="Logical"/>
                        </Image.Source>
                    </Image>
                    <Ellipse 
                        Margin="-3,0,0,0" 
                        Height="12" 
                        Width="12" 
                        Canvas.ZIndex="1" 
                        HorizontalAlignment="Left" 
                        VerticalAlignment="Bottom" 
                        Fill="{ThemeResource MegaRedColorBrush}"
                        Stroke="{ThemeResource MegaAppForegroundBrush}" 
                        StrokeThickness="1" 
                        Visibility="{Binding IsExported, Converter={StaticResource BoolToVisibilityConverter}}"/>
                </Grid>

                <TextBlock 
                    x:Name="txtFileName" 
                    HorizontalAlignment="Left" 
                    TextWrapping="NoWrap"
                    Text="{Binding Name}" 
                    TextTrimming="CharacterEllipsis" 
                    VerticalAlignment="Center" 
                    Style="{ThemeResource BaseTextBlockStyle}" 
                    Grid.Column="1" 
                    Grid.Row="0" 
                    Grid.ColumnSpan="2"/>
                <TextBlock 
                    x:Name="txtSize" 
                    HorizontalAlignment="Left" 
                    TextWrapping="NoWrap" 
                    Text="{Binding Information}" 
                    VerticalAlignment="Center" 
                    Style="{ThemeResource CaptionTextBlockStyle}" 
                    Grid.Row="1" 
                    Grid.Column="1"/>
                <TextBlock 
                    x:Name="txtCreated" 
                    HorizontalAlignment="Right" 
                    TextWrapping="NoWrap" 
                    Text="{Binding ModificationTime}" 
                    VerticalAlignment="Center" 
                    Style="{ThemeResource CaptionTextBlockStyle}" 
                    Grid.Row="1" 
                    Grid.Column="2"/>
            </Grid>
        </Border>
    </DataTemplate>

    <DataTemplate x:Key="MegaNodeGridViewFileItemContent">
        <Border 
            BorderThickness="1" 
            Background="{Binding DisplayMode, ConverterParameter=0\,4, Converter={StaticResource NodeDisplayModeToColorBrushConverter}}" 
            BorderBrush="{Binding DisplayMode, ConverterParameter=1\,0, Converter={StaticResource NodeDisplayModeToColorBrushConverter}}">
            <Grid 
                Margin="4"
                Width="96"
                Background="Transparent" >
                <FlyoutBase.AttachedFlyout>
                    <MenuFlyout>
                        <MenuFlyout.Items>
                            <MenuFlyoutItem 
                                Text="{Binding ViewDetailsText}"
                                Command="{Binding ViewDetailsCommand}"
                                Visibility="{Binding NodeBinding, ConverterParameter='viewdetails', Converter={StaticResource ViewStateToVisibilityConverter}}"/>
                            <MenuFlyoutItem 
                                Text="{Binding PreviewText}"
                                Command="{Binding PreviewCommand}"
                                Visibility="{Binding NodeBinding, ConverterParameter='preview', Converter={StaticResource ViewStateToVisibilityConverter}}"/>
                            <MenuFlyoutItem 
                                Text="{Binding DownloadText}"
                                Command="{Binding DownloadCommand}"
                                Visibility="{Binding NodeBinding, ConverterParameter='download', Converter={StaticResource ViewStateToVisibilityConverter}}"/>
                            <MenuFlyoutItem 
                                Text="{Binding GetLinkText}"
                                Command="{Binding GetLinkCommand}"
                                Visibility="{Binding NodeBinding, ConverterParameter='getlink', Converter={StaticResource ViewStateToVisibilityConverter}}">
                                <MenuFlyoutItem.CommandParameter>
                                    <x:Boolean>True</x:Boolean>
                                </MenuFlyoutItem.CommandParameter>
                            </MenuFlyoutItem>
                            <MenuFlyoutItem 
                                Text="{Binding RenameText}" 
                                Command="{Binding RenameCommand}"
                                Visibility="{Binding NodeBinding, ConverterParameter='rename', Converter={StaticResource ViewStateToVisibilityConverter}}"/>
                            <MenuFlyoutItem 
                                Text="{Binding CopyOrMoveText}" 
                                Command="{Binding CopyOrMoveCommand}"
                                Visibility="{Binding NodeBinding, ConverterParameter='copyormove', Converter={StaticResource ViewStateToVisibilityConverter}}"/>
                            <MenuFlyoutItem 
                                Text="{Binding RemoveText}" 
                                Command="{Binding RemoveCommand}"
                                Visibility="{Binding NodeBinding, ConverterParameter='remove', Converter={StaticResource ViewStateToVisibilityConverter}}"/>
                        </MenuFlyout.Items>
                    </MenuFlyout>
                </FlyoutBase.AttachedFlyout>
                <interactivity:Interaction.Behaviors>
                    <core:EventTriggerBehavior EventName="RightTapped">
                        <behaviors:OpenFlyoutAction IsEnabled="{Binding Parent.IsFlyoutActionAvailable}"/>
                    </core:EventTriggerBehavior>
                </interactivity:Interaction.Behaviors>
                <Grid.RowDefinitions>
                    <RowDefinition Height="96"/>
                    <RowDefinition Height="Auto"/>
                </Grid.RowDefinitions>
                <Path 
                    Grid.Row="0" 
                    Data="{Binding DefaultImagePathData}" 
                    HorizontalAlignment="Center" 
                    VerticalAlignment="Center" 
                    Width="64" 
                    Height="64" 
                    Stretch="Uniform" 
                    Visibility="{Binding ThumbnailImageUri, Converter={StaticResource InverseStringVisibilityConverter}}">
                    <Path.Fill>
                        <SolidColorBrush Color="{StaticResource MegaAppForeground}"/>
                    </Path.Fill>
                </Path>
                <Image 
                    Grid.Row="0" 
                    Stretch="UniformToFill" 
                    Height="96" 
                    Width="96" 
                    Visibility="{Binding ThumbnailImageUri, Converter={StaticResource StringVisibilityConverter}}">
                    <Image.Source>
                        <BitmapImage
                            UriSource="{Binding ThumbnailImageUri}"
                            DecodePixelHeight="96"
                            DecodePixelType="Logical"/>
                    </Image.Source>
                </Image>
                <Grid Grid.Row="1">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*"/>
                        <ColumnDefinition Width="Auto"/>
                    </Grid.ColumnDefinitions>
                    <TextBlock
                        Grid.Column="0"
                        VerticalAlignment="Center" 
                        HorizontalAlignment="Stretch"
                        TextAlignment="Center"
                        TextWrapping="NoWrap"
                        Text="{Binding Name}" 
                        TextTrimming="CharacterEllipsis"
                        FontSize="12"/>
                    <Ellipse
                        Grid.Column="1"
                        Margin="4,0,0,0"
                        VerticalAlignment="Center"
                        HorizontalAlignment="Right"
                        Height="8" 
                        Width="8" 
                        Fill="{ThemeResource MegaRedColorBrush}"                        
                        Visibility="{Binding IsExported, Converter={StaticResource BoolToVisibilityConverter}}"/>
                </Grid>
            </Grid>
        </Border>
    </DataTemplate>

    <DataTemplate x:Key="MegaNodeListViewFolderItemContent">
        <Border 
            Margin="-12,1" 
            BorderThickness="2,2,2,2" 
            Background="{Binding DisplayMode, ConverterParameter=0\,4, Converter={StaticResource NodeDisplayModeToColorBrushConverter}}" 
            BorderBrush="{Binding DisplayMode, ConverterParameter=1\,0, Converter={StaticResource NodeDisplayModeToColorBrushConverter}}">
            <Grid 
                Margin="12,4"
                Background="Transparent">
                <FlyoutBase.AttachedFlyout>
                    <MenuFlyout>
                        <MenuFlyout.Items>
                            <MenuFlyoutItem 
                                Text="{Binding ViewDetailsText}"
                                Command="{Binding ViewDetailsCommand}"
                                Visibility="{Binding NodeBinding, ConverterParameter='viewdetails', Converter={StaticResource ViewStateToVisibilityConverter}}"/>
                            <MenuFlyoutItem 
                                Text="{Binding DownloadText}"
                                Command="{Binding DownloadCommand}"
                                Visibility="{Binding NodeBinding, ConverterParameter='download', Converter={StaticResource ViewStateToVisibilityConverter}}"/>
                            <MenuFlyoutItem 
                                Text="{Binding GetLinkText}"
                                Command="{Binding GetLinkCommand}"
                                Visibility="{Binding NodeBinding, ConverterParameter='getlink', Converter={StaticResource ViewStateToVisibilityConverter}}">
                                <MenuFlyoutItem.CommandParameter>
                                    <x:Boolean>True</x:Boolean>
                                </MenuFlyoutItem.CommandParameter>
                            </MenuFlyoutItem>
                            <MenuFlyoutItem 
                                Text="{Binding RenameText}" 
                                Command="{Binding RenameCommand}"
                                Visibility="{Binding NodeBinding, ConverterParameter='rename', Converter={StaticResource ViewStateToVisibilityConverter}}"/>
                            <MenuFlyoutItem 
                                Text="{Binding CopyOrMoveText}" 
                                Command="{Binding CopyOrMoveCommand}"
                                Visibility="{Binding NodeBinding, ConverterParameter='copyormove', Converter={StaticResource ViewStateToVisibilityConverter}}"/>
                            <MenuFlyoutItem 
                                Text="{Binding RemoveText}" 
                                Command="{Binding RemoveCommand}"
                                Visibility="{Binding NodeBinding, ConverterParameter='remove', Converter={StaticResource ViewStateToVisibilityConverter}}"/>
                        </MenuFlyout.Items>
                    </MenuFlyout>
                </FlyoutBase.AttachedFlyout>
                <interactivity:Interaction.Behaviors>
                    <core:EventTriggerBehavior EventName="RightTapped">
                        <behaviors:OpenFlyoutAction IsEnabled="{Binding Parent.IsFlyoutActionAvailable}"/>
                    </core:EventTriggerBehavior>
                </interactivity:Interaction.Behaviors>
                <Grid.RowDefinitions>
                    <RowDefinition/>
                    <RowDefinition/>
                </Grid.RowDefinitions>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition/>
                </Grid.ColumnDefinitions>

                <Grid 
                    Grid.Row="0" 
                    Grid.RowSpan="2" 
                    Grid.Column="0">
                    <Path 
                        Data="{Binding DefaultImagePathData}" 
                        HorizontalAlignment="Center" 
                        VerticalAlignment="Center"
                        Width="36" 
                        Height="36" 
                        Stretch="Uniform" 
                        Margin="0,0,12,0">
                        <Path.Fill>
                            <SolidColorBrush Color="{ThemeResource MegaAppForeground}"/>
                        </Path.Fill>
                    </Path>
                    <Ellipse 
                        Margin="-3,0,0,0" 
                        Height="12" 
                        Width="12" 
                        Canvas.ZIndex="1" 
                        HorizontalAlignment="Left" 
                        VerticalAlignment="Bottom" 
                        Fill="{ThemeResource MegaRedColorBrush}"
                        Stroke="{ThemeResource MegaAppForegroundBrush}" 
                        StrokeThickness="1" 
                        Visibility="{Binding IsExported, Converter={StaticResource BoolToVisibilityConverter}}"/>
                </Grid>

                <TextBlock 
                    x:Name="txtFolderName" 
                    HorizontalAlignment="Left" 
                    TextWrapping="NoWrap"
                    Text="{Binding Name}" 
                    TextTrimming="CharacterEllipsis" 
                    VerticalAlignment="Center" 
                    Style="{ThemeResource BaseTextBlockStyle}" 
                    Grid.Column="1" 
                    Grid.Row="0" 
                    Grid.ColumnSpan="2"/>
                <TextBlock 
                    x:Name="txtCount" 
                    HorizontalAlignment="Left" 
                    TextWrapping="NoWrap" 
                    Text="{Binding Information}" 
                    VerticalAlignment="Center" 
                    Style="{ThemeResource CaptionTextBlockStyle}" 
                    Grid.Row="1" 
                    Grid.Column="1"/>
                <TextBlock 
                    x:Name="txtCreated" 
                    HorizontalAlignment="Right" 
                    TextWrapping="NoWrap"
                    Text="{Binding CreationTime}" 
                    VerticalAlignment="Center" 
                    Style="{ThemeResource CaptionTextBlockStyle}" 
                    Grid.Row="1" 
                    Grid.Column="2"/>
            </Grid>
        </Border>
    </DataTemplate>

    <DataTemplate x:Key="MegaNodeGridViewFolderItemContent">
        <Border 
            BorderThickness="1" 
            Background="{Binding DisplayMode, ConverterParameter=0\,4, Converter={StaticResource NodeDisplayModeToColorBrushConverter}}" 
            BorderBrush="{Binding DisplayMode, ConverterParameter=1\,0, Converter={StaticResource NodeDisplayModeToColorBrushConverter}}">
            <Grid 
                Margin="4"
                Width="96"
                Background="Transparent">
                <FlyoutBase.AttachedFlyout>
                    <MenuFlyout>
                        <MenuFlyout.Items>
                            <MenuFlyoutItem 
                                Text="{Binding ViewDetailsText}"
                                Command="{Binding ViewDetailsCommand}"
                                Visibility="{Binding NodeBinding, ConverterParameter='viewdetails', Converter={StaticResource ViewStateToVisibilityConverter}}"/>
                            <MenuFlyoutItem 
                                Text="{Binding DownloadText}"
                                Command="{Binding DownloadCommand}"
                                Visibility="{Binding NodeBinding, ConverterParameter='download', Converter={StaticResource ViewStateToVisibilityConverter}}"/>
                            <MenuFlyoutItem 
                                Text="{Binding GetLinkText}"
                                Command="{Binding GetLinkCommand}"
                                Visibility="{Binding NodeBinding, ConverterParameter='getlink', Converter={StaticResource ViewStateToVisibilityConverter}}">
                                <MenuFlyoutItem.CommandParameter>
                                    <x:Boolean>True</x:Boolean>
                                </MenuFlyoutItem.CommandParameter>
                            </MenuFlyoutItem>
                            <MenuFlyoutItem 
                                Text="{Binding RenameText}" 
                                Command="{Binding RenameCommand}"
                                Visibility="{Binding NodeBinding, ConverterParameter='rename', Converter={StaticResource ViewStateToVisibilityConverter}}"/>
                            <MenuFlyoutItem 
                                Text="{Binding CopyOrMoveText}" 
                                Command="{Binding CopyOrMoveCommand}"
                                Visibility="{Binding NodeBinding, ConverterParameter='copyormove', Converter={StaticResource ViewStateToVisibilityConverter}}"/>
                            <MenuFlyoutItem 
                                Text="{Binding RemoveText}" 
                                Command="{Binding RemoveCommand}"
                                Visibility="{Binding NodeBinding, ConverterParameter='remove', Converter={StaticResource ViewStateToVisibilityConverter}}"/>
                        </MenuFlyout.Items>
                    </MenuFlyout>
                </FlyoutBase.AttachedFlyout>
                <interactivity:Interaction.Behaviors>
                    <core:EventTriggerBehavior EventName="RightTapped">
                        <behaviors:OpenFlyoutAction IsEnabled="{Binding Parent.IsFlyoutActionAvailable}"/>
                    </core:EventTriggerBehavior>
                </interactivity:Interaction.Behaviors>
                <Grid.RowDefinitions>
                    <RowDefinition Height="96"/>
                    <RowDefinition Height="Auto"/>
                </Grid.RowDefinitions>
                <Path 
                    Data="{Binding DefaultImagePathData}" 
                    HorizontalAlignment="Center" 
                    VerticalAlignment="Center" 
                    Width="64" 
                    Height="64" 
                    Stretch="Uniform">
                    <Path.Fill>
                        <SolidColorBrush Color="{StaticResource MegaAppForeground}"/>
                    </Path.Fill>
                </Path>
                <Grid Grid.Row="1">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*"/>
                        <ColumnDefinition Width="Auto"/>
                    </Grid.ColumnDefinitions>
                    <TextBlock
                        Grid.Column="0"
                        VerticalAlignment="Center" 
                        HorizontalAlignment="Stretch"
                        TextAlignment="Center"
                        TextWrapping="NoWrap"
                        Text="{Binding Name}" 
                        TextTrimming="CharacterEllipsis"
                        FontSize="12"/>
                    <Ellipse
                        Grid.Column="1"
                        Margin="4,0,0,0"
                        VerticalAlignment="Center"
                        HorizontalAlignment="Right"
                        Height="8" 
                        Width="8" 
                        Fill="{ThemeResource MegaRedColorBrush}"                        
                        Visibility="{Binding IsExported, Converter={StaticResource BoolToVisibilityConverter}}"/>
                </Grid>
            </Grid>
        </Border>
    </DataTemplate>
    
    <Style x:Key="MegaCleanListViewItemStyle" TargetType="ListViewItem">
        <Setter Property="FontFamily" Value="{ThemeResource ContentControlThemeFontFamily}"/>
        <Setter Property="FontSize" Value="{ThemeResource ControlContentThemeFontSize}"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Foreground" Value="{ThemeResource SystemControlForegroundBaseHighBrush}"/>
        <Setter Property="TabNavigation" Value="Local"/>
        <Setter Property="IsHoldingEnabled" Value="True"/>
        <Setter Property="Padding" Value="12,0,12,0"/>
        <Setter Property="HorizontalContentAlignment" Value="Left"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="MinWidth" Value="{ThemeResource ListViewItemMinWidth}"/>
        <Setter Property="MinHeight" Value="{ThemeResource ListViewItemMinHeight}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ListViewItem">
                    <ContentPresenter/>
                    <!--<ListViewItemPresenter CheckBrush="{ThemeResource SystemControlForegroundBaseMediumHighBrush}" ContentMargin="{TemplateBinding Padding}" CheckMode="Inline" ContentTransitions="{TemplateBinding ContentTransitions}" CheckBoxBrush="{ThemeResource SystemControlForegroundBaseMediumHighBrush}" DragForeground="{ThemeResource ListViewItemDragForegroundThemeBrush}" DragOpacity="{ThemeResource ListViewItemDragThemeOpacity}" DragBackground="{ThemeResource ListViewItemDragBackgroundThemeBrush}" DisabledOpacity="{ThemeResource ListViewItemDisabledThemeOpacity}" FocusBorderBrush="{ThemeResource SystemControlForegroundAltHighBrush}" FocusSecondaryBorderBrush="{ThemeResource SystemControlForegroundBaseHighBrush}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" PointerOverForeground="{ThemeResource SystemControlHighlightAltBaseHighBrush}" PressedBackground="{ThemeResource SystemControlHighlightListMediumBrush}" PlaceholderBackground="{ThemeResource ListViewItemPlaceholderBackgroundThemeBrush}" PointerOverBackground="{ThemeResource SystemControlHighlightListLowBrush}" ReorderHintOffset="{ThemeResource ListViewItemReorderHintThemeOffset}" SelectedPressedBackground="{ThemeResource SystemControlHighlightListAccentHighBrush}" SelectionCheckMarkVisualEnabled="True" SelectedForeground="{ThemeResource SystemControlHighlightAltBaseHighBrush}" SelectedPointerOverBackground="{ThemeResource SystemControlHighlightListAccentMediumBrush}" SelectedBackground="{ThemeResource SystemControlHighlightListAccentLowBrush}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"/>-->
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <DataTemplate x:Key="MegaTransferItemContentMobile">
        <Grid 
            Margin="0,8"
            Background="Transparent">
            <FlyoutBase.AttachedFlyout>
                <MenuFlyout>
                    <MenuFlyout.Items>
                        <MenuFlyoutItem
                            Text="{Binding PauseText}"
                            Command="{Binding PauseOrResumeTransferCommand}"
                            Visibility="{Binding TransferState, ConverterParameter='pause', Converter={StaticResource TransferStateToVisibilityConverter}}"/>
                        <MenuFlyoutItem
                            Text="{Binding ResumeText}"
                            Command="{Binding PauseOrResumeTransferCommand}"
                            Visibility="{Binding TransferState, ConverterParameter='resume', Converter={StaticResource TransferStateToVisibilityConverter}}"/>
                        <MenuFlyoutItem
                            Text="{Binding CancelText}"
                            Command="{Binding CancelTransferCommand}"
                            Visibility="{Binding TransferState, ConverterParameter='cancel', Converter={StaticResource TransferStateToVisibilityConverter}}"/>
                        <MenuFlyoutItem
                            Text="{Binding RetryText}"
                            Command="{Binding RetryTransferCommand}"
                            Visibility="{Binding TransferState, ConverterParameter='retry', Converter={StaticResource TransferStateToVisibilityConverter}}"/>
                        <MenuFlyoutItem
                            Text="{Binding RemoveText}"
                            Command="{Binding RemoveTransferCommand}"
                            Visibility="{Binding TransferState, ConverterParameter='remove', Converter={StaticResource TransferStateToVisibilityConverter}}"/>
                    </MenuFlyout.Items>
                </MenuFlyout>
            </FlyoutBase.AttachedFlyout>
            <interactivity:Interaction.Behaviors>
                <core:EventTriggerBehavior EventName="RightTapped">
                    <behaviors:OpenFlyoutAction IsEnabled="{Binding IsActionAvailable}"/>
                </core:EventTriggerBehavior>
            </interactivity:Interaction.Behaviors>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="Auto"/>
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
                <RowDefinition/>
                <RowDefinition/>
                <RowDefinition/>
            </Grid.RowDefinitions>
            <Path 
                Margin="0,0,8,0"
                Grid.Row="0"
                Grid.Column="0"
                Grid.RowSpan="3"
                Width="36" 
                Height="36" 
                HorizontalAlignment="Center" 
                VerticalAlignment="Center" 
                Data="{Binding FileTypePathData}" 
                Stretch="Uniform"                
                Visibility="{Binding ThumbnailUri, Converter={StaticResource InverseStringVisibilityConverter}}">
                <Path.Fill>
                    <SolidColorBrush Color="{StaticResource MegaAppForeground}"/>
                </Path.Fill>
            </Path>
            <Image 
                Margin="0,0,8,0"
                Grid.Row="0" 
                Grid.Column="0" 
                Grid.RowSpan="3"
                Width="36" 
                Height="36"
                HorizontalAlignment="Center"
                VerticalAlignment="Center" 
                Stretch="UniformToFill"
                Visibility="{Binding ThumbnailUri, Converter={StaticResource StringVisibilityConverter}}">
                <Image.Source>
                    <BitmapImage 
                        UriSource="{Binding ThumbnailUri}"
                        DecodePixelHeight="36"
						DecodePixelWidth="36"
						DecodePixelType="Logical"
                        />
                </Image.Source>
            </Image>
            <TextBlock 
                Grid.Row="0" 
                Grid.Column="1"
                Text="{Binding DisplayName}" 
                HorizontalAlignment="Left"
                VerticalAlignment="Bottom"
                TextTrimming="WordEllipsis"
                Style="{ThemeResource BaseTextBlockStyle}"/>
            <ProgressBar 
                Grid.Row="1" 
                Grid.Column="1"
                VerticalAlignment="Center" 
                Minimum="0" 
                Maximum="{Binding TotalBytes}"
                Value="{Binding TransferedBytes}" 
                IsIndeterminate="False"
                Background="{ThemeResource MegaProgressBarBackgroundBrush}"
                Visibility="{Binding IsBusy, Converter={StaticResource BoolToVisibilityConverter}}">
                <ProgressBar.Foreground>
                    <SolidColorBrush Color="{StaticResource MegaRedColor}"/>
                </ProgressBar.Foreground>
            </ProgressBar>
            <Grid
                Grid.Row="2" 
                Grid.Column="1">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="Auto"/>
                </Grid.ColumnDefinitions>
                <TextBlock
                    Grid.Column="0"
                    HorizontalAlignment="Left" 
                    VerticalAlignment="Top" 
                    Text="{Binding TotalBytesText}" 
                    TextWrapping="NoWrap" 
                    Style="{ThemeResource CaptionTextBlockStyle}" 
                    Foreground="{StaticResource MegaAppForegroundBrush}"
                    Visibility="{Binding IsBusy, Converter={StaticResource InverseBoolToVisibilityConverter}}"/>
                <TextBlock
                    Grid.Column="0"
                    HorizontalAlignment="Left" 
                    VerticalAlignment="Center" 
                    Text="{Binding TransferedAndTotalBytes}" 
                    TextWrapping="NoWrap" 
                    Style="{ThemeResource CaptionTextBlockStyle}" 
                    Foreground="{StaticResource MegaAppForegroundBrush}"
                    Visibility="{Binding IsBusy, Converter={StaticResource BoolToVisibilityConverter}}"/>
                <Viewbox
                    Margin="0,0,8,0"
                    Grid.Column="1"
                    MaxWidth="12"
                    MaxHeight="12"
                    HorizontalAlignment="Left"
                    VerticalAlignment="Center">
                    <SymbolIcon
                        Symbol="{Binding Type, Converter={StaticResource TransferTypeToSymbolConverter}}"
                        Foreground="{StaticResource MegaAppForegroundBrush}"/>
                </Viewbox>
                <TextBlock 
                    Grid.Column="2"
                    HorizontalAlignment="Right" 
                    VerticalAlignment="Top" 
                    Text="{Binding TypeAndState, Converter={StaticResource TransferStateToReadableTextConverter}}" 
                    TextWrapping="NoWrap" 
                    Style="{ThemeResource CaptionTextBlockStyle}" 
                    Foreground="{StaticResource MegaAppForegroundBrush}"
                    Visibility="{Binding IsBusy, Converter={StaticResource InverseBoolToVisibilityConverter}}"/>
                <TextBlock 
                    Grid.Column="2"
                    HorizontalAlignment="Right" 
                    VerticalAlignment="Top"
                    Text="{Binding EstimatedTime}"
                    TextWrapping="NoWrap" 
                    Style="{ThemeResource CaptionTextBlockStyle}" 
                    Foreground="{StaticResource MegaAppForegroundBrush}"
                    Visibility="{Binding IsBusy, Converter={StaticResource BoolToVisibilityConverter}}"/>
            </Grid>

            <CommandBar
                Margin="8,0,0,0"
                Grid.Row="0" 
                Grid.Column="2" 
                Grid.RowSpan="3"
                Background="Transparent"
                VerticalAlignment="Center"
                extensions:CommandBarExtensions.HideMoreButton="True">
                <AppBarButton
                    Style="{StaticResource MegaAppBarButtonStyle}"
                    Label="{Binding CancelText}" 
                    ToolTipService.ToolTip="{Binding CancelText}"
                    Command="{Binding CancelTransferCommand}"
                    Visibility="{Binding TransferState, ConverterParameter='cancel', Converter={StaticResource TransferStateToVisibilityConverter}}">
                    <AppBarButton.Icon>
                        <PathIcon 
                            Data="{Binding CancelPathData, Mode=OneTime}"
                            HorizontalAlignment="Center"
                            VerticalAlignment="Center"/>
                    </AppBarButton.Icon>
                </AppBarButton>
            </CommandBar>
        </Grid>
    </DataTemplate>

    <DataTemplate x:Key="MegaTransferItemContentDesktop">
        <Grid 
            Margin="0,4"
            Background="Transparent">
            <FlyoutBase.AttachedFlyout>
                <MenuFlyout>
                    <MenuFlyout.Items>
                        <MenuFlyoutItem
                            Text="{Binding PauseText}"
                            Command="{Binding PauseOrResumeTransferCommand}"
                            Visibility="{Binding TransferState, ConverterParameter='pause', Converter={StaticResource TransferStateToVisibilityConverter}}"/>
                        <MenuFlyoutItem
                            Text="{Binding ResumeText}"
                            Command="{Binding PauseOrResumeTransferCommand}"
                            Visibility="{Binding TransferState, ConverterParameter='resume', Converter={StaticResource TransferStateToVisibilityConverter}}"/>
                        <MenuFlyoutItem
                            Text="{Binding CancelText}"
                            Command="{Binding CancelTransferCommand}"
                            Visibility="{Binding TransferState, ConverterParameter='cancel', Converter={StaticResource TransferStateToVisibilityConverter}}"/>
                        <MenuFlyoutItem
                            Text="{Binding RetryText}"
                            Command="{Binding RetryTransferCommand}"
                            Visibility="{Binding TransferState, ConverterParameter='retry', Converter={StaticResource TransferStateToVisibilityConverter}}"/>
                        <MenuFlyoutItem
                            Text="{Binding RemoveText}"
                            Command="{Binding RemoveTransferCommand}"
                            Visibility="{Binding TransferState, ConverterParameter='remove', Converter={StaticResource TransferStateToVisibilityConverter}}"/>
                    </MenuFlyout.Items>
                </MenuFlyout>
            </FlyoutBase.AttachedFlyout>
            <interactivity:Interaction.Behaviors>
                <core:EventTriggerBehavior EventName="RightTapped">
                    <behaviors:OpenFlyoutAction IsEnabled="{Binding IsActionAvailable}"/>
                </core:EventTriggerBehavior>
            </interactivity:Interaction.Behaviors>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="70"/>
                <ColumnDefinition Width="Auto"/>
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
                <RowDefinition Height="*"/>
                <RowDefinition Height="Auto"/>
            </Grid.RowDefinitions>
            <Path 
                Margin="0,0,8,0"
                Grid.Row="0"
                Grid.Column="0"
                Grid.RowSpan="2"
                Width="36" 
                Height="36" 
                HorizontalAlignment="Center" 
                VerticalAlignment="Center" 
                Data="{Binding FileTypePathData}" 
                Stretch="Uniform"                
                Visibility="{Binding ThumbnailUri, Converter={StaticResource InverseStringVisibilityConverter}}">
                <Path.Fill>
                    <SolidColorBrush Color="{StaticResource MegaAppForeground}"/>
                </Path.Fill>
            </Path>
            <Image 
                Margin="0,0,8,0"
                Grid.Row="0" 
                Grid.Column="0" 
                Grid.RowSpan="2"
                Width="36" 
                Height="36"
                HorizontalAlignment="Center"
                VerticalAlignment="Center" 
                Stretch="UniformToFill"
                Visibility="{Binding ThumbnailUri, Converter={StaticResource StringVisibilityConverter}}">
                <Image.Source>
                    <BitmapImage 
                        UriSource="{Binding ThumbnailUri}"
                        DecodePixelHeight="36"
						DecodePixelWidth="36"
						DecodePixelType="Logical"
                        />
                </Image.Source>
            </Image>
            <TextBlock 
                Grid.Row="0" 
                Grid.Column="1"
                Margin="0,0,20,0"
                Text="{Binding DisplayName}" 
                HorizontalAlignment="Left"
                VerticalAlignment="Center"
                TextTrimming="WordEllipsis"
                Style="{ThemeResource BaseTextBlockStyle}"/>
            <TextBlock 
                Grid.Row="0" 
                Grid.Column="2"
                Margin="0,0,20,0"
                HorizontalAlignment="Right" 
                VerticalAlignment="Center" 
                Text="{Binding TotalBytesText}" 
                TextWrapping="NoWrap" 
                Style="{ThemeResource CaptionTextBlockStyle}" 
                Foreground="{StaticResource MegaAppForegroundBrush}"
                Visibility="{Binding IsBusy, Converter={StaticResource InverseBoolToVisibilityConverter}}"/>
            <TextBlock 
                Grid.Row="0" 
                Grid.Column="2"
                Margin="0,0,20,0"
                HorizontalAlignment="Right" 
                VerticalAlignment="Center" 
                Text="{Binding TransferedAndTotalBytes}" 
                TextWrapping="NoWrap" 
                Style="{ThemeResource CaptionTextBlockStyle}" 
                Foreground="{StaticResource MegaAppForegroundBrush}"
                Visibility="{Binding IsBusy, Converter={StaticResource BoolToVisibilityConverter}}"/>
            <Viewbox
                Margin="0,0,8,0"
                Grid.Row="0"
                Grid.Column="3"
                MaxWidth="16"
                MaxHeight="16"
                HorizontalAlignment="Left"
                VerticalAlignment="Center">
                <SymbolIcon
                    Symbol="{Binding Type, Converter={StaticResource TransferTypeToSymbolConverter}}"
                    Foreground="{StaticResource MegaAppForegroundBrush}"/>
            </Viewbox>
            <TextBlock 
                Grid.Row="0" 
                Grid.Column="4"
                Margin="0,0,8,0"
                HorizontalAlignment="Left" 
                VerticalAlignment="Center"
                Text="{Binding EstimatedTime}"
                TextWrapping="NoWrap" 
                Style="{ThemeResource CaptionTextBlockStyle}" 
                Foreground="{StaticResource MegaAppForegroundBrush}"
                Visibility="{Binding IsBusy, Converter={StaticResource BoolToVisibilityConverter}}"/>
            <TextBlock 
                Grid.Row="0" 
                Grid.Column="4"
                Margin="0,0,8,0"
                HorizontalAlignment="Left" 
                VerticalAlignment="Center" 
                Text="{Binding TypeAndState, Converter={StaticResource TransferStateToReadableTextConverter}}" 
                TextWrapping="NoWrap" 
                Style="{ThemeResource CaptionTextBlockStyle}" 
                Foreground="{StaticResource MegaAppForegroundBrush}"
                Visibility="{Binding IsBusy, Converter={StaticResource InverseBoolToVisibilityConverter}}"/>
            <ProgressBar 
                Grid.Row="1" 
                Grid.Column="1"
                Grid.ColumnSpan="4"
                Margin="0,-8,0,16"
                VerticalAlignment="Top" 
                Minimum="0" 
                Maximum="{Binding TotalBytes}"
                Value="{Binding TransferedBytes}" 
                IsIndeterminate="False"
                Background="{ThemeResource MegaProgressBarBackgroundBrush}"
                Visibility="{Binding IsBusy, Converter={StaticResource BoolToVisibilityConverter}}">
                <ProgressBar.Foreground>
                    <SolidColorBrush Color="{StaticResource MegaRedColor}"/>
                </ProgressBar.Foreground>
            </ProgressBar>
            <CommandBar
                Margin="8,0,0,0"
                Grid.Row="0" 
                Grid.Column="5" 
                Grid.RowSpan="2"
                Background="Transparent"
                VerticalAlignment="Center"
                extensions:CommandBarExtensions.HideMoreButton="True">
                <AppBarButton
                    Style="{StaticResource MegaAppBarButtonStyle}"
                    Label="{Binding PauseText}" 
                    ToolTipService.ToolTip="{Binding PauseText}"
                    Command="{Binding PauseOrResumeTransferCommand}"
                    Visibility="{Binding TransferState, ConverterParameter='pause', Converter={StaticResource TransferStateToVisibilityConverter}}">
                    <AppBarButton.Icon>
                        <PathIcon 
                            Data="{Binding PausePathData, Mode=OneTime}"
                            HorizontalAlignment="Center"
                            VerticalAlignment="Center"/>
                    </AppBarButton.Icon>
                </AppBarButton>
                <AppBarButton
                    Style="{StaticResource MegaAppBarButtonStyle}"
                    Label="{Binding ResumeText}" 
                    ToolTipService.ToolTip="{Binding ResumeText}"
                    Command="{Binding PauseOrResumeTransferCommand}"
                    Visibility="{Binding TransferState, ConverterParameter='resume', Converter={StaticResource TransferStateToVisibilityConverter}}">
                    <AppBarButton.Icon>
                        <PathIcon 
                            Data="{Binding ResumePathData, Mode=OneTime}"
                            HorizontalAlignment="Center"
                            VerticalAlignment="Center"/>
                    </AppBarButton.Icon>
                </AppBarButton>
                <AppBarButton
                    Style="{StaticResource MegaAppBarButtonStyle}"
                    Label="{Binding RetryText}" 
                    ToolTipService.ToolTip="{Binding RetryText}"
                    Command="{Binding RetryTransferCommand}"
                    Visibility="{Binding TransferState, ConverterParameter='retry', Converter={StaticResource TransferStateToVisibilityConverter}}">
                    <Viewbox
                        MaxHeight="16"
                        MaxWidth="16"/>
                    <AppBarButton.Icon>
                        <SymbolIcon
                            Symbol="Refresh"
                            ToolTipService.ToolTip="{Binding RetryText}"
                            Foreground="{StaticResource MegaAppForegroundBrush}"/>
                    </AppBarButton.Icon>
                </AppBarButton>
                <AppBarButton
                    Style="{StaticResource MegaAppBarButtonStyle}"
                    Label="{Binding RemoveText}" 
                    ToolTipService.ToolTip="{Binding RemoveText}"
                    Command="{Binding RemoveTransferCommand}"
                    Visibility="{Binding TransferState, ConverterParameter='remove', Converter={StaticResource TransferStateToVisibilityConverter}}">
                    <AppBarButton.Icon>
                        <PathIcon 
                            Data="{Binding RemovePathData, Mode=OneTime}"
                            HorizontalAlignment="Center"
                            VerticalAlignment="Center"/>
                    </AppBarButton.Icon>
                </AppBarButton>
                <AppBarButton
                    Style="{StaticResource MegaAppBarButtonStyle}"
                    Label="{Binding CancelText}" 
                    ToolTipService.ToolTip="{Binding CancelText}"
                    Command="{Binding CancelTransferCommand}"
                    Visibility="{Binding TransferState, ConverterParameter='cancel', Converter={StaticResource TransferStateToVisibilityConverter}}">
                    <AppBarButton.Icon>
                        <PathIcon 
                            Data="{Binding CancelPathData, Mode=OneTime}"
                            HorizontalAlignment="Center"
                            VerticalAlignment="Center"/>
                    </AppBarButton.Icon>
                </AppBarButton>
            </CommandBar>
        </Grid>
    </DataTemplate>
</ResourceDictionary>
