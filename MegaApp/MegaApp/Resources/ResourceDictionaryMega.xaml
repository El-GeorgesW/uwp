<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:behaviors="using:MegaApp.Behaviors"
    xmlns:classes="using:MegaApp.Classes"
    xmlns:converters="using:MegaApp.Converters"
    xmlns:core="using:Microsoft.Xaml.Interactions.Core"
    xmlns:extensions="using:MegaApp.Extensions"
    xmlns:interactivity="using:Microsoft.Xaml.Interactivity"
    xmlns:mega="using:mega"
    xmlns:toolkit="using:Microsoft.Toolkit.Uwp.UI.Converters"
    xmlns:userControls="using:MegaApp.UserControls">

    <!--  Resource dictionary entries should be defined here.  -->

    <!--  APP THEME OVERRIDES  -->

    <!--  Measurements  -->
    <GridLength x:Key="MegaPageHeaderLogoRowHeight">44</GridLength>
    <x:Double x:Key="InputHeight">40</x:Double>
    <GridLength x:Key="PageHeaderRowHeight">48</GridLength>
    <x:Double x:Key="ViewAreaMaxWidth">600</x:Double>
    <x:Double x:Key="DefaultButtonWidth">180</x:Double>

    <!--  Margins  -->
    <Thickness x:Key="StackedInputMargin">0,0,0,4</Thickness>
    <Thickness x:Key="MegaPageHeaderLogoMargin">10,0,0,0</Thickness>
    <Thickness x:Key="RootGridMargin">0,0,12,0</Thickness>
    <Thickness x:Key="LoginMegaPageHeaderLogoMarginDesktop">60,60,60,0</Thickness>
    <Thickness x:Key="LoginMegaPageHeaderLogoMarginMobile">10,10,10,0</Thickness>

    <!--  Vector Data  -->
    <x:String x:Key="MegaIconVector">F1 M 18.092,16.246 C 18.092,16.450 17.927,16.615 17.725,16.615 L 16.168,16.615 C 15.966,16.615 15.802,16.450 15.802,16.246 L 15.802,11.419 C 15.802,11.378 15.752,11.357 15.723,11.387 L 12.427,14.709 C 12.140,14.997 11.676,14.997 11.390,14.709 L 8.094,11.387 C 8.065,11.357 8.015,11.378 8.015,11.419 L 8.015,16.246 C 8.015,16.450 7.851,16.615 7.649,16.615 L 6.092,16.615 C 5.889,16.615 5.725,16.450 5.725,16.246 L 5.725,7.754 C 5.725,7.550 5.889,7.385 6.092,7.385 L 7.162,7.385 C 7.356,7.385 7.543,7.462 7.680,7.601 L 11.779,11.731 C 11.850,11.803 11.966,11.803 12.038,11.731 L 16.136,7.601 C 16.274,7.462 16.460,7.385 16.655,7.385 L 17.725,7.385 C 17.927,7.385 18.092,7.550 18.092,7.754 L 18.092,16.246 Z M 12.000,0.000 C 5.373,0.000 0.000,5.373 0.000,12.000 C 0.000,18.627 5.373,24.000 12.000,24.000 C 18.627,24.000 24.000,18.627 24.000,12.000 C 24.000,5.373 18.627,0.000 12.000,0.000 Z</x:String>

    <!--  CONVERTERS  -->
    <converters:ContactsContentTypeToVisibilityConverter x:Key="ContactsContentTypeToVisibilityConverter" />
    <converters:ContainerTypeToVisibilityConverter x:Key="ContainerTypeToVisibilityConverter" />
    <converters:IntValueToVisibilityConverter x:Key="IntValueToVisibilityConverter" />
    <converters:InverseContainerTypeToVisibilityConverter x:Key="InverseContainerTypeToVisibilityConverter" />
    <converters:FolderViewStateToVisibilityConverter x:Key="FolderViewStateToVisibilityConverter" />
    <converters:NodeDisplayModeToColorBrushConverter x:Key="NodeDisplayModeToColorBrushConverter" />
    <converters:PanelTypeToVisibilityConverter x:Key="PanelTypeToVisibilityConverter" />
    <converters:TextToLowerCaseConverter x:Key="TextToLowerCaseConverter" />
    <converters:TransferStateToReadableTextConverter x:Key="TransferStateToReadableTextConverter" />
    <converters:TransferStateToVisibilityConverter x:Key="TransferStateToVisibilityConverter" />
    <converters:TransferTypeToSymbolConverter x:Key="TransferTypeToSymbolConverter" />
    <converters:NodeViewStateToVisibilityConverter x:Key="NodeViewStateToVisibilityConverter" />
    <converters:InputStateToColorConverter x:Key="InputStateToColorConverter" />
    <toolkit:BoolToVisibilityConverter x:Key="BoolToVisibilityConverter" />
    <toolkit:BoolToObjectConverter
        x:Key="InverseBoolToVisibilityConverter"
        FalseValue="Visible"
        TrueValue="Collapsed" />
    <toolkit:BoolToObjectConverter
        x:Key="InverseBoolConverter"
        FalseValue="True"
        TrueValue="False" />
    <toolkit:StringVisibilityConverter x:Key="StringVisibilityConverter" />
    <toolkit:EmptyStringToObjectConverter
        x:Key="InverseStringVisibilityConverter"
        EmptyValue="Visible"
        NotEmptyValue="Collapsed" />
    <toolkit:EmptyCollectionToObjectConverter
        x:Key="CollectionToBoolConverter"
        EmptyValue="False"
        NotEmptyValue="True" />
    <toolkit:EmptyCollectionToObjectConverter
        x:Key="InverseCollectionToBoolConverter"
        EmptyValue="True"
        NotEmptyValue="False" />
    <toolkit:CollectionVisibilityConverter x:Key="CollectionVisibilityConverter" />

    <!--  SELECTORS  -->
    <classes:NodeTemplateSelector
        x:Key="NodeTemplateSelector"
        FileItemTemplate="{StaticResource MegaNodeListViewFileItemContent}"
        FolderItemTemplate="{StaticResource MegaNodeListViewFolderItemContent}" />
    <classes:OfflineNodeTemplateSelector
        x:Key="OfflineNodeTemplateSelector"
        FileItemTemplate="{StaticResource OfflineNodeListViewFileItemContent}"
        FolderItemTemplate="{StaticResource OfflineNodeListViewFolderItemContent}" />

    <!--  TEMPLATES  -->
    <ControlTemplate x:Name="EmptyStateTemplate">
        <userControls:EmptyState
            x:Name="EmptyState"
            VerticalContentAlignment="Center"
            Background="{TemplateBinding Background}"
            Foreground="{TemplateBinding Foreground}"
            HeaderText="{Binding EmptyStateHeaderText}"
            IsVisible="{Binding ItemCollection.Items, Converter={StaticResource InverseCollectionToBoolConverter}}"
            SubHeaderMargin="0,14,0,0"
            SubHeaderText="{Binding EmptyStateSubHeaderText}">
            <userControls:EmptyState.SubHeaderForeground>
                <SolidColorBrush Opacity="0.6" Color="{ThemeResource MegaAppForeground}" />
            </userControls:EmptyState.SubHeaderForeground>
            <VisualStateManager.VisualStateGroups>
                <VisualStateGroup>
                    <VisualState x:Name="Small">
                        <VisualState.StateTriggers>
                            <AdaptiveTrigger MinWindowWidth="0" />
                        </VisualState.StateTriggers>
                        <VisualState.Setters>
                            <Setter Target="EmptyState.Padding" Value="16,0,0,16" />
                            <Setter Target="EmptyState.HeaderFontSize" Value="24" />
                            <Setter Target="EmptyState.SubHeaderFontSize" Value="16" />
                        </VisualState.Setters>
                    </VisualState>
                    <VisualState x:Name="Normal">
                        <VisualState.StateTriggers>
                            <AdaptiveTrigger MinWindowWidth="600" />
                        </VisualState.StateTriggers>
                        <VisualState.Setters>
                            <Setter Target="EmptyState.Padding" Value="97,0,0,16" />
                            <Setter Target="EmptyState.HeaderFontSize" Value="24" />
                            <Setter Target="EmptyState.SubHeaderFontSize" Value="16" />
                        </VisualState.Setters>
                    </VisualState>
                    <VisualState x:Name="Wide">
                        <VisualState.StateTriggers>
                            <AdaptiveTrigger MinWindowWidth="1200" />
                        </VisualState.StateTriggers>
                        <VisualState.Setters>
                            <Setter Target="EmptyState.Padding" Value="178,0,0,16" />
                            <Setter Target="EmptyState.HeaderFontSize" Value="44" />
                            <Setter Target="EmptyState.SubHeaderFontSize" Value="18" />
                        </VisualState.Setters>
                    </VisualState>
                </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
        </userControls:EmptyState>
    </ControlTemplate>

    <DataTemplate x:Key="SeparationPoint">
        <Ellipse
            Width="4"
            Height="4"
            Margin="8,0"
            VerticalAlignment="Center"
            Fill="{ThemeResource MegaAppForegroundBrush}"
            Opacity="0.4" />
    </DataTemplate>

    <DataTemplate x:Key="MegaPageHeaderLogo">
        <Border
            Width="44"
            Height="44"
            Background="{StaticResource MegaAppBackgroundBrush}">
            <Path
                Width="24"
                Height="24"
                Data="{StaticResource MegaIconVector}"
                Fill="{StaticResource MegaHeaderIconColorBrush}"
                FlowDirection="LeftToRight"
                Stretch="UniformToFill"
                StrokeThickness="0" />
        </Border>
    </DataTemplate>

    <DataTemplate x:Key="CameraUploadsGroupHeader">
        <Grid Margin="0,20,0,18">
            <TextBlock
                FontFamily="Segoe UI"
                FontSize="16"
                FontWeight="Normal"
                Foreground="{StaticResource MegaRedColorBrush}"
                Text="{Binding DateAsString}" />
        </Grid>
    </DataTemplate>

    <DataTemplate x:Key="CameraUploadsGroupItem">
        <Grid Margin="0,12">
            <TextBlock
                FontFamily="Segoe UI"
                FontSize="20"
                FontWeight="Normal"
                Foreground="{StaticResource MegaRedColorBrush}"
                Text="{Binding Group.DateAsString}" />
        </Grid>
    </DataTemplate>

    <DataTemplate x:Key="MegaPivoHeaderTemplate">
        <Grid>
            <TextBlock
                FontFamily="Segoe UI"
                FontSize="20"
                FontWeight="Normal"
                LineHeight="27"
                Text="{Binding}" />
        </Grid>
    </DataTemplate>

    <DataTemplate x:Key="BreadcrumbHomeTemplate">
        <Grid>
            <Viewbox MaxWidth="14" MaxHeight="14">
                <Path
                    x:Name="BreadcrumbHomeIcon"
                    Data="{Binding BreadcrumbHomeIcon}"
                    Stretch="UniformToFill">
                    <Path.Fill>
                        <SolidColorBrush Color="{ThemeResource MegaAppForeground}" />
                    </Path.Fill>
                </Path>
            </Viewbox>
        </Grid>
    </DataTemplate>

    <DataTemplate x:Key="BreadcrumbHomeMegaTemplate">
        <Grid>
            <Path
                x:Name="BreadcrumbHomeMegaIcon"
                Width="14"
                Height="14"
                Data="{Binding BreadcrumbHomeMegaIcon}"
                Stretch="UniformToFill">
                <Path.Fill>
                    <SolidColorBrush Color="{ThemeResource MegaAppForeground}" />
                </Path.Fill>
            </Path>
        </Grid>
    </DataTemplate>

    <DataTemplate x:Key="BreadcrumbHomeCloudDriveTemplate">
        <Grid>
            <Viewbox MaxWidth="14" MaxHeight="14">
                <Path
                    x:Name="BreadcrumbHomeCloudDriveIcon"
                    Data="{Binding BreadcrumbHomeCloudDriveIcon}"
                    Stretch="UniformToFill">
                    <Path.Fill>
                        <SolidColorBrush Color="{ThemeResource MegaAppForeground}" />
                    </Path.Fill>
                </Path>
            </Viewbox>
        </Grid>
    </DataTemplate>

    <DataTemplate x:Key="BreadcrumbHomeRubbishBinTemplate">
        <Grid>
            <Path
                x:Name="BreadcrumbHomeRubbishBinIcon"
                Width="14"
                Height="14"
                Data="{Binding BreadcrumbHomeRubbishBinIcon}"
                Stretch="UniformToFill">
                <Path.Fill>
                    <SolidColorBrush Color="{ThemeResource MegaAppForeground}" />
                </Path.Fill>
            </Path>
        </Grid>
    </DataTemplate>

    <DataTemplate x:Key="BreadcrumbItemTemplate">
        <Grid>
            <TextBlock Style="{ThemeResource CaptionTextBlockStyle}" Text="{Binding Name}" />
        </Grid>
    </DataTemplate>

    <ControlTemplate x:Name="AscendingOrderIcon">
        <CommandBar
            extensions:CommandBarExtensions.HideMoreButton="True"
            Background="{TemplateBinding Background}"
            Style="{StaticResource MegaCommandBarStyle}">
            <AppBarButton
                Width="36"
                Height="36"
                Click="OnButtonClick"
                Command="{Binding ItemCollection.InvertOrderCommand}"
                Style="{StaticResource MegaAppBarButtonStyle}">
                <Viewbox
                    Width="36"
                    Height="10"
                    Margin="0,0,0,12"
                    HorizontalAlignment="Center"
                    VerticalAlignment="Center">
                    <FontIcon Glyph="&#xE70E;" />
                </Viewbox>
            </AppBarButton>
        </CommandBar>
    </ControlTemplate>

    <ControlTemplate x:Name="DescendingOrderIcon">
        <CommandBar
            extensions:CommandBarExtensions.HideMoreButton="True"
            Background="{TemplateBinding Background}"
            Style="{StaticResource MegaCommandBarStyle}">
            <AppBarButton
                Width="36"
                Height="36"
                Click="OnButtonClick"
                Command="{Binding ItemCollection.InvertOrderCommand}"
                Style="{StaticResource MegaAppBarButtonStyle}">
                <Viewbox
                    Width="36"
                    Height="10"
                    Margin="0,0,0,12"
                    HorizontalAlignment="Center"
                    VerticalAlignment="Center">
                    <FontIcon Glyph="&#xE70D;" />
                </Viewbox>
            </AppBarButton>
        </CommandBar>
    </ControlTemplate>

    <ControlTemplate x:Name="SelectAllCheckBoxWithOrderTypeAndNumberOfItems">
        <CheckBox
            Margin="0,8,0,0"
            Command="{Binding ItemCollection.SelectAllCommand}"
            CommandParameter="{Binding Path=IsChecked, RelativeSource={RelativeSource Self}}"
            IsChecked="{Binding ItemCollection.HasAllItemsSelected}"
            ToolTipService.ToolTip="{Binding SelectOrDeselectAllText, Mode=OneTime}"
            Visibility="{Binding ItemCollection.IsMultiSelectActive, Converter={StaticResource BoolToVisibilityConverter}}">
            <Grid
                Margin="4,-8,0,0"
                HorizontalAlignment="Left"
                VerticalAlignment="Center">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="*" />
                </Grid.ColumnDefinitions>
                <ContentControl
                    Grid.Column="0"
                    Template="{StaticResource AscendingOrderIcon}"
                    Visibility="{Binding ItemCollection.IsCurrentOrderAscending, Converter={StaticResource BoolToVisibilityConverter}}" />
                <ContentControl
                    Grid.Column="0"
                    Template="{StaticResource DescendingOrderIcon}"
                    Visibility="{Binding ItemCollection.IsCurrentOrderAscending, Converter={StaticResource InverseBoolToVisibilityConverter}}" />
                <TextBlock
                    Grid.Column="1"
                    Margin="8,0,0,12"
                    VerticalAlignment="Center"
                    FontSize="13"
                    Foreground="{StaticResource MegaRedColorBrush}"
                    Opacity="0.8"
                    Text="{Binding OrderTypeAndNumberOfSelectedItems, Mode=OneWay}" />
            </Grid>
        </CheckBox>
    </ControlTemplate>

    <ControlTemplate x:Name="OrderTypeAndNumberOfItems">
        <Grid
            Margin="0,6,0,0"
            HorizontalAlignment="Left"
            VerticalAlignment="Center"
            Visibility="{Binding ItemCollection.IsMultiSelectActive, Converter={StaticResource InverseBoolToVisibilityConverter}}">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>
            <ContentControl
                Grid.Column="0"
                Template="{StaticResource AscendingOrderIcon}"
                Visibility="{Binding ItemCollection.IsCurrentOrderAscending, Converter={StaticResource BoolToVisibilityConverter}}" />
            <ContentControl
                Grid.Column="0"
                Template="{StaticResource DescendingOrderIcon}"
                Visibility="{Binding ItemCollection.IsCurrentOrderAscending, Converter={StaticResource InverseBoolToVisibilityConverter}}" />
            <TextBlock
                Grid.Column="1"
                Margin="8,0,0,12"
                VerticalAlignment="Center"
                FontSize="13"
                Foreground="{StaticResource MegaRedColorBrush}"
                Opacity="0.8"
                Text="{Binding OrderTypeAndNumberOfItems, Mode=OneWay}"
                Visibility="{Binding ItemCollection.HasSelectedItems, Converter={StaticResource InverseBoolToVisibilityConverter}}" />
            <TextBlock
                Grid.Column="1"
                Margin="8,0,0,12"
                VerticalAlignment="Center"
                FontSize="13"
                Foreground="{StaticResource MegaRedColorBrush}"
                Opacity="0.8"
                Text="{Binding OrderTypeAndNumberOfSelectedItems, Mode=OneWay}"
                Visibility="{Binding ItemCollection.HasSelectedItems, Converter={StaticResource BoolToVisibilityConverter}}" />
        </Grid>
    </ControlTemplate>

    <DataTemplate x:Key="MegaNodeListViewFileItemContent">
        <Border
            Margin="-12,1"
            Background="{Binding DisplayMode, ConverterParameter=0\,4, Converter={StaticResource NodeDisplayModeToColorBrushConverter}}"
            BorderBrush="{Binding DisplayMode, ConverterParameter=1\,0, Converter={StaticResource NodeDisplayModeToColorBrushConverter}}"
            BorderThickness="2,2,2,2">
            <Grid Margin="12,4" Background="Transparent">
                <FlyoutBase.AttachedFlyout>
                    <MenuFlyout>
                        <MenuFlyout.Items>
                            <MenuFlyoutItem
                                Command="{Binding OpenInformationPanelCommand}"
                                Text="{Binding InformationText}"
                                Visibility="{Binding NodeBinding, ConverterParameter='information', Converter={StaticResource NodeViewStateToVisibilityConverter}}" />
                            <MenuFlyoutItem
                                Command="{Binding PreviewCommand}"
                                IsEnabled="{Binding IsNetworkAvailable, Mode=OneWay}"
                                Text="{Binding PreviewText}"
                                Visibility="{Binding NodeBinding, ConverterParameter='preview', Converter={StaticResource NodeViewStateToVisibilityConverter}}" />
                            <MenuFlyoutItem
                                Command="{Binding DownloadCommand}"
                                IsEnabled="{Binding IsNetworkAvailable, Mode=OneWay}"
                                Text="{Binding DownloadText}"
                                Visibility="{Binding NodeBinding, ConverterParameter='download', Converter={StaticResource NodeViewStateToVisibilityConverter}}" />
                            <MenuFlyoutItem
                                Command="{Binding ImportCommand}"
                                IsEnabled="{Binding IsNetworkAvailable, Mode=OneWay}"
                                Text="{Binding ImportText}"
                                Visibility="{Binding NodeBinding, ConverterParameter='import', Converter={StaticResource NodeViewStateToVisibilityConverter}}" />
                            <MenuFlyoutItem
                                Command="{Binding GetLinkCommand}"
                                IsEnabled="{Binding IsNetworkAvailable, Mode=OneWay}"
                                Text="{Binding GetLinkText}"
                                Visibility="{Binding NodeBinding, ConverterParameter='getlink', Converter={StaticResource NodeViewStateToVisibilityConverter}}">
                                <MenuFlyoutItem.CommandParameter>
                                    <x:Boolean>True</x:Boolean>
                                </MenuFlyoutItem.CommandParameter>
                            </MenuFlyoutItem>
                            <MenuFlyoutItem
                                Command="{Binding RenameCommand}"
                                IsEnabled="{Binding IsNetworkAvailable, Mode=OneWay}"
                                Text="{Binding RenameText}"
                                Visibility="{Binding NodeBinding, ConverterParameter='rename', Converter={StaticResource NodeViewStateToVisibilityConverter}}" />
                            <MenuFlyoutItem
                                Command="{Binding CopyOrMoveCommand}"
                                IsEnabled="{Binding IsNetworkAvailable, Mode=OneWay}"
                                Text="{Binding CopyOrMoveText}"
                                Visibility="{Binding NodeBinding, ConverterParameter='copyormove', Converter={StaticResource NodeViewStateToVisibilityConverter}}" />
                            <MenuFlyoutItem
                                Command="{Binding RemoveCommand}"
                                IsEnabled="{Binding IsNetworkAvailable, Mode=OneWay}"
                                Text="{Binding RemoveText}"
                                Visibility="{Binding NodeBinding, ConverterParameter='remove', Converter={StaticResource NodeViewStateToVisibilityConverter}}" />
                        </MenuFlyout.Items>
                    </MenuFlyout>
                </FlyoutBase.AttachedFlyout>
                <interactivity:Interaction.Behaviors>
                    <core:EventTriggerBehavior EventName="RightTapped">
                        <behaviors:OpenFlyoutAction IsEnabled="{Binding Parent.IsPanelOpen, Converter={StaticResource InverseBoolConverter}}" />
                    </core:EventTriggerBehavior>
                </interactivity:Interaction.Behaviors>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="100" />
                </Grid.ColumnDefinitions>

                <Grid Grid.Column="0">
                    <Path
                        Width="36"
                        Height="36"
                        Margin="0,0,12,0"
                        HorizontalAlignment="Center"
                        VerticalAlignment="Center"
                        Data="{Binding DefaultImagePathData}"
                        Stretch="Uniform"
                        Visibility="{Binding ThumbnailImageUri, Converter={StaticResource InverseStringVisibilityConverter}}">
                        <Path.Fill>
                            <SolidColorBrush Color="{ThemeResource MegaAppForeground}" />
                        </Path.Fill>
                    </Path>
                    <Image
                        Width="36"
                        Height="36"
                        Margin="0,0,12,0"
                        HorizontalAlignment="Center"
                        VerticalAlignment="Center"
                        Stretch="UniformToFill"
                        Visibility="{Binding ThumbnailImageUri, Converter={StaticResource StringVisibilityConverter}}">
                        <Image.Source>
                            <BitmapImage
                                DecodePixelHeight="36"
                                DecodePixelType="Logical"
                                UriSource="{Binding ThumbnailImageUri}" />
                        </Image.Source>
                    </Image>
                </Grid>

                <Grid Grid.Column="1">
                    <Grid.RowDefinitions>
                        <RowDefinition />
                        <RowDefinition />
                    </Grid.RowDefinitions>
                    <TextBlock
                        x:Name="txtFileName"
                        Grid.Row="0"
                        HorizontalAlignment="Left"
                        VerticalAlignment="Center"
                        Style="{ThemeResource BaseTextBlockStyle}"
                        Text="{Binding Name}"
                        TextTrimming="CharacterEllipsis"
                        TextWrapping="NoWrap" />
                    <TextBlock
                        x:Name="txtSize"
                        Grid.Row="1"
                        HorizontalAlignment="Left"
                        VerticalAlignment="Center"
                        Opacity="0.5"
                        Style="{ThemeResource CaptionTextBlockStyle}"
                        Text="{Binding SizeText}"
                        TextWrapping="NoWrap" />
                </Grid>

                <Viewbox
                    Grid.Column="2"
                    Width="10"
                    Height="10"
                    Margin="12,0,0,0"
                    HorizontalAlignment="Center"
                    VerticalAlignment="Center"
                    Visibility="{Binding IsSavedForOffline, Converter={StaticResource BoolToVisibilityConverter}}">
                    <FontIcon Foreground="{ThemeResource MegaRedColorBrush}" Glyph="&#xE896;" />
                </Viewbox>

                <Path
                    Grid.Column="3"
                    Width="10"
                    Height="6"
                    Margin="12,0,0,0"
                    HorizontalAlignment="Center"
                    VerticalAlignment="Center"
                    Data="{Binding LinkPathData}"
                    Stretch="Uniform"
                    Visibility="{Binding IsExported, Converter={StaticResource BoolToVisibilityConverter}}">
                    <Path.Fill>
                        <SolidColorBrush Color="{ThemeResource MegaRedColor}" />
                    </Path.Fill>
                </Path>

                <TextBlock
                    x:Name="txtCreated"
                    Grid.Column="4"
                    HorizontalAlignment="Right"
                    VerticalAlignment="Center"
                    Opacity="0.5"
                    Style="{ThemeResource CaptionTextBlockStyle}"
                    Text="{Binding ModificationTime}"
                    TextWrapping="NoWrap" />
            </Grid>
        </Border>
    </DataTemplate>

    <DataTemplate x:Key="MegaNodeGridViewFileItemContent">
        <Border
            Background="{Binding DisplayMode, ConverterParameter=0\,4, Converter={StaticResource NodeDisplayModeToColorBrushConverter}}"
            BorderBrush="{Binding DisplayMode, ConverterParameter=1\,0, Converter={StaticResource NodeDisplayModeToColorBrushConverter}}"
            BorderThickness="1">
            <Grid
                Width="96"
                Margin="4"
                Background="Transparent">
                <FlyoutBase.AttachedFlyout>
                    <MenuFlyout>
                        <MenuFlyout.Items>
                            <MenuFlyoutItem
                                Command="{Binding OpenInformationPanelCommand}"
                                Text="{Binding InformationText}"
                                Visibility="{Binding NodeBinding, ConverterParameter='information', Converter={StaticResource NodeViewStateToVisibilityConverter}}" />
                            <MenuFlyoutItem
                                Command="{Binding PreviewCommand}"
                                IsEnabled="{Binding IsNetworkAvailable, Mode=OneWay}"
                                Text="{Binding PreviewText}"
                                Visibility="{Binding NodeBinding, ConverterParameter='preview', Converter={StaticResource NodeViewStateToVisibilityConverter}}" />
                            <MenuFlyoutItem
                                Command="{Binding DownloadCommand}"
                                IsEnabled="{Binding IsNetworkAvailable, Mode=OneWay}"
                                Text="{Binding DownloadText}"
                                Visibility="{Binding NodeBinding, ConverterParameter='download', Converter={StaticResource NodeViewStateToVisibilityConverter}}" />
                            <MenuFlyoutItem
                                Command="{Binding ImportCommand}"
                                IsEnabled="{Binding IsNetworkAvailable, Mode=OneWay}"
                                Text="{Binding ImportText}"
                                Visibility="{Binding NodeBinding, ConverterParameter='import', Converter={StaticResource NodeViewStateToVisibilityConverter}}" />
                            <MenuFlyoutItem
                                Command="{Binding GetLinkCommand}"
                                IsEnabled="{Binding IsNetworkAvailable, Mode=OneWay}"
                                Text="{Binding GetLinkText}"
                                Visibility="{Binding NodeBinding, ConverterParameter='getlink', Converter={StaticResource NodeViewStateToVisibilityConverter}}">
                                <MenuFlyoutItem.CommandParameter>
                                    <x:Boolean>True</x:Boolean>
                                </MenuFlyoutItem.CommandParameter>
                            </MenuFlyoutItem>
                            <MenuFlyoutItem
                                Command="{Binding RenameCommand}"
                                IsEnabled="{Binding IsNetworkAvailable, Mode=OneWay}"
                                Text="{Binding RenameText}"
                                Visibility="{Binding NodeBinding, ConverterParameter='rename', Converter={StaticResource NodeViewStateToVisibilityConverter}}" />
                            <MenuFlyoutItem
                                Command="{Binding CopyOrMoveCommand}"
                                IsEnabled="{Binding IsNetworkAvailable, Mode=OneWay}"
                                Text="{Binding CopyOrMoveText}"
                                Visibility="{Binding NodeBinding, ConverterParameter='copyormove', Converter={StaticResource NodeViewStateToVisibilityConverter}}" />
                            <MenuFlyoutItem
                                Command="{Binding RemoveCommand}"
                                IsEnabled="{Binding IsNetworkAvailable, Mode=OneWay}"
                                Text="{Binding RemoveText}"
                                Visibility="{Binding NodeBinding, ConverterParameter='remove', Converter={StaticResource NodeViewStateToVisibilityConverter}}" />
                        </MenuFlyout.Items>
                    </MenuFlyout>
                </FlyoutBase.AttachedFlyout>
                <interactivity:Interaction.Behaviors>
                    <core:EventTriggerBehavior EventName="RightTapped">
                        <behaviors:OpenFlyoutAction IsEnabled="{Binding Parent.IsPanelOpen, Converter={StaticResource InverseBoolConverter}}" />
                    </core:EventTriggerBehavior>
                </interactivity:Interaction.Behaviors>
                <Grid.RowDefinitions>
                    <RowDefinition Height="96" />
                    <RowDefinition Height="Auto" />
                </Grid.RowDefinitions>
                <Path
                    Grid.Row="0"
                    Width="64"
                    Height="64"
                    HorizontalAlignment="Center"
                    VerticalAlignment="Center"
                    Data="{Binding DefaultImagePathData}"
                    Stretch="Uniform"
                    Visibility="{Binding ThumbnailImageUri, Converter={StaticResource InverseStringVisibilityConverter}}">
                    <Path.Fill>
                        <SolidColorBrush Color="{StaticResource MegaAppForeground}" />
                    </Path.Fill>
                </Path>
                <Image
                    Grid.Row="0"
                    Width="96"
                    Height="96"
                    Stretch="UniformToFill"
                    Visibility="{Binding ThumbnailImageUri, Converter={StaticResource StringVisibilityConverter}}">
                    <Image.Source>
                        <BitmapImage
                            DecodePixelHeight="96"
                            DecodePixelType="Logical"
                            UriSource="{Binding ThumbnailImageUri}" />
                    </Image.Source>
                </Image>
                <Grid Grid.Row="1" HorizontalAlignment="Center">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*" />
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="Auto" />
                    </Grid.ColumnDefinitions>
                    <TextBlock
                        Grid.Column="0"
                        HorizontalAlignment="Stretch"
                        VerticalAlignment="Center"
                        FontSize="12"
                        Text="{Binding Name}"
                        TextAlignment="Center"
                        TextTrimming="CharacterEllipsis"
                        TextWrapping="NoWrap" />
                    <StackPanel
                        Grid.Column="1"
                        Orientation="Horizontal"
                        Visibility="{Binding IsExportedOrSavedForOffline, Converter={StaticResource BoolToVisibilityConverter}}">
                        <Ellipse
                            Width="4"
                            Height="4"
                            Margin="8,0,0,0"
                            HorizontalAlignment="Right"
                            VerticalAlignment="Center"
                            Fill="{ThemeResource MegaAppForegroundBrush}" />
                        <Viewbox
                            Width="10"
                            Height="10"
                            Margin="8,0,0,0"
                            HorizontalAlignment="Right"
                            VerticalAlignment="Center"
                            Visibility="{Binding IsSavedForOffline, Converter={StaticResource BoolToVisibilityConverter}}">
                            <FontIcon Foreground="{ThemeResource MegaRedColorBrush}" Glyph="&#xE896;" />
                        </Viewbox>
                        <Path
                            Width="10"
                            Height="6"
                            Margin="8,0,0,0"
                            HorizontalAlignment="Right"
                            VerticalAlignment="Center"
                            Data="{Binding LinkPathData}"
                            Stretch="Uniform"
                            Visibility="{Binding IsExported, Converter={StaticResource BoolToVisibilityConverter}}">
                            <Path.Fill>
                                <SolidColorBrush Color="{ThemeResource MegaRedColor}" />
                            </Path.Fill>
                        </Path>
                    </StackPanel>
                </Grid>
            </Grid>
        </Border>
    </DataTemplate>

    <DataTemplate x:Key="MegaNodeListViewFolderItemContent">
        <Border
            Margin="-12,1"
            Background="{Binding DisplayMode, ConverterParameter=0\,4, Converter={StaticResource NodeDisplayModeToColorBrushConverter}}"
            BorderBrush="{Binding DisplayMode, ConverterParameter=1\,0, Converter={StaticResource NodeDisplayModeToColorBrushConverter}}"
            BorderThickness="2,2,2,2">
            <Grid Margin="12,4" Background="Transparent">
                <FlyoutBase.AttachedFlyout>
                    <MenuFlyout>
                        <MenuFlyout.Items>
                            <MenuFlyoutItem
                                Command="{Binding OpenInformationPanelCommand}"
                                Text="{Binding InformationText}"
                                Visibility="{Binding NodeBinding, ConverterParameter='information', Converter={StaticResource NodeViewStateToVisibilityConverter}}" />
                            <MenuFlyoutItem
                                Command="{Binding DownloadCommand}"
                                IsEnabled="{Binding IsNetworkAvailable, Mode=OneWay}"
                                Text="{Binding DownloadText}"
                                Visibility="{Binding NodeBinding, ConverterParameter='download', Converter={StaticResource NodeViewStateToVisibilityConverter}}" />
                            <MenuFlyoutItem
                                Command="{Binding ImportCommand}"
                                IsEnabled="{Binding IsNetworkAvailable, Mode=OneWay}"
                                Text="{Binding ImportText}"
                                Visibility="{Binding NodeBinding, ConverterParameter='import', Converter={StaticResource NodeViewStateToVisibilityConverter}}" />
                            <MenuFlyoutItem
                                Command="{Binding GetLinkCommand}"
                                IsEnabled="{Binding IsNetworkAvailable, Mode=OneWay}"
                                Text="{Binding GetLinkText}"
                                Visibility="{Binding NodeBinding, ConverterParameter='getlink', Converter={StaticResource NodeViewStateToVisibilityConverter}}">
                                <MenuFlyoutItem.CommandParameter>
                                    <x:Boolean>True</x:Boolean>
                                </MenuFlyoutItem.CommandParameter>
                            </MenuFlyoutItem>
                            <MenuFlyoutItem
                                Command="{Binding ShareCommand}"
                                IsEnabled="{Binding IsNetworkAvailable, Mode=OneWay}"
                                Text="{Binding SharingText}"
                                Visibility="{Binding NodeBinding, ConverterParameter='share', Converter={StaticResource NodeViewStateToVisibilityConverter}}" />
                            <MenuFlyoutItem
                                Command="{Binding RenameCommand}"
                                IsEnabled="{Binding IsNetworkAvailable, Mode=OneWay}"
                                Text="{Binding RenameText}"
                                Visibility="{Binding NodeBinding, ConverterParameter='rename', Converter={StaticResource NodeViewStateToVisibilityConverter}}" />
                            <MenuFlyoutItem
                                Command="{Binding CopyOrMoveCommand}"
                                IsEnabled="{Binding IsNetworkAvailable, Mode=OneWay}"
                                Text="{Binding CopyOrMoveText}"
                                Visibility="{Binding NodeBinding, ConverterParameter='copyormove', Converter={StaticResource NodeViewStateToVisibilityConverter}}" />
                            <MenuFlyoutItem
                                Command="{Binding RemoveCommand}"
                                IsEnabled="{Binding IsNetworkAvailable, Mode=OneWay}"
                                Text="{Binding RemoveText}"
                                Visibility="{Binding NodeBinding, ConverterParameter='remove', Converter={StaticResource NodeViewStateToVisibilityConverter}}" />
                        </MenuFlyout.Items>
                    </MenuFlyout>
                </FlyoutBase.AttachedFlyout>
                <interactivity:Interaction.Behaviors>
                    <core:EventTriggerBehavior EventName="RightTapped">
                        <behaviors:OpenFlyoutAction IsEnabled="{Binding Parent.IsPanelOpen, Converter={StaticResource InverseBoolConverter}}" />
                    </core:EventTriggerBehavior>
                </interactivity:Interaction.Behaviors>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="100" />
                </Grid.ColumnDefinitions>

                <Path
                    Grid.Column="0"
                    Width="36"
                    Height="36"
                    Margin="0,0,12,0"
                    HorizontalAlignment="Center"
                    VerticalAlignment="Center"
                    Data="{Binding DefaultImagePathData}"
                    Stretch="Uniform">
                    <Path.Fill>
                        <SolidColorBrush Color="{ThemeResource MegaAppForeground}" />
                    </Path.Fill>
                </Path>

                <Grid Grid.Column="1">
                    <Grid.RowDefinitions>
                        <RowDefinition />
                        <RowDefinition />
                    </Grid.RowDefinitions>
                    <TextBlock
                        x:Name="txtFolderName"
                        Grid.Row="0"
                        HorizontalAlignment="Left"
                        VerticalAlignment="Center"
                        Style="{ThemeResource BaseTextBlockStyle}"
                        Text="{Binding Name}"
                        TextTrimming="CharacterEllipsis"
                        TextWrapping="NoWrap" />
                    <TextBlock
                        x:Name="txtCount"
                        Grid.Row="1"
                        HorizontalAlignment="Left"
                        VerticalAlignment="Center"
                        Opacity="0.5"
                        Style="{ThemeResource CaptionTextBlockStyle}"
                        Text="{Binding Contents}"
                        TextWrapping="NoWrap" />
                </Grid>

                <Viewbox
                    Grid.Column="2"
                    Width="10"
                    Height="10"
                    Margin="12,0,0,0"
                    HorizontalAlignment="Center"
                    VerticalAlignment="Center"
                    Visibility="{Binding IsSavedForOffline, Converter={StaticResource BoolToVisibilityConverter}}">
                    <FontIcon Foreground="{ThemeResource MegaRedColorBrush}" Glyph="&#xE896;" />
                </Viewbox>

                <Path
                    Grid.Column="3"
                    Width="10"
                    Height="6"
                    Margin="12,0,0,0"
                    HorizontalAlignment="Center"
                    VerticalAlignment="Center"
                    Data="{Binding LinkPathData}"
                    Stretch="Uniform"
                    Visibility="{Binding IsExported, Converter={StaticResource BoolToVisibilityConverter}}">
                    <Path.Fill>
                        <SolidColorBrush Color="{ThemeResource MegaRedColor}" />
                    </Path.Fill>
                </Path>

                <TextBlock
                    x:Name="txtCreated"
                    Grid.Column="4"
                    HorizontalAlignment="Right"
                    VerticalAlignment="Center"
                    Opacity="0.5"
                    Style="{ThemeResource CaptionTextBlockStyle}"
                    Text="{Binding CreationTime}"
                    TextWrapping="NoWrap" />
            </Grid>
        </Border>
    </DataTemplate>

    <DataTemplate x:Key="MegaNodeGridViewFolderItemContent">
        <Border
            Background="{Binding DisplayMode, ConverterParameter=0\,4, Converter={StaticResource NodeDisplayModeToColorBrushConverter}}"
            BorderBrush="{Binding DisplayMode, ConverterParameter=1\,0, Converter={StaticResource NodeDisplayModeToColorBrushConverter}}"
            BorderThickness="1">
            <Grid
                Width="96"
                Margin="4"
                Background="Transparent">
                <FlyoutBase.AttachedFlyout>
                    <MenuFlyout>
                        <MenuFlyout.Items>
                            <MenuFlyoutItem
                                Command="{Binding OpenInformationPanelCommand}"
                                Text="{Binding InformationText}"
                                Visibility="{Binding NodeBinding, ConverterParameter='information', Converter={StaticResource NodeViewStateToVisibilityConverter}}" />
                            <MenuFlyoutItem
                                Command="{Binding DownloadCommand}"
                                IsEnabled="{Binding IsNetworkAvailable, Mode=OneWay}"
                                Text="{Binding DownloadText}"
                                Visibility="{Binding NodeBinding, ConverterParameter='download', Converter={StaticResource NodeViewStateToVisibilityConverter}}" />
                            <MenuFlyoutItem
                                Command="{Binding ImportCommand}"
                                IsEnabled="{Binding IsNetworkAvailable, Mode=OneWay}"
                                Text="{Binding ImportText}"
                                Visibility="{Binding NodeBinding, ConverterParameter='import', Converter={StaticResource NodeViewStateToVisibilityConverter}}" />
                            <MenuFlyoutItem
                                Command="{Binding GetLinkCommand}"
                                IsEnabled="{Binding IsNetworkAvailable, Mode=OneWay}"
                                Text="{Binding GetLinkText}"
                                Visibility="{Binding NodeBinding, ConverterParameter='getlink', Converter={StaticResource NodeViewStateToVisibilityConverter}}">
                                <MenuFlyoutItem.CommandParameter>
                                    <x:Boolean>True</x:Boolean>
                                </MenuFlyoutItem.CommandParameter>
                            </MenuFlyoutItem>
                            <MenuFlyoutItem
                                Command="{Binding ShareCommand}"
                                IsEnabled="{Binding IsNetworkAvailable, Mode=OneWay}"
                                Text="{Binding SharingText}"
                                Visibility="{Binding NodeBinding, ConverterParameter='share', Converter={StaticResource NodeViewStateToVisibilityConverter}}" />
                            <MenuFlyoutItem
                                Command="{Binding RenameCommand}"
                                IsEnabled="{Binding IsNetworkAvailable, Mode=OneWay}"
                                Text="{Binding RenameText}"
                                Visibility="{Binding NodeBinding, ConverterParameter='rename', Converter={StaticResource NodeViewStateToVisibilityConverter}}" />
                            <MenuFlyoutItem
                                Command="{Binding CopyOrMoveCommand}"
                                IsEnabled="{Binding IsNetworkAvailable, Mode=OneWay}"
                                Text="{Binding CopyOrMoveText}"
                                Visibility="{Binding NodeBinding, ConverterParameter='copyormove', Converter={StaticResource NodeViewStateToVisibilityConverter}}" />
                            <MenuFlyoutItem
                                Command="{Binding RemoveCommand}"
                                IsEnabled="{Binding IsNetworkAvailable, Mode=OneWay}"
                                Text="{Binding RemoveText}"
                                Visibility="{Binding NodeBinding, ConverterParameter='remove', Converter={StaticResource NodeViewStateToVisibilityConverter}}" />
                        </MenuFlyout.Items>
                    </MenuFlyout>
                </FlyoutBase.AttachedFlyout>
                <interactivity:Interaction.Behaviors>
                    <core:EventTriggerBehavior EventName="RightTapped">
                        <behaviors:OpenFlyoutAction IsEnabled="{Binding Parent.IsPanelOpen, Converter={StaticResource InverseBoolConverter}}" />
                    </core:EventTriggerBehavior>
                </interactivity:Interaction.Behaviors>
                <Grid.RowDefinitions>
                    <RowDefinition Height="96" />
                    <RowDefinition Height="Auto" />
                </Grid.RowDefinitions>
                <Path
                    Width="64"
                    Height="64"
                    HorizontalAlignment="Center"
                    VerticalAlignment="Center"
                    Data="{Binding DefaultImagePathData}"
                    Stretch="Uniform">
                    <Path.Fill>
                        <SolidColorBrush Color="{StaticResource MegaAppForeground}" />
                    </Path.Fill>
                </Path>
                <Grid Grid.Row="1" HorizontalAlignment="Center">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*" />
                        <ColumnDefinition Width="Auto" />
                    </Grid.ColumnDefinitions>
                    <TextBlock
                        Grid.Column="0"
                        HorizontalAlignment="Stretch"
                        VerticalAlignment="Center"
                        FontSize="12"
                        Text="{Binding Name}"
                        TextAlignment="Center"
                        TextTrimming="CharacterEllipsis"
                        TextWrapping="NoWrap" />
                    <StackPanel
                        Grid.Column="1"
                        Orientation="Horizontal"
                        Visibility="{Binding IsExportedOrSavedForOffline, Converter={StaticResource BoolToVisibilityConverter}}">
                        <Ellipse
                            Width="4"
                            Height="4"
                            Margin="8,0,0,0"
                            HorizontalAlignment="Right"
                            VerticalAlignment="Center"
                            Fill="{ThemeResource MegaAppForegroundBrush}" />
                        <Viewbox
                            Width="10"
                            Height="10"
                            Margin="8,0,0,0"
                            HorizontalAlignment="Right"
                            VerticalAlignment="Center"
                            Visibility="{Binding IsSavedForOffline, Converter={StaticResource BoolToVisibilityConverter}}">
                            <FontIcon Foreground="{ThemeResource MegaRedColorBrush}" Glyph="&#xE896;" />
                        </Viewbox>
                        <Path
                            Width="10"
                            Height="6"
                            Margin="8,0,0,0"
                            HorizontalAlignment="Right"
                            VerticalAlignment="Center"
                            Data="{Binding LinkPathData}"
                            Stretch="Uniform"
                            Visibility="{Binding IsExported, Converter={StaticResource BoolToVisibilityConverter}}">
                            <Path.Fill>
                                <SolidColorBrush Color="{ThemeResource MegaRedColor}" />
                            </Path.Fill>
                        </Path>
                    </StackPanel>
                </Grid>
            </Grid>
        </Border>
    </DataTemplate>

    <DataTemplate x:Key="CameraUploadsListViewFileItemContent">
        <Border
            Margin="-12,1"
            Background="{Binding DisplayMode, ConverterParameter=0\,4, Converter={StaticResource NodeDisplayModeToColorBrushConverter}}"
            BorderBrush="{Binding DisplayMode, ConverterParameter=1\,0, Converter={StaticResource NodeDisplayModeToColorBrushConverter}}"
            BorderThickness="2,2,2,2">
            <Grid Margin="12,4" Background="Transparent">
                <FlyoutBase.AttachedFlyout>
                    <MenuFlyout>
                        <MenuFlyout.Items>
                            <MenuFlyoutItem
                                Command="{Binding OpenInformationPanelCommand}"
                                Text="{Binding InformationText}"
                                Visibility="{Binding NodeBinding, ConverterParameter='information', Converter={StaticResource NodeViewStateToVisibilityConverter}}" />
                            <MenuFlyoutItem
                                Command="{Binding PreviewCommand}"
                                IsEnabled="{Binding IsNetworkAvailable, Mode=OneWay}"
                                Text="{Binding PreviewText}"
                                Visibility="{Binding NodeBinding, ConverterParameter='preview', Converter={StaticResource NodeViewStateToVisibilityConverter}}" />
                            <MenuFlyoutItem
                                Command="{Binding DownloadCommand}"
                                IsEnabled="{Binding IsNetworkAvailable, Mode=OneWay}"
                                Text="{Binding DownloadText}"
                                Visibility="{Binding NodeBinding, ConverterParameter='download', Converter={StaticResource NodeViewStateToVisibilityConverter}}" />
                            <MenuFlyoutItem
                                Command="{Binding GetLinkCommand}"
                                IsEnabled="{Binding IsNetworkAvailable, Mode=OneWay}"
                                Text="{Binding GetLinkText}"
                                Visibility="{Binding NodeBinding, ConverterParameter='getlink', Converter={StaticResource NodeViewStateToVisibilityConverter}}">
                                <MenuFlyoutItem.CommandParameter>
                                    <x:Boolean>True</x:Boolean>
                                </MenuFlyoutItem.CommandParameter>
                            </MenuFlyoutItem>
                            <MenuFlyoutItem
                                Command="{Binding RenameCommand}"
                                IsEnabled="{Binding IsNetworkAvailable, Mode=OneWay}"
                                Text="{Binding RenameText}"
                                Visibility="{Binding NodeBinding, ConverterParameter='rename', Converter={StaticResource NodeViewStateToVisibilityConverter}}" />
                            <MenuFlyoutItem
                                Command="{Binding CopyOrMoveCommand}"
                                IsEnabled="{Binding IsNetworkAvailable, Mode=OneWay}"
                                Text="{Binding CopyOrMoveText}"
                                Visibility="{Binding NodeBinding, ConverterParameter='copyormove', Converter={StaticResource NodeViewStateToVisibilityConverter}}" />
                            <MenuFlyoutItem
                                Command="{Binding RemoveCommand}"
                                IsEnabled="{Binding IsNetworkAvailable, Mode=OneWay}"
                                Text="{Binding RemoveText}"
                                Visibility="{Binding NodeBinding, ConverterParameter='remove', Converter={StaticResource NodeViewStateToVisibilityConverter}}" />
                        </MenuFlyout.Items>
                    </MenuFlyout>
                </FlyoutBase.AttachedFlyout>
                <interactivity:Interaction.Behaviors>
                    <core:EventTriggerBehavior EventName="RightTapped">
                        <behaviors:OpenFlyoutAction IsEnabled="{Binding Parent.IsPanelOpen, Converter={StaticResource InverseBoolConverter}}" />
                    </core:EventTriggerBehavior>
                </interactivity:Interaction.Behaviors>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition />
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="Auto" />
                </Grid.ColumnDefinitions>

                <Grid Grid.Column="0">
                    <Path
                        Width="36"
                        Height="36"
                        Margin="0,0,12,0"
                        HorizontalAlignment="Center"
                        VerticalAlignment="Center"
                        Data="{Binding DefaultImagePathData}"
                        Stretch="Uniform"
                        Visibility="{Binding ThumbnailImageUri, Converter={StaticResource InverseStringVisibilityConverter}}">
                        <Path.Fill>
                            <SolidColorBrush Color="{ThemeResource MegaAppForeground}" />
                        </Path.Fill>
                    </Path>
                    <Image
                        Width="36"
                        Height="36"
                        Margin="0,0,12,0"
                        HorizontalAlignment="Center"
                        VerticalAlignment="Center"
                        Canvas.ZIndex="1"
                        Stretch="UniformToFill"
                        Visibility="{Binding ThumbnailImageUri, Converter={StaticResource StringVisibilityConverter}}">
                        <Image.Source>
                            <BitmapImage
                                DecodePixelHeight="36"
                                DecodePixelType="Logical"
                                UriSource="{Binding ThumbnailImageUri}" />
                        </Image.Source>
                    </Image>
                </Grid>

                <TextBlock
                    x:Name="txtFileName"
                    Grid.Column="1"
                    HorizontalAlignment="Left"
                    VerticalAlignment="Center"
                    Style="{ThemeResource BaseTextBlockStyle}"
                    Text="{Binding Name}"
                    TextTrimming="CharacterEllipsis"
                    TextWrapping="NoWrap" />
                <TextBlock
                    x:Name="txtSize"
                    Grid.Column="2"
                    Margin="10,0,10,0"
                    HorizontalAlignment="Left"
                    VerticalAlignment="Center"
                    Style="{ThemeResource CaptionTextBlockStyle}"
                    Text="{Binding SizeText}"
                    TextWrapping="NoWrap" />
                <TextBlock
                    x:Name="txtType"
                    Grid.Column="3"
                    Margin="10,0,10,0"
                    HorizontalAlignment="Left"
                    VerticalAlignment="Center"
                    Style="{ThemeResource CaptionTextBlockStyle}"
                    Text="{Binding FileType}"
                    TextWrapping="NoWrap" />
                <TextBlock
                    x:Name="txtCreated"
                    Grid.Column="4"
                    Margin="10,0,10,0"
                    HorizontalAlignment="Left"
                    VerticalAlignment="Center"
                    Style="{ThemeResource CaptionTextBlockStyle}"
                    Text="{Binding ModificationTime}"
                    TextWrapping="NoWrap" />
            </Grid>
        </Border>
    </DataTemplate>

    <DataTemplate x:Key="CameraUploadsGridViewFileItemContent">
        <Border
            Background="{Binding DisplayMode, ConverterParameter=0\,4, Converter={StaticResource NodeDisplayModeToColorBrushConverter}}"
            BorderBrush="{Binding DisplayMode, ConverterParameter=1\,0, Converter={StaticResource NodeDisplayModeToColorBrushConverter}}"
            BorderThickness="1">
            <Grid
                Width="130"
                Height="130"
                Background="Transparent">
                <FlyoutBase.AttachedFlyout>
                    <MenuFlyout>
                        <MenuFlyout.Items>
                            <MenuFlyoutItem
                                Command="{Binding OpenInformationPanelCommand}"
                                Text="{Binding InformationText}"
                                Visibility="{Binding NodeBinding, ConverterParameter='information', Converter={StaticResource NodeViewStateToVisibilityConverter}}" />
                            <MenuFlyoutItem
                                Command="{Binding PreviewCommand}"
                                IsEnabled="{Binding IsNetworkAvailable, Mode=OneWay}"
                                Text="{Binding PreviewText}"
                                Visibility="{Binding NodeBinding, ConverterParameter='preview', Converter={StaticResource NodeViewStateToVisibilityConverter}}" />
                            <MenuFlyoutItem
                                Command="{Binding DownloadCommand}"
                                IsEnabled="{Binding IsNetworkAvailable, Mode=OneWay}"
                                Text="{Binding DownloadText}"
                                Visibility="{Binding NodeBinding, ConverterParameter='download', Converter={StaticResource NodeViewStateToVisibilityConverter}}" />
                            <MenuFlyoutItem
                                Command="{Binding GetLinkCommand}"
                                IsEnabled="{Binding IsNetworkAvailable, Mode=OneWay}"
                                Text="{Binding GetLinkText}"
                                Visibility="{Binding NodeBinding, ConverterParameter='getlink', Converter={StaticResource NodeViewStateToVisibilityConverter}}">
                                <MenuFlyoutItem.CommandParameter>
                                    <x:Boolean>True</x:Boolean>
                                </MenuFlyoutItem.CommandParameter>
                            </MenuFlyoutItem>
                            <MenuFlyoutItem
                                Command="{Binding RenameCommand}"
                                IsEnabled="{Binding IsNetworkAvailable, Mode=OneWay}"
                                Text="{Binding RenameText}"
                                Visibility="{Binding NodeBinding, ConverterParameter='rename', Converter={StaticResource NodeViewStateToVisibilityConverter}}" />
                            <MenuFlyoutItem
                                Command="{Binding CopyOrMoveCommand}"
                                IsEnabled="{Binding IsNetworkAvailable, Mode=OneWay}"
                                Text="{Binding CopyOrMoveText}"
                                Visibility="{Binding NodeBinding, ConverterParameter='copyormove', Converter={StaticResource NodeViewStateToVisibilityConverter}}" />
                            <MenuFlyoutItem
                                Command="{Binding RemoveCommand}"
                                IsEnabled="{Binding IsNetworkAvailable, Mode=OneWay}"
                                Text="{Binding RemoveText}"
                                Visibility="{Binding NodeBinding, ConverterParameter='remove', Converter={StaticResource NodeViewStateToVisibilityConverter}}" />
                        </MenuFlyout.Items>
                    </MenuFlyout>
                </FlyoutBase.AttachedFlyout>
                <interactivity:Interaction.Behaviors>
                    <core:EventTriggerBehavior EventName="RightTapped">
                        <behaviors:OpenFlyoutAction IsEnabled="{Binding Parent.IsPanelOpen, Converter={StaticResource InverseBoolConverter}}" />
                    </core:EventTriggerBehavior>
                </interactivity:Interaction.Behaviors>
                <Path
                    Grid.Row="0"
                    Width="96"
                    Height="96"
                    HorizontalAlignment="Center"
                    VerticalAlignment="Center"
                    Data="{Binding DefaultImagePathData}"
                    Stretch="Uniform"
                    Visibility="{Binding ThumbnailImageUri, Converter={StaticResource InverseStringVisibilityConverter}}">
                    <Path.Fill>
                        <SolidColorBrush Color="{StaticResource MegaAppForeground}" />
                    </Path.Fill>
                </Path>
                <Image
                    Width="130"
                    Height="130"
                    Stretch="UniformToFill"
                    Visibility="{Binding ThumbnailImageUri, Converter={StaticResource StringVisibilityConverter}}">
                    <Image.Source>
                        <BitmapImage
                            DecodePixelHeight="130"
                            DecodePixelType="Logical"
                            UriSource="{Binding ThumbnailImageUri}" />
                    </Image.Source>
                </Image>
            </Grid>
        </Border>
    </DataTemplate>

    <DataTemplate x:Key="OfflineNodeListViewFileItemContent">
        <Border
            Margin="-12,1"
            Background="{Binding DisplayMode, ConverterParameter=0\,4, Converter={StaticResource NodeDisplayModeToColorBrushConverter}}"
            BorderBrush="{Binding DisplayMode, ConverterParameter=1\,0, Converter={StaticResource NodeDisplayModeToColorBrushConverter}}"
            BorderThickness="2,2,2,2">
            <Grid Margin="12,4" Background="Transparent">
                <FlyoutBase.AttachedFlyout>
                    <MenuFlyout>
                        <MenuFlyout.Items>
                            <!--<MenuFlyoutItem
                                Command="{Binding OpenInformationPanelCommand}"
                                Text="{Binding InformationText}"
                                Visibility="{Binding NodeBinding, ConverterParameter='information', Converter={StaticResource NodeViewStateToVisibilityConverter}}" />
                            <MenuFlyoutItem
                                Command="{Binding PreviewCommand}"
                                Text="{Binding PreviewText}"
                                Visibility="{Binding NodeBinding, ConverterParameter='preview', Converter={StaticResource NodeViewStateToVisibilityConverter}}" />-->
                            <MenuFlyoutItem
                                Command="{Binding RemoveFromOfflineCommand}"
                                Text="{Binding RemoveFromOfflineText}"
                                Visibility="{Binding NodeBinding, ConverterParameter='remove', Converter={StaticResource NodeViewStateToVisibilityConverter}}" />
                        </MenuFlyout.Items>
                    </MenuFlyout>
                </FlyoutBase.AttachedFlyout>
                <interactivity:Interaction.Behaviors>
                    <core:EventTriggerBehavior EventName="RightTapped">
                        <behaviors:OpenFlyoutAction IsEnabled="{Binding Parent.IsFlyoutActionAvailable}" />
                    </core:EventTriggerBehavior>
                </interactivity:Interaction.Behaviors>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="100" />
                </Grid.ColumnDefinitions>

                <Grid Grid.Column="0">
                    <Path
                        Width="36"
                        Height="36"
                        Margin="0,0,12,0"
                        HorizontalAlignment="Center"
                        VerticalAlignment="Center"
                        Data="{Binding DefaultImagePathData}"
                        Stretch="Uniform"
                        Visibility="{Binding ThumbnailImageUri, Converter={StaticResource InverseStringVisibilityConverter}}">
                        <Path.Fill>
                            <SolidColorBrush Color="{ThemeResource MegaAppForeground}" />
                        </Path.Fill>
                    </Path>
                    <Image
                        Width="36"
                        Height="36"
                        Margin="0,0,12,0"
                        HorizontalAlignment="Center"
                        VerticalAlignment="Center"
                        Stretch="UniformToFill"
                        Visibility="{Binding ThumbnailImageUri, Converter={StaticResource StringVisibilityConverter}}">
                        <Image.Source>
                            <BitmapImage
                                DecodePixelHeight="36"
                                DecodePixelType="Logical"
                                UriSource="{Binding ThumbnailImageUri}" />
                        </Image.Source>
                    </Image>
                </Grid>

                <Grid Grid.Column="1">
                    <Grid.RowDefinitions>
                        <RowDefinition />
                        <RowDefinition />
                    </Grid.RowDefinitions>
                    <TextBlock
                        x:Name="txtFileName"
                        Grid.Row="0"
                        HorizontalAlignment="Left"
                        VerticalAlignment="Center"
                        Style="{ThemeResource BaseTextBlockStyle}"
                        Text="{Binding Name}"
                        TextTrimming="CharacterEllipsis"
                        TextWrapping="NoWrap" />
                    <TextBlock
                        x:Name="txtSize"
                        Grid.Row="1"
                        HorizontalAlignment="Left"
                        VerticalAlignment="Center"
                        Opacity="0.5"
                        Style="{ThemeResource CaptionTextBlockStyle}"
                        Text="{Binding SizeText}"
                        TextWrapping="NoWrap" />
                </Grid>
                <TextBlock
                    x:Name="txtCreated"
                    Grid.Column="2"
                    HorizontalAlignment="Right"
                    VerticalAlignment="Center"
                    Opacity="0.5"
                    Style="{ThemeResource CaptionTextBlockStyle}"
                    Text="{Binding ModificationTime}"
                    TextWrapping="NoWrap" />
            </Grid>
        </Border>
    </DataTemplate>

    <DataTemplate x:Key="OfflineNodeGridViewFileItemContent">
        <Border
            Background="{Binding DisplayMode, ConverterParameter=0\,4, Converter={StaticResource NodeDisplayModeToColorBrushConverter}}"
            BorderBrush="{Binding DisplayMode, ConverterParameter=1\,0, Converter={StaticResource NodeDisplayModeToColorBrushConverter}}"
            BorderThickness="1">
            <Grid
                Width="96"
                Margin="4"
                Background="Transparent">
                <FlyoutBase.AttachedFlyout>
                    <MenuFlyout>
                        <MenuFlyout.Items>
                            <!--<MenuFlyoutItem
                                Command="{Binding OpenInformationPanelCommand}"
                                Text="{Binding InformationText}"
                                Visibility="{Binding NodeBinding, ConverterParameter='information', Converter={StaticResource NodeViewStateToVisibilityConverter}}" />
                            <MenuFlyoutItem
                                Command="{Binding PreviewCommand}"
                                Text="{Binding PreviewText}"
                                Visibility="{Binding NodeBinding, ConverterParameter='preview', Converter={StaticResource NodeViewStateToVisibilityConverter}}" />-->
                            <MenuFlyoutItem
                                Command="{Binding RemoveFromOfflineCommand}"
                                Text="{Binding RemoveFromOfflineText}"
                                Visibility="{Binding NodeBinding, ConverterParameter='remove', Converter={StaticResource NodeViewStateToVisibilityConverter}}" />
                        </MenuFlyout.Items>
                    </MenuFlyout>
                </FlyoutBase.AttachedFlyout>
                <interactivity:Interaction.Behaviors>
                    <core:EventTriggerBehavior EventName="RightTapped">
                        <behaviors:OpenFlyoutAction IsEnabled="{Binding Parent.IsFlyoutActionAvailable}" />
                    </core:EventTriggerBehavior>
                </interactivity:Interaction.Behaviors>
                <Grid.RowDefinitions>
                    <RowDefinition Height="96" />
                    <RowDefinition Height="Auto" />
                </Grid.RowDefinitions>
                <Path
                    Grid.Row="0"
                    Width="64"
                    Height="64"
                    HorizontalAlignment="Center"
                    VerticalAlignment="Center"
                    Data="{Binding DefaultImagePathData}"
                    Stretch="Uniform"
                    Visibility="{Binding ThumbnailImageUri, Converter={StaticResource InverseStringVisibilityConverter}}">
                    <Path.Fill>
                        <SolidColorBrush Color="{StaticResource MegaAppForeground}" />
                    </Path.Fill>
                </Path>
                <Image
                    Grid.Row="0"
                    Width="96"
                    Height="96"
                    Stretch="UniformToFill"
                    Visibility="{Binding ThumbnailImageUri, Converter={StaticResource StringVisibilityConverter}}">
                    <Image.Source>
                        <BitmapImage
                            DecodePixelHeight="96"
                            DecodePixelType="Logical"
                            UriSource="{Binding ThumbnailImageUri}" />
                    </Image.Source>
                </Image>
                <TextBlock
                    Grid.Row="1"
                    Grid.Column="0"
                    HorizontalAlignment="Stretch"
                    VerticalAlignment="Center"
                    FontSize="12"
                    Text="{Binding Name}"
                    TextAlignment="Center"
                    TextTrimming="CharacterEllipsis"
                    TextWrapping="NoWrap" />
            </Grid>
        </Border>
    </DataTemplate>

    <DataTemplate x:Key="OfflineNodeListViewFolderItemContent">
        <Border
            Margin="-12,1"
            Background="{Binding DisplayMode, ConverterParameter=0\,4, Converter={StaticResource NodeDisplayModeToColorBrushConverter}}"
            BorderBrush="{Binding DisplayMode, ConverterParameter=1\,0, Converter={StaticResource NodeDisplayModeToColorBrushConverter}}"
            BorderThickness="2,2,2,2">
            <Grid Margin="12,4" Background="Transparent">
                <FlyoutBase.AttachedFlyout>
                    <MenuFlyout>
                        <MenuFlyout.Items>
                            <!--<MenuFlyoutItem
                                Command="{Binding OpenInformationPanelCommand}"
                                Text="{Binding InformationText}"
                                Visibility="{Binding NodeBinding, ConverterParameter='information', Converter={StaticResource NodeViewStateToVisibilityConverter}}" />-->
                            <MenuFlyoutItem
                                Command="{Binding RemoveFromOfflineCommand}"
                                Text="{Binding RemoveFromOfflineText}"
                                Visibility="{Binding NodeBinding, ConverterParameter='remove', Converter={StaticResource NodeViewStateToVisibilityConverter}}" />
                        </MenuFlyout.Items>
                    </MenuFlyout>
                </FlyoutBase.AttachedFlyout>
                <interactivity:Interaction.Behaviors>
                    <core:EventTriggerBehavior EventName="RightTapped">
                        <behaviors:OpenFlyoutAction IsEnabled="{Binding Parent.IsFlyoutActionAvailable}" />
                    </core:EventTriggerBehavior>
                </interactivity:Interaction.Behaviors>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="100" />
                </Grid.ColumnDefinitions>

                <Path
                    Grid.Column="0"
                    Width="36"
                    Height="36"
                    Margin="0,0,12,0"
                    HorizontalAlignment="Center"
                    VerticalAlignment="Center"
                    Data="{Binding DefaultImagePathData}"
                    Stretch="Uniform">
                    <Path.Fill>
                        <SolidColorBrush Color="{ThemeResource MegaAppForeground}" />
                    </Path.Fill>
                </Path>

                <Grid Grid.Column="1">
                    <Grid.RowDefinitions>
                        <RowDefinition />
                        <RowDefinition />
                    </Grid.RowDefinitions>
                    <TextBlock
                        x:Name="txtFolderName"
                        Grid.Row="0"
                        HorizontalAlignment="Left"
                        VerticalAlignment="Center"
                        Style="{ThemeResource BaseTextBlockStyle}"
                        Text="{Binding Name}"
                        TextTrimming="CharacterEllipsis"
                        TextWrapping="NoWrap" />
                    <TextBlock
                        x:Name="txtCount"
                        Grid.Row="1"
                        HorizontalAlignment="Left"
                        VerticalAlignment="Center"
                        Opacity="0.5"
                        Style="{ThemeResource CaptionTextBlockStyle}"
                        Text="{Binding Contents}"
                        TextWrapping="NoWrap" />
                </Grid>
                <TextBlock
                    x:Name="txtCreated"
                    Grid.Column="2"
                    HorizontalAlignment="Right"
                    VerticalAlignment="Center"
                    Opacity="0.5"
                    Style="{ThemeResource CaptionTextBlockStyle}"
                    Text="{Binding CreationTime}"
                    TextWrapping="NoWrap" />
            </Grid>
        </Border>
    </DataTemplate>

    <DataTemplate x:Key="OfflineNodeGridViewFolderItemContent">
        <Border
            Background="{Binding DisplayMode, ConverterParameter=0\,4, Converter={StaticResource NodeDisplayModeToColorBrushConverter}}"
            BorderBrush="{Binding DisplayMode, ConverterParameter=1\,0, Converter={StaticResource NodeDisplayModeToColorBrushConverter}}"
            BorderThickness="1">
            <Grid
                Width="96"
                Margin="4"
                Background="Transparent">
                <FlyoutBase.AttachedFlyout>
                    <MenuFlyout>
                        <MenuFlyout.Items>
                            <!--<MenuFlyoutItem
                                Command="{Binding OpenInformationPanelCommand}"
                                Text="{Binding InformationText}"
                                Visibility="{Binding NodeBinding, ConverterParameter='information', Converter={StaticResource NodeViewStateToVisibilityConverter}}" />-->
                            <MenuFlyoutItem
                                Command="{Binding RemoveFromOfflineCommand}"
                                Text="{Binding RemoveFromOfflineText}"
                                Visibility="{Binding NodeBinding, ConverterParameter='remove', Converter={StaticResource NodeViewStateToVisibilityConverter}}" />
                        </MenuFlyout.Items>
                    </MenuFlyout>
                </FlyoutBase.AttachedFlyout>
                <interactivity:Interaction.Behaviors>
                    <core:EventTriggerBehavior EventName="RightTapped">
                        <behaviors:OpenFlyoutAction IsEnabled="{Binding Parent.IsFlyoutActionAvailable}" />
                    </core:EventTriggerBehavior>
                </interactivity:Interaction.Behaviors>
                <Grid.RowDefinitions>
                    <RowDefinition Height="96" />
                    <RowDefinition Height="Auto" />
                </Grid.RowDefinitions>
                <Path
                    Width="64"
                    Height="64"
                    HorizontalAlignment="Center"
                    VerticalAlignment="Center"
                    Data="{Binding DefaultImagePathData}"
                    Stretch="Uniform">
                    <Path.Fill>
                        <SolidColorBrush Color="{StaticResource MegaAppForeground}" />
                    </Path.Fill>
                </Path>
                <TextBlock
                    Grid.Row="1"
                    Grid.Column="0"
                    HorizontalAlignment="Stretch"
                    VerticalAlignment="Center"
                    FontSize="12"
                    Text="{Binding Name}"
                    TextAlignment="Center"
                    TextTrimming="CharacterEllipsis"
                    TextWrapping="NoWrap" />
            </Grid>
        </Border>
    </DataTemplate>

    <DataTemplate x:Key="MegaContactIncomingSharedItemListViewDesktop">
        <Border
            Margin="-12,1"
            Background="{Binding DisplayMode, ConverterParameter=0\,4, Converter={StaticResource NodeDisplayModeToColorBrushConverter}}"
            BorderBrush="{Binding DisplayMode, ConverterParameter=1\,0, Converter={StaticResource NodeDisplayModeToColorBrushConverter}}"
            BorderThickness="2,2,2,2">
            <Grid Margin="12,4" Background="Transparent">
                <FlyoutBase.AttachedFlyout>
                    <MenuFlyout>
                        <MenuFlyout.Items>
                            <MenuFlyoutItem
                                Command="{Binding DownloadCommand}"
                                IsEnabled="{Binding IsNetworkAvailable, Mode=OneWay}"
                                Text="{Binding DownloadText}" />
                            <MenuFlyoutItem
                                Command="{Binding RenameCommand}"
                                IsEnabled="{Binding IsNetworkAvailable, Mode=OneWay}"
                                Text="{Binding RenameText}"
                                Visibility="{Binding AllowRename, Converter={StaticResource BoolToVisibilityConverter}}" />
                            <MenuFlyoutItem
                                Command="{Binding CopyOrMoveCommand}"
                                IsEnabled="{Binding IsNetworkAvailable, Mode=OneWay}"
                                Text="{Binding CopyText}" />
                            <MenuFlyoutItem
                                Command="{Binding LeaveShareCommand}"
                                Foreground="{StaticResource MegaRedColorBrush}"
                                IsEnabled="{Binding IsNetworkAvailable, Mode=OneWay}"
                                Text="{Binding LeaveShareText}" />
                        </MenuFlyout.Items>
                    </MenuFlyout>
                </FlyoutBase.AttachedFlyout>
                <interactivity:Interaction.Behaviors>
                    <core:EventTriggerBehavior EventName="RightTapped">
                        <behaviors:OpenFlyoutAction IsEnabled="True" />
                    </core:EventTriggerBehavior>
                </interactivity:Interaction.Behaviors>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="Auto" MinWidth="80" />
                </Grid.ColumnDefinitions>
                <Path
                    Grid.Column="0"
                    Width="36"
                    Height="36"
                    Margin="0,0,12,0"
                    HorizontalAlignment="Center"
                    VerticalAlignment="Center"
                    Data="{Binding DefaultImagePathData}"
                    Stretch="Uniform">
                    <Path.Fill>
                        <SolidColorBrush Color="{ThemeResource MegaAppForeground}" />
                    </Path.Fill>
                </Path>
                <Grid Grid.Column="1">
                    <Grid.RowDefinitions>
                        <RowDefinition />
                        <RowDefinition />
                    </Grid.RowDefinitions>
                    <TextBlock
                        Grid.Row="0"
                        HorizontalAlignment="Left"
                        VerticalAlignment="Center"
                        FontSize="14"
                        Text="{Binding Name}"
                        TextTrimming="CharacterEllipsis"
                        TextWrapping="NoWrap" />
                    <TextBlock
                        Grid.Row="1"
                        HorizontalAlignment="Left"
                        VerticalAlignment="Center"
                        FontSize="13"
                        Opacity="0.5"
                        Text="{Binding Contents}"
                        TextWrapping="NoWrap" />
                </Grid>
                <TextBlock
                    Grid.Column="2"
                    HorizontalAlignment="Right"
                    VerticalAlignment="Center"
                    FontSize="14"
                    Opacity="0.9"
                    Text="{Binding ModificationTime}"
                    TextWrapping="NoWrap" />
                <Path
                    Grid.Column="3"
                    Width="12"
                    Height="12"
                    Margin="46,0,18,0"
                    HorizontalAlignment="Center"
                    VerticalAlignment="Center"
                    Data="{Binding AccessLevel.AccessLevelPathData}"
                    Opacity="0.9"
                    Stretch="Uniform">
                    <Path.Fill>
                        <SolidColorBrush Color="{ThemeResource MegaAppForeground}" />
                    </Path.Fill>
                </Path>
                <TextBlock
                    Grid.Column="4"
                    HorizontalAlignment="Left"
                    VerticalAlignment="Center"
                    FontSize="14"
                    Opacity="0.9"
                    Text="{Binding AccessLevel.AccessLevelText}"
                    TextWrapping="NoWrap" />
            </Grid>
        </Border>
    </DataTemplate>

    <DataTemplate x:Key="MegaIncomingSharedItemListViewDesktop">
        <Border
            Margin="-12,1"
            Background="{Binding DisplayMode, ConverterParameter=0\,4, Converter={StaticResource NodeDisplayModeToColorBrushConverter}}"
            BorderBrush="{Binding DisplayMode, ConverterParameter=1\,0, Converter={StaticResource NodeDisplayModeToColorBrushConverter}}"
            BorderThickness="2,2,2,2">
            <Grid Margin="12,4" Background="Transparent">
                <FlyoutBase.AttachedFlyout>
                    <MenuFlyout>
                        <MenuFlyout.Items>
                            <MenuFlyoutItem
                                Command="{Binding OpenContentPanelCommand}"
                                Text="{Binding OpenText}"
                                Visibility="{Binding OnlyOneSelectedItem, Converter={StaticResource BoolToVisibilityConverter}}" />
                            <MenuFlyoutItem
                                Command="{Binding OpenInformationPanelCommand}"
                                Text="{Binding InformationText}"
                                Visibility="{Binding OnlyOneSelectedItem, Converter={StaticResource BoolToVisibilityConverter}}" />
                            <MenuFlyoutItem
                                Command="{Binding DownloadCommand}"
                                IsEnabled="{Binding IsNetworkAvailable, Mode=OneWay}"
                                Text="{Binding DownloadText}" />
                            <MenuFlyoutItem
                                Command="{Binding RenameCommand}"
                                IsEnabled="{Binding IsNetworkAvailable, Mode=OneWay}"
                                Text="{Binding RenameText}"
                                Visibility="{Binding AllowRename, Converter={StaticResource BoolToVisibilityConverter}}" />
                            <MenuFlyoutItem
                                Command="{Binding CopyOrMoveCommand}"
                                IsEnabled="{Binding IsNetworkAvailable, Mode=OneWay}"
                                Text="{Binding CopyText}" />
                            <MenuFlyoutItem
                                Command="{Binding LeaveShareCommand}"
                                Foreground="{StaticResource MegaRedColorBrush}"
                                IsEnabled="{Binding IsNetworkAvailable, Mode=OneWay}"
                                Text="{Binding LeaveShareText}" />
                        </MenuFlyout.Items>
                    </MenuFlyout>
                </FlyoutBase.AttachedFlyout>
                <interactivity:Interaction.Behaviors>
                    <core:EventTriggerBehavior EventName="RightTapped">
                        <behaviors:OpenFlyoutAction IsEnabled="{Binding IsPanelOpen, Converter={StaticResource InverseBoolConverter}}" />
                    </core:EventTriggerBehavior>
                </interactivity:Interaction.Behaviors>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="Auto" MinWidth="80" />
                </Grid.ColumnDefinitions>
                <Path
                    Grid.Column="0"
                    Width="36"
                    Height="36"
                    Margin="0,0,12,0"
                    HorizontalAlignment="Center"
                    VerticalAlignment="Center"
                    Data="{Binding DefaultImagePathData}"
                    Stretch="Uniform">
                    <Path.Fill>
                        <SolidColorBrush Color="{ThemeResource MegaAppForeground}" />
                    </Path.Fill>
                </Path>
                <Grid Grid.Column="1">
                    <Grid.RowDefinitions>
                        <RowDefinition />
                        <RowDefinition />
                    </Grid.RowDefinitions>
                    <TextBlock
                        Grid.Row="0"
                        HorizontalAlignment="Left"
                        VerticalAlignment="Center"
                        FontSize="14"
                        Text="{Binding Name}"
                        TextTrimming="CharacterEllipsis"
                        TextWrapping="NoWrap" />
                    <TextBlock
                        Grid.Row="1"
                        HorizontalAlignment="Left"
                        VerticalAlignment="Center"
                        FontSize="13"
                        Opacity="0.5"
                        Text="{Binding Owner}"
                        TextWrapping="NoWrap" />
                </Grid>
                <TextBlock
                    Grid.Column="2"
                    HorizontalAlignment="Right"
                    VerticalAlignment="Center"
                    FontSize="14"
                    Opacity="0.9"
                    Text="{Binding ModificationTime}"
                    TextWrapping="NoWrap" />
                <Path
                    Grid.Column="3"
                    Width="12"
                    Height="12"
                    Margin="46,0,18,0"
                    HorizontalAlignment="Center"
                    VerticalAlignment="Center"
                    Data="{Binding AccessLevel.AccessLevelPathData}"
                    Opacity="0.9"
                    Stretch="Uniform">
                    <Path.Fill>
                        <SolidColorBrush Color="{ThemeResource MegaAppForeground}" />
                    </Path.Fill>
                </Path>
                <TextBlock
                    Grid.Column="4"
                    HorizontalAlignment="Left"
                    VerticalAlignment="Center"
                    FontSize="14"
                    Opacity="0.9"
                    Text="{Binding AccessLevel.AccessLevelText}"
                    TextWrapping="NoWrap" />
            </Grid>
        </Border>
    </DataTemplate>

    <DataTemplate x:Key="MegaIncomingSharedItemListViewMobile">
        <Border
            Margin="-12,1"
            Background="{Binding DisplayMode, ConverterParameter=0\,4, Converter={StaticResource NodeDisplayModeToColorBrushConverter}}"
            BorderBrush="{Binding DisplayMode, ConverterParameter=1\,0, Converter={StaticResource NodeDisplayModeToColorBrushConverter}}"
            BorderThickness="2,2,2,2">
            <Grid Margin="12,4" Background="Transparent">
                <FlyoutBase.AttachedFlyout>
                    <MenuFlyout>
                        <MenuFlyout.Items>
                            <MenuFlyoutItem
                                Command="{Binding OpenContentPanelCommand}"
                                Text="{Binding OpenText}"
                                Visibility="{Binding OnlyOneSelectedItem, Converter={StaticResource BoolToVisibilityConverter}}" />
                            <MenuFlyoutItem
                                Command="{Binding OpenInformationPanelCommand}"
                                Text="{Binding InformationText}"
                                Visibility="{Binding OnlyOneSelectedItem, Converter={StaticResource BoolToVisibilityConverter}}" />
                            <MenuFlyoutItem
                                Command="{Binding DownloadCommand}"
                                IsEnabled="{Binding IsNetworkAvailable, Mode=OneWay}"
                                Text="{Binding DownloadText}" />
                            <MenuFlyoutItem
                                Command="{Binding RenameCommand}"
                                IsEnabled="{Binding IsNetworkAvailable, Mode=OneWay}"
                                Text="{Binding RenameText}"
                                Visibility="{Binding AllowRename, Converter={StaticResource BoolToVisibilityConverter}}" />
                            <MenuFlyoutItem
                                Command="{Binding CopyOrMoveCommand}"
                                IsEnabled="{Binding IsNetworkAvailable, Mode=OneWay}"
                                Text="{Binding CopyText}" />
                            <MenuFlyoutItem
                                Command="{Binding LeaveShareCommand}"
                                Foreground="{StaticResource MegaRedColorBrush}"
                                IsEnabled="{Binding IsNetworkAvailable, Mode=OneWay}"
                                Text="{Binding LeaveShareText}" />
                        </MenuFlyout.Items>
                    </MenuFlyout>
                </FlyoutBase.AttachedFlyout>
                <interactivity:Interaction.Behaviors>
                    <core:EventTriggerBehavior EventName="RightTapped">
                        <behaviors:OpenFlyoutAction IsEnabled="{Binding IsPanelOpen, Converter={StaticResource InverseBoolConverter}}" />
                    </core:EventTriggerBehavior>
                </interactivity:Interaction.Behaviors>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="Auto" />
                </Grid.ColumnDefinitions>
                <Path
                    Grid.Column="0"
                    Width="36"
                    Height="36"
                    Margin="0,0,12,0"
                    HorizontalAlignment="Center"
                    VerticalAlignment="Center"
                    Data="{Binding DefaultImagePathData}"
                    Stretch="Uniform">
                    <Path.Fill>
                        <SolidColorBrush Color="{ThemeResource MegaAppForeground}" />
                    </Path.Fill>
                </Path>
                <Grid Grid.Column="1">
                    <Grid.RowDefinitions>
                        <RowDefinition />
                        <RowDefinition />
                    </Grid.RowDefinitions>
                    <TextBlock
                        Grid.Row="0"
                        HorizontalAlignment="Left"
                        VerticalAlignment="Center"
                        FontSize="14"
                        Text="{Binding Name}"
                        TextTrimming="CharacterEllipsis"
                        TextWrapping="NoWrap" />
                    <TextBlock
                        Grid.Row="1"
                        HorizontalAlignment="Left"
                        VerticalAlignment="Center"
                        FontSize="13"
                        Opacity="0.5"
                        Text="{Binding Owner}"
                        TextWrapping="NoWrap" />
                </Grid>
                <Path
                    Grid.Column="2"
                    Width="12"
                    Height="12"
                    Margin="12,0,0,0"
                    HorizontalAlignment="Center"
                    VerticalAlignment="Center"
                    Data="{Binding AccessLevel.AccessLevelPathData}"
                    Opacity="0.9"
                    Stretch="Uniform">
                    <Path.Fill>
                        <SolidColorBrush Color="{ThemeResource MegaAppForeground}" />
                    </Path.Fill>
                </Path>
            </Grid>
        </Border>
    </DataTemplate>

    <DataTemplate x:Key="MegaOutgoingSharedItemListViewDesktop">
        <Border
            Margin="-12,1"
            Background="{Binding DisplayMode, ConverterParameter=0\,4, Converter={StaticResource NodeDisplayModeToColorBrushConverter}}"
            BorderBrush="{Binding DisplayMode, ConverterParameter=1\,0, Converter={StaticResource NodeDisplayModeToColorBrushConverter}}"
            BorderThickness="2,2,2,2">
            <Grid Margin="12,4" Background="Transparent">
                <FlyoutBase.AttachedFlyout>
                    <MenuFlyout>
                        <MenuFlyout.Items>
                            <MenuFlyoutItem
                                Command="{Binding OpenContentPanelCommand}"
                                Text="{Binding OpenText}"
                                Visibility="{Binding OnlyOneSelectedItem, Converter={StaticResource BoolToVisibilityConverter}}" />
                            <MenuFlyoutItem
                                Command="{Binding OpenInformationPanelCommand}"
                                Text="{Binding InformationText}"
                                Visibility="{Binding OnlyOneSelectedItem, Converter={StaticResource BoolToVisibilityConverter}}" />
                            <MenuFlyoutItem
                                Command="{Binding DownloadCommand}"
                                IsEnabled="{Binding IsNetworkAvailable, Mode=OneWay}"
                                Text="{Binding DownloadText}" />
                            <MenuFlyoutItem
                                Command="{Binding GetLinkCommand}"
                                IsEnabled="{Binding IsNetworkAvailable, Mode=OneWay}"
                                Text="{Binding GetLinkText}"
                                Visibility="{Binding OnlyOneSelectedItem, Converter={StaticResource BoolToVisibilityConverter}}">
                                <MenuFlyoutItem.CommandParameter>
                                    <x:Boolean>True</x:Boolean>
                                </MenuFlyoutItem.CommandParameter>
                            </MenuFlyoutItem>
                            <MenuFlyoutItem
                                Command="{Binding ShareCommand}"
                                IsEnabled="{Binding IsNetworkAvailable, Mode=OneWay}"
                                Text="{Binding SharingText}"
                                Visibility="{Binding OnlyOneSelectedItem, Converter={StaticResource BoolToVisibilityConverter}}" />
                            <MenuFlyoutItem
                                Command="{Binding RenameCommand}"
                                IsEnabled="{Binding IsNetworkAvailable, Mode=OneWay}"
                                Text="{Binding RenameText}"
                                Visibility="{Binding OnlyOneSelectedItem, Converter={StaticResource BoolToVisibilityConverter}}" />
                            <MenuFlyoutItem
                                Command="{Binding CopyOrMoveCommand}"
                                IsEnabled="{Binding IsNetworkAvailable, Mode=OneWay}"
                                Text="{Binding CopyOrMoveText}" />
                            <MenuFlyoutItem
                                Command="{Binding RemoveSharedAccessCommand}"
                                Foreground="{StaticResource MegaRedColorBrush}"
                                IsEnabled="{Binding IsNetworkAvailable, Mode=OneWay}"
                                Text="{Binding RemoveSharedAccessText}" />
                        </MenuFlyout.Items>
                    </MenuFlyout>
                </FlyoutBase.AttachedFlyout>
                <interactivity:Interaction.Behaviors>
                    <core:EventTriggerBehavior EventName="RightTapped">
                        <behaviors:OpenFlyoutAction IsEnabled="{Binding IsPanelOpen, Converter={StaticResource InverseBoolConverter}}" />
                    </core:EventTriggerBehavior>
                </interactivity:Interaction.Behaviors>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="*" />
                </Grid.ColumnDefinitions>
                <Path
                    Grid.Column="0"
                    Width="36"
                    Height="36"
                    Margin="0,0,12,0"
                    HorizontalAlignment="Center"
                    VerticalAlignment="Center"
                    Data="{Binding DefaultImagePathData}"
                    Stretch="Uniform">
                    <Path.Fill>
                        <SolidColorBrush Color="{ThemeResource MegaAppForeground}" />
                    </Path.Fill>
                </Path>
                <Grid Grid.Column="1">
                    <Grid.RowDefinitions>
                        <RowDefinition />
                        <RowDefinition />
                    </Grid.RowDefinitions>
                    <TextBlock
                        Grid.Row="0"
                        HorizontalAlignment="Left"
                        VerticalAlignment="Center"
                        FontSize="14"
                        Text="{Binding Name}"
                        TextTrimming="CharacterEllipsis"
                        TextWrapping="NoWrap" />
                    <Grid Grid.Row="1">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>
                        <TextBlock
                            Grid.Column="0"
                            HorizontalAlignment="Left"
                            VerticalAlignment="Center"
                            FontSize="13"
                            Opacity="0.5"
                            Text="{Binding ContactsText}"
                            TextWrapping="NoWrap" />
                        <TextBlock
                            Grid.Column="1"
                            HorizontalAlignment="Right"
                            VerticalAlignment="Center"
                            FontSize="13"
                            Opacity="0.5"
                            Text="{Binding Contents}"
                            TextWrapping="NoWrap" />
                    </Grid>
                </Grid>
            </Grid>
        </Border>
    </DataTemplate>

    <Style x:Key="MegaCleanListViewItemStyle" TargetType="ListViewItem">
        <Setter Property="FontFamily" Value="{ThemeResource ContentControlThemeFontFamily}" />
        <Setter Property="FontSize" Value="{ThemeResource ControlContentThemeFontSize}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Foreground" Value="{ThemeResource SystemControlForegroundBaseHighBrush}" />
        <Setter Property="TabNavigation" Value="Local" />
        <Setter Property="IsHoldingEnabled" Value="True" />
        <Setter Property="Padding" Value="12,0,12,0" />
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="MinWidth" Value="{ThemeResource ListViewItemMinWidth}" />
        <Setter Property="MinHeight" Value="{ThemeResource ListViewItemMinHeight}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ListViewItem">
                    <ContentPresenter />
                    <!--<ListViewItemPresenter CheckBrush="{ThemeResource SystemControlForegroundBaseMediumHighBrush}" ContentMargin="{TemplateBinding Padding}" CheckMode="Inline" ContentTransitions="{TemplateBinding ContentTransitions}" CheckBoxBrush="{ThemeResource SystemControlForegroundBaseMediumHighBrush}" DragForeground="{ThemeResource ListViewItemDragForegroundThemeBrush}" DragOpacity="{ThemeResource ListViewItemDragThemeOpacity}" DragBackground="{ThemeResource ListViewItemDragBackgroundThemeBrush}" DisabledOpacity="{ThemeResource ListViewItemDisabledThemeOpacity}" FocusBorderBrush="{ThemeResource SystemControlForegroundAltHighBrush}" FocusSecondaryBorderBrush="{ThemeResource SystemControlForegroundBaseHighBrush}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" PointerOverForeground="{ThemeResource SystemControlHighlightAltBaseHighBrush}" PressedBackground="{ThemeResource SystemControlHighlightListMediumBrush}" PlaceholderBackground="{ThemeResource ListViewItemPlaceholderBackgroundThemeBrush}" PointerOverBackground="{ThemeResource SystemControlHighlightListLowBrush}" ReorderHintOffset="{ThemeResource ListViewItemReorderHintThemeOffset}" SelectedPressedBackground="{ThemeResource SystemControlHighlightListAccentHighBrush}" SelectionCheckMarkVisualEnabled="True" SelectedForeground="{ThemeResource SystemControlHighlightAltBaseHighBrush}" SelectedPointerOverBackground="{ThemeResource SystemControlHighlightListAccentMediumBrush}" SelectedBackground="{ThemeResource SystemControlHighlightListAccentLowBrush}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"/>-->
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <DataTemplate x:Key="MegaTransferItemContentMobile">
        <Grid Margin="0,8" Background="Transparent">
            <FlyoutBase.AttachedFlyout>
                <MenuFlyout>
                    <MenuFlyout.Items>
                        <MenuFlyoutItem
                            Command="{Binding PauseOrResumeTransferCommand}"
                            Text="{Binding PauseText}"
                            Visibility="{Binding TransferState, ConverterParameter='pause', Converter={StaticResource TransferStateToVisibilityConverter}}" />
                        <MenuFlyoutItem
                            Command="{Binding PauseOrResumeTransferCommand}"
                            Text="{Binding ResumeText}"
                            Visibility="{Binding TransferState, ConverterParameter='resume', Converter={StaticResource TransferStateToVisibilityConverter}}" />
                        <MenuFlyoutItem
                            Command="{Binding CancelTransferCommand}"
                            Text="{Binding CancelText}"
                            Visibility="{Binding TransferState, ConverterParameter='cancel', Converter={StaticResource TransferStateToVisibilityConverter}}" />
                        <MenuFlyoutItem
                            Command="{Binding RetryTransferCommand}"
                            Text="{Binding RetryText}"
                            Visibility="{Binding TransferState, ConverterParameter='retry', Converter={StaticResource TransferStateToVisibilityConverter}}" />
                        <MenuFlyoutItem
                            Command="{Binding RemoveTransferCommand}"
                            Text="{Binding RemoveText}"
                            Visibility="{Binding TransferState, ConverterParameter='remove', Converter={StaticResource TransferStateToVisibilityConverter}}" />
                    </MenuFlyout.Items>
                </MenuFlyout>
            </FlyoutBase.AttachedFlyout>
            <interactivity:Interaction.Behaviors>
                <core:EventTriggerBehavior EventName="RightTapped">
                    <behaviors:OpenFlyoutAction IsEnabled="{Binding IsActionAvailable}" />
                </core:EventTriggerBehavior>
            </interactivity:Interaction.Behaviors>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
                <RowDefinition />
                <RowDefinition />
                <RowDefinition />
            </Grid.RowDefinitions>
            <Path
                Grid.Row="0"
                Grid.RowSpan="3"
                Grid.Column="0"
                Width="36"
                Height="36"
                Margin="0,0,8,0"
                HorizontalAlignment="Center"
                VerticalAlignment="Center"
                Data="{Binding FileTypePathData}"
                Stretch="Uniform"
                Visibility="{Binding ThumbnailUri, Converter={StaticResource InverseStringVisibilityConverter}}">
                <Path.Fill>
                    <SolidColorBrush Color="{StaticResource MegaAppForeground}" />
                </Path.Fill>
            </Path>
            <Image
                Grid.Row="0"
                Grid.RowSpan="3"
                Grid.Column="0"
                Width="36"
                Height="36"
                Margin="0,0,8,0"
                HorizontalAlignment="Center"
                VerticalAlignment="Center"
                Stretch="UniformToFill"
                Visibility="{Binding ThumbnailUri, Converter={StaticResource StringVisibilityConverter}}">
                <Image.Source>
                    <BitmapImage
                        DecodePixelHeight="36"
                        DecodePixelType="Logical"
                        DecodePixelWidth="36"
                        UriSource="{Binding ThumbnailUri}" />
                </Image.Source>
            </Image>
            <TextBlock
                Grid.Row="0"
                Grid.Column="1"
                HorizontalAlignment="Left"
                VerticalAlignment="Bottom"
                Style="{ThemeResource BaseTextBlockStyle}"
                Text="{Binding DisplayName}"
                TextTrimming="WordEllipsis" />
            <ProgressBar
                Grid.Row="1"
                Grid.Column="1"
                VerticalAlignment="Center"
                Background="{ThemeResource MegaProgressBarBackgroundBrush}"
                IsIndeterminate="False"
                Maximum="{Binding TotalBytes}"
                Minimum="0"
                Visibility="{Binding IsBusy, Converter={StaticResource BoolToVisibilityConverter}}"
                Value="{Binding TransferedBytes}">
                <ProgressBar.Foreground>
                    <SolidColorBrush Color="{StaticResource MegaRedColor}" />
                </ProgressBar.Foreground>
            </ProgressBar>
            <Grid Grid.Row="2" Grid.Column="1">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="Auto" />
                </Grid.ColumnDefinitions>
                <TextBlock
                    Grid.Column="0"
                    HorizontalAlignment="Left"
                    VerticalAlignment="Top"
                    Foreground="{StaticResource MegaAppForegroundBrush}"
                    Style="{ThemeResource CaptionTextBlockStyle}"
                    Text="{Binding TotalBytesText}"
                    TextWrapping="NoWrap"
                    Visibility="{Binding IsBusy, Converter={StaticResource InverseBoolToVisibilityConverter}}" />
                <TextBlock
                    Grid.Column="0"
                    HorizontalAlignment="Left"
                    VerticalAlignment="Center"
                    Foreground="{StaticResource MegaAppForegroundBrush}"
                    Style="{ThemeResource CaptionTextBlockStyle}"
                    Text="{Binding TransferedAndTotalBytes}"
                    TextWrapping="NoWrap"
                    Visibility="{Binding IsBusy, Converter={StaticResource BoolToVisibilityConverter}}" />
                <Viewbox
                    Grid.Column="1"
                    MaxWidth="12"
                    MaxHeight="12"
                    Margin="0,0,8,0"
                    HorizontalAlignment="Left"
                    VerticalAlignment="Center">
                    <SymbolIcon Foreground="{StaticResource MegaAppForegroundBrush}" Symbol="{Binding Type, Converter={StaticResource TransferTypeToSymbolConverter}}" />
                </Viewbox>
                <TextBlock
                    Grid.Column="2"
                    HorizontalAlignment="Right"
                    VerticalAlignment="Top"
                    Foreground="{StaticResource MegaAppForegroundBrush}"
                    Style="{ThemeResource CaptionTextBlockStyle}"
                    Text="{Binding TypeAndState, Converter={StaticResource TransferStateToReadableTextConverter}}"
                    TextWrapping="NoWrap"
                    Visibility="{Binding IsBusy, Converter={StaticResource InverseBoolToVisibilityConverter}}" />
                <TextBlock
                    Grid.Column="2"
                    HorizontalAlignment="Right"
                    VerticalAlignment="Top"
                    Foreground="{StaticResource MegaAppForegroundBrush}"
                    Style="{ThemeResource CaptionTextBlockStyle}"
                    Text="{Binding EstimatedTime}"
                    TextWrapping="NoWrap"
                    Visibility="{Binding IsBusy, Converter={StaticResource BoolToVisibilityConverter}}" />
            </Grid>

            <CommandBar
                Grid.Row="0"
                Grid.RowSpan="3"
                Grid.Column="2"
                Margin="8,0,0,0"
                VerticalAlignment="Center"
                extensions:CommandBarExtensions.HideMoreButton="True"
                Background="Transparent"
                IsEnabled="{Binding IsNetworkAvailable, Mode=OneWay}">
                <AppBarButton
                    Command="{Binding CancelTransferCommand}"
                    Label="{Binding CancelText}"
                    Style="{StaticResource MegaAppBarButtonStyle}"
                    ToolTipService.ToolTip="{Binding CancelText}"
                    Visibility="{Binding TransferState, ConverterParameter='cancel', Converter={StaticResource TransferStateToVisibilityConverter}}">
                    <AppBarButton.Icon>
                        <PathIcon
                            HorizontalAlignment="Center"
                            VerticalAlignment="Center"
                            Data="{Binding CancelPathData, Mode=OneTime}" />
                    </AppBarButton.Icon>
                </AppBarButton>
            </CommandBar>
        </Grid>
    </DataTemplate>

    <DataTemplate x:Key="MegaTransferItemContentDesktop">
        <Grid Margin="0,4" Background="Transparent">
            <FlyoutBase.AttachedFlyout>
                <MenuFlyout>
                    <MenuFlyout.Items>
                        <MenuFlyoutItem
                            Command="{Binding PauseOrResumeTransferCommand}"
                            Text="{Binding PauseText}"
                            Visibility="{Binding TransferState, ConverterParameter='pause', Converter={StaticResource TransferStateToVisibilityConverter}}" />
                        <MenuFlyoutItem
                            Command="{Binding PauseOrResumeTransferCommand}"
                            Text="{Binding ResumeText}"
                            Visibility="{Binding TransferState, ConverterParameter='resume', Converter={StaticResource TransferStateToVisibilityConverter}}" />
                        <MenuFlyoutItem
                            Command="{Binding CancelTransferCommand}"
                            Text="{Binding CancelText}"
                            Visibility="{Binding TransferState, ConverterParameter='cancel', Converter={StaticResource TransferStateToVisibilityConverter}}" />
                        <MenuFlyoutItem
                            Command="{Binding RetryTransferCommand}"
                            Text="{Binding RetryText}"
                            Visibility="{Binding TransferState, ConverterParameter='retry', Converter={StaticResource TransferStateToVisibilityConverter}}" />
                        <MenuFlyoutItem
                            Command="{Binding RemoveTransferCommand}"
                            Text="{Binding RemoveText}"
                            Visibility="{Binding TransferState, ConverterParameter='remove', Converter={StaticResource TransferStateToVisibilityConverter}}" />
                    </MenuFlyout.Items>
                </MenuFlyout>
            </FlyoutBase.AttachedFlyout>
            <interactivity:Interaction.Behaviors>
                <core:EventTriggerBehavior EventName="RightTapped">
                    <behaviors:OpenFlyoutAction IsEnabled="{Binding IsActionAvailable}" />
                </core:EventTriggerBehavior>
            </interactivity:Interaction.Behaviors>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="70" />
                <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
                <RowDefinition Height="*" />
                <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>
            <Path
                Grid.Row="0"
                Grid.RowSpan="2"
                Grid.Column="0"
                Width="36"
                Height="36"
                Margin="0,0,8,0"
                HorizontalAlignment="Center"
                VerticalAlignment="Center"
                Data="{Binding FileTypePathData}"
                Stretch="Uniform"
                Visibility="{Binding ThumbnailUri, Converter={StaticResource InverseStringVisibilityConverter}}">
                <Path.Fill>
                    <SolidColorBrush Color="{StaticResource MegaAppForeground}" />
                </Path.Fill>
            </Path>
            <Image
                Grid.Row="0"
                Grid.RowSpan="2"
                Grid.Column="0"
                Width="36"
                Height="36"
                Margin="0,0,8,0"
                HorizontalAlignment="Center"
                VerticalAlignment="Center"
                Stretch="UniformToFill"
                Visibility="{Binding ThumbnailUri, Converter={StaticResource StringVisibilityConverter}}">
                <Image.Source>
                    <BitmapImage
                        DecodePixelHeight="36"
                        DecodePixelType="Logical"
                        DecodePixelWidth="36"
                        UriSource="{Binding ThumbnailUri}" />
                </Image.Source>
            </Image>
            <TextBlock
                Grid.Row="0"
                Grid.Column="1"
                Margin="0,0,20,0"
                HorizontalAlignment="Left"
                VerticalAlignment="Center"
                Style="{ThemeResource BaseTextBlockStyle}"
                Text="{Binding DisplayName}"
                TextTrimming="WordEllipsis" />
            <TextBlock
                Grid.Row="0"
                Grid.Column="2"
                Margin="0,0,20,0"
                HorizontalAlignment="Right"
                VerticalAlignment="Center"
                Foreground="{StaticResource MegaAppForegroundBrush}"
                Style="{ThemeResource CaptionTextBlockStyle}"
                Text="{Binding TotalBytesText}"
                TextWrapping="NoWrap"
                Visibility="{Binding IsBusy, Converter={StaticResource InverseBoolToVisibilityConverter}}" />
            <TextBlock
                Grid.Row="0"
                Grid.Column="2"
                Margin="0,0,20,0"
                HorizontalAlignment="Right"
                VerticalAlignment="Center"
                Foreground="{StaticResource MegaAppForegroundBrush}"
                Style="{ThemeResource CaptionTextBlockStyle}"
                Text="{Binding TransferedAndTotalBytes}"
                TextWrapping="NoWrap"
                Visibility="{Binding IsBusy, Converter={StaticResource BoolToVisibilityConverter}}" />
            <Viewbox
                Grid.Row="0"
                Grid.Column="3"
                MaxWidth="16"
                MaxHeight="16"
                Margin="0,0,8,0"
                HorizontalAlignment="Left"
                VerticalAlignment="Center">
                <SymbolIcon Foreground="{StaticResource MegaAppForegroundBrush}" Symbol="{Binding Type, Converter={StaticResource TransferTypeToSymbolConverter}}" />
            </Viewbox>
            <TextBlock
                Grid.Row="0"
                Grid.Column="4"
                Margin="0,0,8,0"
                HorizontalAlignment="Left"
                VerticalAlignment="Center"
                Foreground="{StaticResource MegaAppForegroundBrush}"
                Style="{ThemeResource CaptionTextBlockStyle}"
                Text="{Binding EstimatedTime}"
                TextWrapping="NoWrap"
                Visibility="{Binding IsBusy, Converter={StaticResource BoolToVisibilityConverter}}" />
            <TextBlock
                Grid.Row="0"
                Grid.Column="4"
                Margin="0,0,8,0"
                HorizontalAlignment="Left"
                VerticalAlignment="Center"
                Foreground="{StaticResource MegaAppForegroundBrush}"
                Style="{ThemeResource CaptionTextBlockStyle}"
                Text="{Binding TypeAndState, Converter={StaticResource TransferStateToReadableTextConverter}}"
                TextWrapping="NoWrap"
                Visibility="{Binding IsBusy, Converter={StaticResource InverseBoolToVisibilityConverter}}" />
            <ProgressBar
                Grid.Row="1"
                Grid.Column="1"
                Grid.ColumnSpan="4"
                Margin="0,-8,0,16"
                VerticalAlignment="Top"
                Background="{ThemeResource MegaProgressBarBackgroundBrush}"
                IsIndeterminate="False"
                Maximum="{Binding TotalBytes}"
                Minimum="0"
                Visibility="{Binding IsBusy, Converter={StaticResource BoolToVisibilityConverter}}"
                Value="{Binding TransferedBytes}">
                <ProgressBar.Foreground>
                    <SolidColorBrush Color="{StaticResource MegaRedColor}" />
                </ProgressBar.Foreground>
            </ProgressBar>
            <CommandBar
                Grid.Row="0"
                Grid.RowSpan="2"
                Grid.Column="5"
                Margin="8,0,0,0"
                VerticalAlignment="Center"
                extensions:CommandBarExtensions.HideMoreButton="True"
                Background="Transparent"
                IsEnabled="{Binding IsNetworkAvailable, Mode=OneWay}">
                <AppBarButton
                    Command="{Binding PauseOrResumeTransferCommand}"
                    Label="{Binding PauseText}"
                    Style="{StaticResource MegaAppBarButtonStyle}"
                    ToolTipService.ToolTip="{Binding PauseText}"
                    Visibility="{Binding TransferState, ConverterParameter='pause', Converter={StaticResource TransferStateToVisibilityConverter}}">
                    <AppBarButton.Icon>
                        <PathIcon
                            HorizontalAlignment="Center"
                            VerticalAlignment="Center"
                            Data="{Binding PausePathData, Mode=OneTime}" />
                    </AppBarButton.Icon>
                </AppBarButton>
                <AppBarButton
                    Command="{Binding PauseOrResumeTransferCommand}"
                    Label="{Binding ResumeText}"
                    Style="{StaticResource MegaAppBarButtonStyle}"
                    ToolTipService.ToolTip="{Binding ResumeText}"
                    Visibility="{Binding TransferState, ConverterParameter='resume', Converter={StaticResource TransferStateToVisibilityConverter}}">
                    <AppBarButton.Icon>
                        <PathIcon
                            HorizontalAlignment="Center"
                            VerticalAlignment="Center"
                            Data="{Binding ResumePathData, Mode=OneTime}" />
                    </AppBarButton.Icon>
                </AppBarButton>
                <AppBarButton
                    Command="{Binding RetryTransferCommand}"
                    Label="{Binding RetryText}"
                    Style="{StaticResource MegaAppBarButtonStyle}"
                    ToolTipService.ToolTip="{Binding RetryText}"
                    Visibility="{Binding TransferState, ConverterParameter='retry', Converter={StaticResource TransferStateToVisibilityConverter}}">
                    <Viewbox MaxWidth="16" MaxHeight="16">
                        <SymbolIcon
                            Foreground="{StaticResource MegaAppForegroundBrush}"
                            Symbol="Refresh"
                            ToolTipService.ToolTip="{Binding RetryText}" />
                    </Viewbox>
                </AppBarButton>
                <AppBarButton
                    Command="{Binding RemoveTransferCommand}"
                    Label="{Binding RemoveText}"
                    Style="{StaticResource MegaAppBarButtonStyle}"
                    ToolTipService.ToolTip="{Binding RemoveText}"
                    Visibility="{Binding TransferState, ConverterParameter='remove', Converter={StaticResource TransferStateToVisibilityConverter}}">
                    <AppBarButton.Icon>
                        <PathIcon
                            HorizontalAlignment="Center"
                            VerticalAlignment="Center"
                            Data="{Binding RemovePathData, Mode=OneTime}" />
                    </AppBarButton.Icon>
                </AppBarButton>
                <AppBarButton
                    Command="{Binding CancelTransferCommand}"
                    Label="{Binding CancelText}"
                    Style="{StaticResource MegaAppBarButtonStyle}"
                    ToolTipService.ToolTip="{Binding CancelText}"
                    Visibility="{Binding TransferState, ConverterParameter='cancel', Converter={StaticResource TransferStateToVisibilityConverter}}">
                    <AppBarButton.Icon>
                        <PathIcon
                            HorizontalAlignment="Center"
                            VerticalAlignment="Center"
                            Data="{Binding CancelPathData, Mode=OneTime}" />
                    </AppBarButton.Icon>
                </AppBarButton>
            </CommandBar>
        </Grid>
    </DataTemplate>

    <DataTemplate x:Key="OutgoingSharedFolderContactItem">
        <Grid Margin="0,6" Background="Transparent">
            <FlyoutBase.AttachedFlyout>
                <MenuFlyout>
                    <MenuFlyout.Items>
                        <MenuFlyoutItem Command="{Binding ChangePermissionsCommand}" Text="{Binding PermissionReadOnlyText}">
                            <MenuFlyoutItem.CommandParameter>
                                <mega:MShareType>ACCESS_READ</mega:MShareType>
                            </MenuFlyoutItem.CommandParameter>
                        </MenuFlyoutItem>
                        <MenuFlyoutItem Command="{Binding ChangePermissionsCommand}" Text="{Binding PermissionReadAndWriteText}">
                            <MenuFlyoutItem.CommandParameter>
                                <mega:MShareType>ACCESS_READWRITE</mega:MShareType>
                            </MenuFlyoutItem.CommandParameter>
                        </MenuFlyoutItem>
                        <MenuFlyoutItem Command="{Binding ChangePermissionsCommand}" Text="{Binding PermissionFullAccessText}">
                            <MenuFlyoutItem.CommandParameter>
                                <mega:MShareType>ACCESS_FULL</mega:MShareType>
                            </MenuFlyoutItem.CommandParameter>
                        </MenuFlyoutItem>
                        <MenuFlyoutItem
                            Command="{Binding RemoveContactFromFolderCommand}"
                            Foreground="{StaticResource MegaRedColorBrush}"
                            Text="{Binding RemoveFromFolderText}" />
                    </MenuFlyout.Items>
                </MenuFlyout>
            </FlyoutBase.AttachedFlyout>
            <interactivity:Interaction.Behaviors>
                <core:EventTriggerBehavior EventName="RightTapped">
                    <behaviors:OpenFlyoutAction IsEnabled="{Binding IsNetworkAvailable, Mode=OneWay}" />
                </core:EventTriggerBehavior>
            </interactivity:Interaction.Behaviors>
            <Grid.RowDefinitions>
                <RowDefinition />
                <RowDefinition />
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>
            <Rectangle
                Grid.Row="0"
                Grid.RowSpan="2"
                Grid.Column="0"
                Width="36"
                Height="36"
                HorizontalAlignment="Center"
                VerticalAlignment="Center"
                Stretch="UniformToFill">
                <Rectangle.Fill>
                    <SolidColorBrush Color="{Binding AvatarColor}" />
                </Rectangle.Fill>
            </Rectangle>
            <TextBlock
                Grid.Row="0"
                Grid.RowSpan="2"
                Grid.Column="0"
                HorizontalAlignment="Center"
                VerticalAlignment="Center"
                FontSize="16"
                Foreground="{ThemeResource MegaAppForegroundBrush}"
                Text="{Binding AvatarLetter}" />
            <Image
                Grid.Row="0"
                Grid.RowSpan="2"
                Grid.Column="0"
                Width="36"
                Height="36"
                HorizontalAlignment="Center"
                VerticalAlignment="Center"
                Stretch="UniformToFill"
                Visibility="{Binding AvatarUri, Converter={StaticResource StringVisibilityConverter}, Mode=OneWay}">
                <Image.Source>
                    <BitmapImage
                        DecodePixelHeight="36"
                        DecodePixelType="Logical"
                        DecodePixelWidth="36"
                        UriSource="{Binding AvatarUri}" />
                </Image.Source>
            </Image>
            <TextBlock
                Grid.Row="0"
                Grid.Column="1"
                Margin="8,0,0,0"
                VerticalAlignment="Center"
                FontSize="14"
                Opacity="0.9"
                Text="{Binding FullName}" />
            <TextBlock
                Grid.Row="1"
                Grid.Column="1"
                Margin="8,0,0,0"
                VerticalAlignment="Center"
                FontSize="13"
                Opacity="0.5"
                Text="{Binding Email}" />
            <Path
                Grid.Row="0"
                Grid.RowSpan="2"
                Grid.Column="2"
                Width="12"
                Height="12"
                HorizontalAlignment="Center"
                VerticalAlignment="Center"
                Data="{Binding AccessLevel.AccessLevelPathData}"
                Opacity="0.9"
                Stretch="Uniform">
                <Path.Fill>
                    <SolidColorBrush Color="{ThemeResource MegaAppForeground}" />
                </Path.Fill>
            </Path>
        </Grid>
    </DataTemplate>

    <DataTemplate x:Key="MegaContactItemContentMobile">
        <Grid Margin="0,6" Background="Transparent">
            <FlyoutBase.AttachedFlyout>
                <MenuFlyout>
                    <MenuFlyout.Items>
                        <MenuFlyoutItem
                            Command="{Binding ViewProfileCommand}"
                            Text="{Binding ViewProfileText}"
                            Visibility="{Binding ContactList.ItemCollection.IsMultiSelectActive, Converter={StaticResource InverseBoolToVisibilityConverter}}" />
                        <MenuFlyoutItem
                            Command="{Binding RemoveContactCommand}"
                            Foreground="{StaticResource MegaRedColorBrush}"
                            IsEnabled="{Binding IsNetworkAvailable, Mode=OneWay}"
                            Text="{Binding RemoveContactText}"
                            Visibility="{Binding ContactList.ItemCollection.IsMultiSelectActive, Converter={StaticResource InverseBoolToVisibilityConverter}}" />
                        <MenuFlyoutItem
                            Command="{Binding RemoveContactCommand}"
                            Foreground="{StaticResource MegaRedColorBrush}"
                            IsEnabled="{Binding IsNetworkAvailable, Mode=OneWay}"
                            Text="{Binding RemoveMultipleContactsText}"
                            Visibility="{Binding ContactList.ItemCollection.IsMultiSelectActive, Converter={StaticResource BoolToVisibilityConverter}}" />
                    </MenuFlyout.Items>
                </MenuFlyout>
            </FlyoutBase.AttachedFlyout>
            <interactivity:Interaction.Behaviors>
                <core:EventTriggerBehavior EventName="RightTapped">
                    <behaviors:OpenFlyoutAction IsEnabled="True" />
                </core:EventTriggerBehavior>
            </interactivity:Interaction.Behaviors>
            <Grid.RowDefinitions>
                <RowDefinition />
                <RowDefinition />
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>
            <Rectangle
                Grid.Row="0"
                Grid.RowSpan="2"
                Grid.Column="0"
                Width="36"
                Height="36"
                HorizontalAlignment="Center"
                VerticalAlignment="Center"
                Stretch="UniformToFill">
                <Rectangle.Fill>
                    <SolidColorBrush Color="{Binding AvatarColor}" />
                </Rectangle.Fill>
            </Rectangle>
            <TextBlock
                Grid.Row="0"
                Grid.RowSpan="2"
                Grid.Column="0"
                HorizontalAlignment="Center"
                VerticalAlignment="Center"
                FontSize="16"
                Foreground="{ThemeResource MegaAppForegroundBrush}"
                Text="{Binding AvatarLetter}" />
            <Image
                Grid.Row="0"
                Grid.RowSpan="2"
                Grid.Column="0"
                Width="36"
                Height="36"
                HorizontalAlignment="Center"
                VerticalAlignment="Center"
                Stretch="UniformToFill"
                Visibility="{Binding AvatarUri, Converter={StaticResource StringVisibilityConverter}, Mode=OneWay}">
                <Image.Source>
                    <BitmapImage
                        DecodePixelHeight="36"
                        DecodePixelType="Logical"
                        DecodePixelWidth="36"
                        UriSource="{Binding AvatarUri}" />
                </Image.Source>
            </Image>
            <TextBlock
                Grid.Row="0"
                Grid.Column="1"
                Margin="8,0,0,0"
                VerticalAlignment="Center"
                FontSize="14"
                Opacity="0.9"
                Text="{Binding FullName}" />
            <TextBlock
                Grid.Row="1"
                Grid.Column="1"
                Margin="8,0,0,0"
                VerticalAlignment="Center"
                FontSize="13"
                Opacity="0.5"
                Text="{Binding Email}" />
            <StackPanel
                Grid.Row="0"
                Grid.RowSpan="2"
                Grid.Column="2"
                Orientation="Horizontal">
                <Path
                    Width="15"
                    Height="15"
                    HorizontalAlignment="Center"
                    VerticalAlignment="Center"
                    Data="{Binding ShareIconPathData}"
                    Opacity="0.9"
                    Stretch="Uniform">
                    <Path.Fill>
                        <SolidColorBrush Color="{ThemeResource MegaAppForeground}" />
                    </Path.Fill>
                </Path>
                <TextBlock
                    Margin="8,0,0,0"
                    HorizontalAlignment="Left"
                    VerticalAlignment="Center"
                    FontSize="13"
                    Opacity="0.9"
                    Text="{Binding SharedItems.NumberOfSharedItems}" />
            </StackPanel>
        </Grid>
    </DataTemplate>

    <DataTemplate x:Key="MegaContactItemContentDesktop">
        <Grid Margin="0,6" Background="Transparent">
            <FlyoutBase.AttachedFlyout>
                <MenuFlyout>
                    <MenuFlyout.Items>
                        <MenuFlyoutItem
                            Command="{Binding ViewProfileCommand}"
                            Text="{Binding ViewProfileText}"
                            Visibility="{Binding ContactList.ItemCollection.IsMultiSelectActive, Converter={StaticResource InverseBoolToVisibilityConverter}}" />
                        <MenuFlyoutItem
                            Command="{Binding RemoveContactCommand}"
                            Foreground="{StaticResource MegaRedColorBrush}"
                            IsEnabled="{Binding IsNetworkAvailable, Mode=OneWay}"
                            Text="{Binding RemoveContactText}"
                            Visibility="{Binding ContactList.ItemCollection.IsMultiSelectActive, Converter={StaticResource InverseBoolToVisibilityConverter}}" />
                        <MenuFlyoutItem
                            Command="{Binding RemoveContactCommand}"
                            Foreground="{StaticResource MegaRedColorBrush}"
                            IsEnabled="{Binding IsNetworkAvailable, Mode=OneWay}"
                            Text="{Binding RemoveMultipleContactsText}"
                            Visibility="{Binding ContactList.ItemCollection.IsMultiSelectActive, Converter={StaticResource BoolToVisibilityConverter}}" />
                    </MenuFlyout.Items>
                </MenuFlyout>
            </FlyoutBase.AttachedFlyout>
            <interactivity:Interaction.Behaviors>
                <core:EventTriggerBehavior EventName="RightTapped">
                    <behaviors:OpenFlyoutAction IsEnabled="True" />
                </core:EventTriggerBehavior>
            </interactivity:Interaction.Behaviors>
            <Grid.RowDefinitions>
                <RowDefinition />
                <RowDefinition />
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="Auto" MinWidth="116" />
            </Grid.ColumnDefinitions>
            <Rectangle
                Grid.Row="0"
                Grid.RowSpan="2"
                Grid.Column="0"
                Width="36"
                Height="36"
                HorizontalAlignment="Center"
                VerticalAlignment="Center"
                Stretch="UniformToFill">
                <Rectangle.Fill>
                    <SolidColorBrush Color="{Binding AvatarColor}" />
                </Rectangle.Fill>
            </Rectangle>
            <TextBlock
                Grid.Row="0"
                Grid.RowSpan="2"
                Grid.Column="0"
                HorizontalAlignment="Center"
                VerticalAlignment="Center"
                FontSize="16"
                Foreground="{ThemeResource MegaAppForegroundBrush}"
                Text="{Binding AvatarLetter}" />
            <Image
                Grid.Row="0"
                Grid.RowSpan="2"
                Grid.Column="0"
                Width="36"
                Height="36"
                HorizontalAlignment="Center"
                VerticalAlignment="Center"
                Stretch="UniformToFill"
                Visibility="{Binding AvatarUri, Converter={StaticResource StringVisibilityConverter}, Mode=OneWay}">
                <Image.Source>
                    <BitmapImage
                        DecodePixelHeight="36"
                        DecodePixelType="Logical"
                        DecodePixelWidth="36"
                        UriSource="{Binding AvatarUri}" />
                </Image.Source>
            </Image>
            <TextBlock
                Grid.Row="0"
                Grid.Column="1"
                Margin="8,0,0,0"
                VerticalAlignment="Center"
                FontSize="14"
                Opacity="0.9"
                Text="{Binding FullName}" />
            <TextBlock
                Grid.Row="1"
                Grid.Column="1"
                Margin="8,0,0,0"
                VerticalAlignment="Center"
                FontSize="13"
                Opacity="0.5"
                Text="{Binding Email}" />
            <StackPanel
                Grid.Row="0"
                Grid.RowSpan="2"
                Grid.Column="2"
                Orientation="Horizontal">
                <Path
                    Width="15"
                    Height="15"
                    HorizontalAlignment="Center"
                    VerticalAlignment="Center"
                    Data="{Binding ShareIconPathData}"
                    Opacity="0.9"
                    Stretch="Uniform">
                    <Path.Fill>
                        <SolidColorBrush Color="{ThemeResource MegaAppForeground}" />
                    </Path.Fill>
                </Path>
                <TextBlock
                    Margin="8,0,0,0"
                    HorizontalAlignment="Left"
                    VerticalAlignment="Center"
                    FontSize="13"
                    Opacity="0.9"
                    Text="{Binding SharedItems.NumberOfSharedItemsText}" />
            </StackPanel>
        </Grid>
    </DataTemplate>

    <DataTemplate x:Key="MegaInviteContactItemDesktop">
        <Grid Margin="0,6" Background="Transparent">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" MinWidth="80" />
            </Grid.ColumnDefinitions>
            <Rectangle
                Grid.Row="0"
                Grid.Column="0"
                Width="36"
                Height="36"
                HorizontalAlignment="Center"
                VerticalAlignment="Center"
                Stretch="UniformToFill">
                <Rectangle.Fill>
                    <SolidColorBrush Color="{Binding AvatarColor}" />
                </Rectangle.Fill>
            </Rectangle>
            <TextBlock
                Grid.Row="0"
                Grid.Column="0"
                HorizontalAlignment="Center"
                VerticalAlignment="Center"
                FontSize="16"
                Foreground="{ThemeResource MegaAppForegroundBrush}"
                Text="{Binding AvatarLetter}" />
            <Image
                Grid.Row="0"
                Grid.Column="0"
                Width="36"
                Height="36"
                HorizontalAlignment="Center"
                VerticalAlignment="Center"
                Stretch="UniformToFill"
                Visibility="{Binding AvatarUri, Converter={StaticResource StringVisibilityConverter}, Mode=OneWay}">
                <Image.Source>
                    <BitmapImage
                        DecodePixelHeight="36"
                        DecodePixelType="Logical"
                        DecodePixelWidth="36"
                        UriSource="{Binding AvatarUri}" />
                </Image.Source>
            </Image>
            <TextBlock
                Grid.Row="0"
                Grid.Column="1"
                Margin="8,0"
                VerticalAlignment="Center"
                FontSize="14"
                Opacity="0.9"
                Text="{Binding FullName}" />
            <TextBlock
                Grid.Row="0"
                Grid.Column="2"
                Margin="8,0"
                VerticalAlignment="Center"
                FontSize="13"
                Opacity="0.5"
                Text="{Binding Email}" />
            <TextBlock
                Grid.Row="0"
                Grid.Column="3"
                Margin="8,0"
                VerticalAlignment="Center"
                FontSize="13"
                Opacity="0.5"
                Text="{Binding ReferralStatus}"
                TextAlignment="Right" />
        </Grid>
    </DataTemplate>

    <DataTemplate x:Key="MegaInviteContactItemMobile">
        <Grid Margin="0,6" Background="Transparent">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="Auto" MinWidth="80" />
            </Grid.ColumnDefinitions>
            <Rectangle
                Grid.Row="0"
                Grid.Column="0"
                Width="36"
                Height="36"
                HorizontalAlignment="Center"
                VerticalAlignment="Center"
                Stretch="UniformToFill">
                <Rectangle.Fill>
                    <SolidColorBrush Color="{Binding AvatarColor}" />
                </Rectangle.Fill>
            </Rectangle>
            <TextBlock
                Grid.Row="0"
                Grid.Column="0"
                HorizontalAlignment="Center"
                VerticalAlignment="Center"
                FontSize="16"
                Foreground="{ThemeResource MegaAppForegroundBrush}"
                Text="{Binding AvatarLetter}" />
            <Image
                Grid.Row="0"
                Grid.Column="0"
                Width="36"
                Height="36"
                HorizontalAlignment="Center"
                VerticalAlignment="Center"
                Stretch="UniformToFill"
                Visibility="{Binding AvatarUri, Converter={StaticResource StringVisibilityConverter}, Mode=OneWay}">
                <Image.Source>
                    <BitmapImage
                        DecodePixelHeight="36"
                        DecodePixelType="Logical"
                        DecodePixelWidth="36"
                        UriSource="{Binding AvatarUri}" />
                </Image.Source>
            </Image>
            <TextBlock
                Grid.Row="0"
                Grid.Column="1"
                Margin="8,0"
                VerticalAlignment="Center"
                FontSize="14"
                Opacity="0.9"
                Text="{Binding FullName}" />
            <TextBlock
                Grid.Row="0"
                Grid.Column="3"
                Margin="8,0"
                VerticalAlignment="Center"
                FontSize="13"
                Opacity="0.5"
                Text="{Binding ReferralStatus}"
                TextAlignment="Right" />
        </Grid>
    </DataTemplate>

    <DataTemplate x:Key="MegaContactShareToPanelItem">
        <Grid Margin="0,6" Background="Transparent">
            <Grid.RowDefinitions>
                <RowDefinition />
                <RowDefinition />
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="Auto" MinWidth="116" />
            </Grid.ColumnDefinitions>
            <Rectangle
                Grid.Row="0"
                Grid.RowSpan="2"
                Grid.Column="0"
                Width="36"
                Height="36"
                HorizontalAlignment="Center"
                VerticalAlignment="Center"
                Stretch="UniformToFill">
                <Rectangle.Fill>
                    <SolidColorBrush Color="{Binding AvatarColor}" />
                </Rectangle.Fill>
            </Rectangle>
            <TextBlock
                Grid.Row="0"
                Grid.RowSpan="2"
                Grid.Column="0"
                HorizontalAlignment="Center"
                VerticalAlignment="Center"
                FontSize="16"
                Foreground="{ThemeResource MegaAppForegroundBrush}"
                Text="{Binding AvatarLetter}" />
            <Image
                Grid.Row="0"
                Grid.RowSpan="2"
                Grid.Column="0"
                Width="36"
                Height="36"
                HorizontalAlignment="Center"
                VerticalAlignment="Center"
                Stretch="UniformToFill"
                Visibility="{Binding AvatarUri, Converter={StaticResource StringVisibilityConverter}, Mode=OneWay}">
                <Image.Source>
                    <BitmapImage
                        DecodePixelHeight="36"
                        DecodePixelType="Logical"
                        DecodePixelWidth="36"
                        UriSource="{Binding AvatarUri}" />
                </Image.Source>
            </Image>
            <TextBlock
                Grid.Row="0"
                Grid.Column="1"
                Margin="8,0,0,0"
                VerticalAlignment="Center"
                FontSize="14"
                Opacity="0.9"
                Text="{Binding FullName}" />
            <TextBlock
                Grid.Row="1"
                Grid.Column="1"
                Margin="8,0,0,0"
                VerticalAlignment="Center"
                FontSize="13"
                Opacity="0.5"
                Text="{Binding Email}" />
        </Grid>
    </DataTemplate>

    <DataTemplate x:Key="MegaContactRequestItemContentMobile">
        <Grid Margin="0,6" Background="Transparent">
            <FlyoutBase.AttachedFlyout>
                <MenuFlyout>
                    <MenuFlyout.Items>
                        <MenuFlyoutItem
                            Command="{Binding AcceptContactRequestCommand}"
                            Text="{Binding AcceptContactText}"
                            Visibility="{Binding IsOutgoing, Converter={StaticResource InverseBoolToVisibilityConverter}}" />
                        <MenuFlyoutItem
                            Command="{Binding IgnoreContactRequestCommand}"
                            Text="{Binding IgnoreContactText}"
                            Visibility="{Binding IsOutgoing, Converter={StaticResource InverseBoolToVisibilityConverter}}" />
                        <MenuFlyoutItem
                            Command="{Binding DeclineContactRequestCommand}"
                            Foreground="{StaticResource MegaRedColorBrush}"
                            Text="{Binding DenyContactText}"
                            Visibility="{Binding IsOutgoing, Converter={StaticResource InverseBoolToVisibilityConverter}}" />
                        <MenuFlyoutItem
                            Command="{Binding RemindContactRequestCommand}"
                            Text="{Binding RemindContactText}"
                            Visibility="{Binding IsRemindAllowed, Converter={StaticResource BoolToVisibilityConverter}}" />
                        <MenuFlyoutItem
                            Command="{Binding CancelContactRequestCommand}"
                            Foreground="{StaticResource MegaRedColorBrush}"
                            Text="{Binding CancelInviteText}"
                            Visibility="{Binding IsOutgoing, Converter={StaticResource BoolToVisibilityConverter}}" />
                    </MenuFlyout.Items>
                </MenuFlyout>
            </FlyoutBase.AttachedFlyout>
            <interactivity:Interaction.Behaviors>
                <core:EventTriggerBehavior EventName="RightTapped">
                    <behaviors:OpenFlyoutAction IsEnabled="{Binding IsNetworkAvailable, Mode=OneWay}" />
                </core:EventTriggerBehavior>
            </interactivity:Interaction.Behaviors>
            <Grid.RowDefinitions>
                <RowDefinition />
                <RowDefinition />
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>
            <Rectangle
                Grid.Row="0"
                Grid.RowSpan="2"
                Grid.Column="0"
                Width="36"
                Height="36"
                HorizontalAlignment="Center"
                VerticalAlignment="Center"
                Stretch="UniformToFill">
                <Rectangle.Fill>
                    <SolidColorBrush Color="{Binding AvatarColor}" />
                </Rectangle.Fill>
            </Rectangle>
            <TextBlock
                Grid.Row="0"
                Grid.RowSpan="2"
                Grid.Column="0"
                HorizontalAlignment="Center"
                VerticalAlignment="Center"
                FontSize="16"
                Foreground="{ThemeResource MegaAppForegroundBrush}"
                Text="{Binding AvatarLetter}" />
            <TextBlock
                Grid.Row="0"
                Grid.Column="1"
                Margin="8,0,0,0"
                VerticalAlignment="Center"
                FontSize="14"
                Opacity="0.9"
                Text="{Binding Email}" />
            <TextBlock
                Grid.Row="1"
                Grid.Column="1"
                Margin="8,0,0,0"
                VerticalAlignment="Center"
                FontSize="13"
                Opacity="0.5"
                Text="{Binding Date}" />
            <CommandBar
                Grid.Row="0"
                Grid.RowSpan="2"
                Grid.Column="2"
                Height="36"
                Margin="8,0,0,0"
                VerticalAlignment="Center"
                extensions:CommandBarExtensions.HideMoreButton="True"
                Background="Transparent"
                IsEnabled="{Binding IsNetworkAvailable, Mode=OneWay}"
                Visibility="{Binding ContactRequestsList.ItemCollection.IsMultiSelectActive, Converter={StaticResource InverseBoolToVisibilityConverter}}">
                <AppBarButton
                    Width="36"
                    Height="36"
                    Command="{Binding AcceptContactRequestCommand}"
                    Label="{Binding AcceptContactText}"
                    Style="{StaticResource MegaAppBarButtonStyle}"
                    ToolTipService.ToolTip="{Binding AcceptContactText}"
                    Visibility="{Binding IsOutgoing, Converter={StaticResource InverseBoolToVisibilityConverter}}">
                    <Viewbox MaxWidth="14" MaxHeight="14">
                        <PathIcon
                            Margin="0,-12,0,0"
                            HorizontalAlignment="Center"
                            VerticalAlignment="Center"
                            Data="{Binding AcceptPathData, Mode=OneTime}" />
                    </Viewbox>
                </AppBarButton>
                <AppBarButton
                    Width="36"
                    Height="36"
                    Command="{Binding RemindContactRequestCommand}"
                    Label="{Binding RemindContactText}"
                    Style="{StaticResource MegaAppBarButtonStyle}"
                    ToolTipService.ToolTip="{Binding RemindContactText}"
                    Visibility="{Binding IsRemindAllowed, Converter={StaticResource BoolToVisibilityConverter}}">
                    <Viewbox MaxWidth="16" MaxHeight="16">
                        <FontIcon Margin="0,-14,0,0" Glyph="&#xE1F2;" />
                    </Viewbox>
                </AppBarButton>
            </CommandBar>
        </Grid>
    </DataTemplate>

    <DataTemplate x:Key="MegaContactRequestItemContentDesktop">
        <Grid Margin="0,6" Background="Transparent">
            <FlyoutBase.AttachedFlyout>
                <MenuFlyout>
                    <MenuFlyout.Items>
                        <MenuFlyoutItem
                            Command="{Binding AcceptContactRequestCommand}"
                            Text="{Binding AcceptContactText}"
                            Visibility="{Binding IsOutgoing, Converter={StaticResource InverseBoolToVisibilityConverter}}" />
                        <MenuFlyoutItem
                            Command="{Binding IgnoreContactRequestCommand}"
                            Text="{Binding IgnoreContactText}"
                            Visibility="{Binding IsOutgoing, Converter={StaticResource InverseBoolToVisibilityConverter}}" />
                        <MenuFlyoutItem
                            Command="{Binding DeclineContactRequestCommand}"
                            Foreground="{StaticResource MegaRedColorBrush}"
                            Text="{Binding DenyContactText}"
                            Visibility="{Binding IsOutgoing, Converter={StaticResource InverseBoolToVisibilityConverter}}" />
                        <MenuFlyoutItem
                            Command="{Binding RemindContactRequestCommand}"
                            Text="{Binding RemindContactText}"
                            Visibility="{Binding IsRemindAllowed, Converter={StaticResource BoolToVisibilityConverter}}" />
                        <MenuFlyoutItem
                            Command="{Binding CancelContactRequestCommand}"
                            Foreground="{StaticResource MegaRedColorBrush}"
                            Text="{Binding CancelInviteText}"
                            Visibility="{Binding IsOutgoing, Converter={StaticResource BoolToVisibilityConverter}}" />
                    </MenuFlyout.Items>
                </MenuFlyout>
            </FlyoutBase.AttachedFlyout>
            <interactivity:Interaction.Behaviors>
                <core:EventTriggerBehavior EventName="RightTapped">
                    <behaviors:OpenFlyoutAction IsEnabled="{Binding IsNetworkAvailable, Mode=OneWay}" />
                </core:EventTriggerBehavior>
            </interactivity:Interaction.Behaviors>
            <Grid.RowDefinitions>
                <RowDefinition />
                <RowDefinition />
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>
            <Rectangle
                Grid.Row="0"
                Grid.RowSpan="2"
                Grid.Column="0"
                Width="36"
                Height="36"
                HorizontalAlignment="Center"
                VerticalAlignment="Center"
                Stretch="UniformToFill">
                <Rectangle.Fill>
                    <SolidColorBrush Color="{Binding AvatarColor}" />
                </Rectangle.Fill>
            </Rectangle>
            <TextBlock
                Grid.Row="0"
                Grid.RowSpan="2"
                Grid.Column="0"
                HorizontalAlignment="Center"
                VerticalAlignment="Center"
                FontSize="16"
                Foreground="{ThemeResource MegaAppForegroundBrush}"
                Text="{Binding AvatarLetter}" />
            <TextBlock
                Grid.Row="0"
                Grid.Column="1"
                Margin="8,0,0,0"
                VerticalAlignment="Center"
                FontSize="14"
                Opacity="0.9"
                Text="{Binding Email}" />
            <TextBlock
                Grid.Row="1"
                Grid.Column="1"
                Margin="8,0,0,0"
                VerticalAlignment="Center"
                FontSize="13"
                Opacity="0.5"
                Text="{Binding Date}" />
            <CommandBar
                Grid.Row="0"
                Grid.RowSpan="2"
                Grid.Column="2"
                Height="36"
                Margin="8,0,0,0"
                VerticalAlignment="Center"
                extensions:CommandBarExtensions.HideMoreButton="True"
                Background="Transparent"
                IsEnabled="{Binding IsNetworkAvailable, Mode=OneWay}"
                Visibility="{Binding ContactRequestsList.ItemCollection.IsMultiSelectActive, Converter={StaticResource InverseBoolToVisibilityConverter}}">
                <AppBarButton
                    Width="36"
                    Height="36"
                    Command="{Binding AcceptContactRequestCommand}"
                    Label="{Binding AcceptContactText}"
                    Style="{StaticResource MegaAppBarButtonStyle}"
                    ToolTipService.ToolTip="{Binding AcceptContactText}"
                    Visibility="{Binding IsOutgoing, Converter={StaticResource InverseBoolToVisibilityConverter}}">
                    <Viewbox MaxWidth="14" MaxHeight="14">
                        <PathIcon
                            Margin="0,-12,0,0"
                            HorizontalAlignment="Center"
                            VerticalAlignment="Center"
                            Data="{Binding AcceptPathData, Mode=OneTime}" />
                    </Viewbox>
                </AppBarButton>
                <AppBarButton
                    Width="36"
                    Height="36"
                    Command="{Binding DeclineContactRequestCommand}"
                    Label="{Binding DenyContactText}"
                    Style="{StaticResource MegaAppBarButtonStyle}"
                    ToolTipService.ToolTip="{Binding DenyContactText}"
                    Visibility="{Binding IsOutgoing, Converter={StaticResource InverseBoolToVisibilityConverter}}">
                    <AppBarButton.Icon>
                        <PathIcon
                            Margin="0,-12,0,0"
                            HorizontalAlignment="Center"
                            VerticalAlignment="Center"
                            Data="{Binding DeclinePathData, Mode=OneTime}" />
                    </AppBarButton.Icon>
                </AppBarButton>
                <AppBarButton
                    Width="36"
                    Height="36"
                    Command="{Binding RemindContactRequestCommand}"
                    Label="{Binding RemindContactText}"
                    Style="{StaticResource MegaAppBarButtonStyle}"
                    ToolTipService.ToolTip="{Binding RemindContactText}"
                    Visibility="{Binding IsRemindAllowed, Converter={StaticResource BoolToVisibilityConverter}}">
                    <Viewbox MaxWidth="16" MaxHeight="16">
                        <FontIcon Margin="0,-14,0,0" Glyph="&#xE1F2;" />
                    </Viewbox>
                </AppBarButton>
                <AppBarButton
                    Width="36"
                    Height="36"
                    Command="{Binding CancelContactRequestCommand}"
                    Label="{Binding CancelInviteText}"
                    Style="{StaticResource MegaAppBarButtonStyle}"
                    ToolTipService.ToolTip="{Binding CancelInviteText}"
                    Visibility="{Binding IsOutgoing, Converter={StaticResource BoolToVisibilityConverter}}">
                    <AppBarButton.Icon>
                        <PathIcon
                            Margin="0,-12,0,0"
                            HorizontalAlignment="Center"
                            VerticalAlignment="Center"
                            Data="{Binding CancelPathData, Mode=OneTime}" />
                    </AppBarButton.Icon>
                </AppBarButton>
            </CommandBar>
        </Grid>
    </DataTemplate>

    <ControlTemplate x:Name="StorageOverquotaWarning">
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>
            <Viewbox
                Grid.Column="0"
                MaxWidth="16"
                MaxHeight="16"
                Margin="0,4,12,0"
                VerticalAlignment="Top">
                <PathIcon Data="{Binding WarningIconPathData, Mode=OneTime}" Foreground="{StaticResource MegaRedColorBrush}" />
            </Viewbox>
            <TextBlock
                Grid.Column="1"
                Margin="0,0,0,28"
                FontSize="14"
                Opacity="0.7"
                Text="{Binding StorageOverquotaWarningText, Mode=OneTime}"
                TextWrapping="Wrap" />
        </Grid>
    </ControlTemplate>

    <ControlTemplate x:Name="TransferOverquotaWarning">
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>
            <Viewbox
                Grid.Column="0"
                MaxWidth="16"
                MaxHeight="16"
                Margin="0,4,12,0"
                VerticalAlignment="Top">
                <PathIcon Data="{Binding WarningIconPathData, Mode=OneTime}" Foreground="{StaticResource MegaRedColorBrush}" />
            </Viewbox>
            <TextBlock
                Grid.Column="1"
                Margin="0,0,0,28"
                FontSize="14"
                Opacity="0.7"
                Text="{Binding TransferOverquotaWarningText, Mode=OneTime}"
                TextWrapping="Wrap" />
        </Grid>
    </ControlTemplate>

    <DataTemplate x:Key="ProductItemTemplateDesktop">
        <Grid Width="144" Background="{ThemeResource MegaAppBackgroundBrush}">
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>
            <StackPanel
                Grid.Row="0"
                Margin="0,0,0,2"
                Background="{ThemeResource MegaProductBackgroundBrush}">
                <Viewbox
                    MaxWidth="24"
                    MaxHeight="24"
                    Margin="0,20,0,0">
                    <PathIcon Data="{Binding ProductPathData, Mode=OneTime}">
                        <PathIcon.Foreground>
                            <SolidColorBrush Color="{Binding ProductColor, Mode=OneTime}" />
                        </PathIcon.Foreground>
                    </PathIcon>
                </Viewbox>
                <TextBlock
                    Margin="0,11,0,12"
                    Style="{ThemeResource MegaBodyFontStyle}"
                    Text="{Binding Name, Mode=OneTime}"
                    TextAlignment="Center">
                    <TextBlock.Foreground>
                        <SolidColorBrush Color="{Binding ProductColor, Mode=OneTime}" />
                    </TextBlock.Foreground>
                </TextBlock>
            </StackPanel>
            <Grid Grid.Row="1" Background="{ThemeResource MegaProductBackgroundBrush}">
                <Grid.RowDefinitions>
                    <RowDefinition />
                    <RowDefinition />
                    <RowDefinition />
                </Grid.RowDefinitions>
                <StackPanel Grid.Row="0" Margin="0,10,0,0">
                    <TextBlock
                        Style="{ThemeResource MegaTitleFontStyle}"
                        Text="{Binding PricePeriod, Mode=OneTime}"
                        TextAlignment="Center" />
                    <TextBlock Foreground="{StaticResource MegaAppForegroundBrush}" TextAlignment="Center">
                        <Run FontSize="26" Text="{Binding PriceIntegerPart, Mode=OneTime}" /><Run FontSize="18" Text="." /><Run FontSize="18" Text="{Binding PriceDecimalPart, Mode=OneTime}" />
                        <Run FontSize="16" Text="{Binding Currency, Mode=OneTime}" />
                    </TextBlock>
                </StackPanel>
                <StackPanel Grid.Row="1" Margin="0,20,0,0">
                    <TextBlock
                        Style="{ThemeResource MegaTitleFontStyle}"
                        Text="{Binding StorageText, Mode=OneTime}"
                        TextAlignment="Center" />
                    <TextBlock
                        Style="{ThemeResource MegaBodyFontStyle}"
                        Text="{Binding Storage, Mode=OneTime}"
                        TextAlignment="Center" />
                </StackPanel>
                <StackPanel Grid.Row="2" Margin="0,20,0,26">
                    <TextBlock
                        Style="{ThemeResource MegaTitleFontStyle}"
                        Text="{Binding TransferQuotaText, Mode=OneTime}"
                        TextAlignment="Center" />
                    <TextBlock
                        Style="{ThemeResource MegaBodyFontStyle}"
                        Text="{Binding Transfer, Mode=OneTime}"
                        TextAlignment="Center" />
                </StackPanel>
            </Grid>
        </Grid>
    </DataTemplate>

    <DataTemplate x:Key="ProductItemTemplateMobile">
        <Grid
            Height="76"
            MinWidth="280"
            Background="{ThemeResource MegaAppBackgroundBrush}">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="93" />
                <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>
            <StackPanel
                Grid.Column="0"
                Margin="0,0,2,0"
                Background="{ThemeResource MegaProductBackgroundBrush}">
                <Viewbox
                    MaxWidth="24"
                    MaxHeight="24"
                    Margin="0,15,0,0">
                    <PathIcon Data="{Binding ProductPathData, Mode=OneTime}">
                        <PathIcon.Foreground>
                            <SolidColorBrush Color="{Binding ProductColor, Mode=OneTime}" />
                        </PathIcon.Foreground>
                    </PathIcon>
                </Viewbox>
                <TextBlock
                    Margin="0,9,0,9"
                    Style="{ThemeResource MegaBodyFontStyle}"
                    Text="{Binding Name, Mode=OneTime}"
                    TextAlignment="Center">
                    <TextBlock.Foreground>
                        <SolidColorBrush Color="{Binding ProductColor, Mode=OneTime}" />
                    </TextBlock.Foreground>
                </TextBlock>
            </StackPanel>
            <Grid Grid.Column="1" Background="{ThemeResource MegaProductBackgroundBrush}">
                <StackPanel Margin="12,0,12,0">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                        <TextBlock
                            Grid.Column="0"
                            Margin="0,0,4,0"
                            Style="{ThemeResource MegaTitleFontStyle}"
                            Text="{Binding StorageText, Mode=OneTime}"
                            TextAlignment="Left" />
                        <TextBlock
                            Grid.Column="1"
                            Style="{ThemeResource MegaBodyFontStyle}"
                            Text="{Binding Storage, Mode=OneTime}"
                            TextAlignment="Right" />
                    </Grid>
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>
                        <TextBlock
                            Grid.Column="0"
                            Margin="0,0,4,0"
                            Style="{ThemeResource MegaTitleFontStyle}"
                            Text="{Binding TransferQuotaText, Mode=OneTime}"
                            TextAlignment="Left" />
                        <TextBlock
                            Grid.Column="1"
                            Style="{ThemeResource MegaBodyFontStyle}"
                            Text="{Binding Transfer, Mode=OneTime}"
                            TextAlignment="Right" />
                    </Grid>
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>
                        <TextBlock
                            Grid.Column="0"
                            Margin="0,0,4,0"
                            Style="{ThemeResource MegaTitleFontStyle}"
                            Text="{Binding PricePeriod, Mode=OneTime}"
                            TextAlignment="Left" />
                        <TextBlock
                            Grid.Column="1"
                            Style="{ThemeResource MegaBodyFontStyle}"
                            Text="{Binding FormattedPrice, Mode=OneTime}"
                            TextAlignment="Right">
                            <TextBlock.Foreground>
                                <SolidColorBrush Color="{Binding ProductColor, Mode=OneTime}" />
                            </TextBlock.Foreground>
                        </TextBlock>
                    </Grid>
                </StackPanel>
            </Grid>
        </Grid>
    </DataTemplate>

    <DataTemplate x:Key="StorageToolTipItemTemplate">
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="32" />
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="48" />
            </Grid.ColumnDefinitions>
            <Path
                Grid.Column="0"
                Width="24"
                Height="24"
                Data="{StaticResource MegaIconVector}"
                Fill="{StaticResource MegaHeaderIconColorBrush}"
                FlowDirection="LeftToRight"
                Stretch="UniformToFill"
                StrokeThickness="0"
                Visibility="{Binding IsBaseAward, Converter={StaticResource BoolToVisibilityConverter}}" />
            <Image
                Grid.Column="0"
                Width="24"
                Height="24"
                HorizontalAlignment="Center"
                VerticalAlignment="Center"
                Source="{Binding ImageUri}"
                Visibility="{Binding HasImage, Converter={StaticResource BoolToVisibilityConverter}}" />
            <TextBlock
                Grid.Column="1"
                Margin="12,0"
                VerticalAlignment="Center"
                FontSize="14"
                Text="{Binding DisplayNameStorage, Mode=OneTime}"
                TextTrimming="CharacterEllipsis"
                TextWrapping="NoWrap" />
            <TextBlock
                Grid.Column="2"
                HorizontalAlignment="Right"
                VerticalAlignment="Center"
                FontSize="14"
                Text="{Binding StorageRewardText, Mode=OneTime}">
                <TextBlock.Foreground>
                    <SolidColorBrush Color="{ThemeResource UsedStorageQuotaColor}" />
                </TextBlock.Foreground>
            </TextBlock>
        </Grid>
    </DataTemplate>

    <DataTemplate x:Key="TransferToolTipItemTemplate">
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="32" />
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="48" />
            </Grid.ColumnDefinitions>
            <Path
                Grid.Column="0"
                Width="24"
                Height="24"
                Data="{StaticResource MegaIconVector}"
                Fill="{StaticResource MegaHeaderIconColorBrush}"
                FlowDirection="LeftToRight"
                Stretch="UniformToFill"
                StrokeThickness="0"
                Visibility="{Binding IsBaseAward, Converter={StaticResource BoolToVisibilityConverter}}" />
            <Image
                Grid.Column="0"
                Width="24"
                Height="24"
                HorizontalAlignment="Center"
                VerticalAlignment="Center"
                Source="{Binding ImageUri}"
                Visibility="{Binding HasImage, Converter={StaticResource BoolToVisibilityConverter}}" />
            <TextBlock
                Grid.Column="1"
                Margin="12,0"
                VerticalAlignment="Center"
                FontSize="14"
                Text="{Binding DisplayNameTransfer, Mode=OneTime}"
                TextTrimming="CharacterEllipsis"
                TextWrapping="NoWrap" />
            <TextBlock
                Grid.Column="2"
                HorizontalAlignment="Right"
                VerticalAlignment="Center"
                FontSize="14"
                Text="{Binding TransferRewardText, Mode=OneTime}"
                Visibility="{Binding IsTransferAmountVisible, Converter={StaticResource BoolToVisibilityConverter}}">
                <TextBlock.Foreground>
                    <SolidColorBrush Color="{ThemeResource UsedTransferQuotaColor}" />
                </TextBlock.Foreground>
            </TextBlock>
        </Grid>
    </DataTemplate>

    <DataTemplate x:Name="OfflineBannerSpace">
        <Grid
            Height="{Binding OfflineBannerHeight, Mode=OneWay}"
            MinHeight="32"
            Visibility="{Binding IsNetworkAvailable, Mode=OneWay, Converter={StaticResource InverseBoolToVisibilityConverter}}" />
    </DataTemplate>
</ResourceDictionary>
